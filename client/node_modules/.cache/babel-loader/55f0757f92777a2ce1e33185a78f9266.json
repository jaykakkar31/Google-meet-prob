{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayka\\\\web development\\\\google-meet\\\\src\\\\components\\\\vedioPage.jsx\",\n    _s = $RefreshSig$();\n\nimport react, { useState, useEffect, useReducer, useRef } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport MeetingHeader from \"./meetingHeader\";\nimport MeetingFooter from \"./meetingFooter\";\nimport MeetingInfo from \"./meetingInfo\";\nimport Messenger from \"./messenger\";\nimport Alert from \"./alert\";\nimport Peer from \"simple-peer\";\nimport { getCallId, saveCallId } from \"././services/UserService\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction VideoPage() {\n  _s();\n\n  const history = useHistory();\n  const isAdmin = window.location.hash === \"#init\" ? true : false; //#init\n\n  console.log(window.location.hash);\n  const socket = io(\"http://localhost:9000\");\n  let alertTimeout = null;\n  const {\n    id\n  } = useParams();\n  let peer = null;\n  const url = `${window.location.origin}${window.location.pathname}`;\n  const [meetingInfoPopUp, setMeetingInfoPopUp] = useState(false);\n  const [isMessenger, setMessenger] = useState(false);\n  const [messageAlert, setMessageAlert] = useState({});\n  const [isAudio, setIsAudio] = useState(true);\n  const [streamObj, setStreamObj] = useState(); //MESSAGE CHAT\n\n  const intialState = [];\n\n  const MessageListReducer = (state, action) => {\n    switch (action.type) {\n      case \"addMessage\":\n        return [...state, action.payload];\n\n      default:\n        return state;\n    }\n  };\n\n  const [messageList, setMessageList] = useReducer(MessageListReducer, intialState);\n\n  const getRecieverCode = () => {\n    getCallId(id).then(response => {\n      console.log(response);\n      peer.signal(response.data);\n    });\n  };\n\n  useEffect(() => {\n    //Call every time when page renders\n    if (isAdmin) {\n      setMeetingInfoPopUp(true);\n    }\n\n    initWebRTC();\n    socket.on(\"code\", data => {\n      console.log(data);\n      peer.signal(data);\n    });\n  }, []);\n\n  const initWebRTC = () => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      console.log(stream);\n      peer = new Peer({\n        initiator: isAdmin,\n        //trickle wait for all the data to send makes it slow\n        trickle: false,\n        stream: stream\n      });\n\n      if (!isAdmin) {\n        getRecieverCode();\n      }\n\n      peer.on(\"signal\", data => {\n        if (isAdmin) {\n          console.log(\"Id : \" + id);\n          let payload = {\n            id: id,\n            signalData: data\n          };\n          saveCallId(payload).then(response => {\n            console.log(response);\n          });\n        } else {\n          //Socket event\n          // peer.on(\"open\", (id) => {\n          //   socket.emit(\"join-room\", id, data);\n          // });\n          //SENDING TO BACKEND\n          socket.emit(\"code\", data, id);\n        }\n      });\n      peer.on(\"connect\", () => {\n        console.log(\"peer connected\");\n      });\n      peer.on(\"stream\", stream => {\n        // got remote video stream, now let's show it in a video tag\n        var video = document.querySelector(\"video\");\n\n        if (\"srcObject\" in video) {\n          video.srcObject = stream;\n        } else {\n          video.src = window.URL.createObjectURL(stream); // for older browsers\n        }\n\n        video.play();\n      });\n    });\n  }; // NEW START\n\n\n  const videoConstraints = {\n    height: window.innerHeight / 2,\n    width: window.innerWidth / 2\n  };\n  const [peers, setPeers] = useState([]);\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef([]); // OBTAINED USING USE PARAMS\n\n  const roomID = id;\n  useEffect(() => {\n    //Call every time when page renders\n    if (isAdmin) {\n      setMeetingInfoPopUp(true);\n    }\n\n    initWebRTC(); // ESTABLISHING CONNECT WITH BACKEND\n\n    socketRef.current = io.connect(\"http://localhost:9000\"); // LOGIC FOR SOMEBODY JOINING THE ROOM\n\n    navigator.mediaDevices.getUserMedia({\n      video: videoConstraints,\n      audio: true\n    }).then(stream => {\n      userVideo.current.srcObject = stream; // LOGIC THAT USER HAS JOINED THE ROOM\n      //THIS EVENT Is NOT CACHED AT BACKEND\n      //.emit means sending  to backend\n\n      socketRef.current.emit(\"JOINED ROOM\"); // Recieve users from backened\n\n      socketRef.current.on(\"all users\", users => {\n        //peers is for how many videos are rendering\n        const peersForVideos = [];\n        users.array.forEach(userID => {\n          console.log(socketRef.current.id); //UserID is the of user currently joined\n          // socketRef.current.id id's of all those inside the meeting\n\n          const peer = createPeer(userID, socketRef.current.id, stream); //peersRef is for which is having connection with which\n\n          peersRef.current.push({\n            peerID: userID,\n            peer\n          });\n        });\n        peersForVideos.push(peer);\n        setPeers(peersForVideos);\n      }); //PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\n      //.on means recieving from backend\n\n      socketRef.current.on(\"user joined\", payload => {});\n    });\n  }, []);\n\n  function createPeer(userToSignal, callerID, stream) {\n    const peer = new Peer({\n      initiator: isAdmin,\n      //trickle wait for all the data to send makes it slow\n      trickle: false,\n      stream: stream\n    }); //generates signal\n    //sending to backend\n\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"sending signal\", {\n        userToSignal,\n        callerID,\n        signal\n      });\n    });\n  }\n\n  function addPeer(incomingSignal, callerID, stream) {}\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"videoScreen\",\n    children: [/*#__PURE__*/_jsxDEV(MeetingHeader, {\n      setMessenger: setMessenger\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetingFooter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), isAdmin && meetingInfoPopUp && /*#__PURE__*/_jsxDEV(MeetingInfo, {\n      url: url,\n      setMeetingInfoPopUp: setMeetingInfoPopUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }, this), isMessenger ? /*#__PURE__*/_jsxDEV(Messenger, {\n      setMessenger: setMessenger,\n      messageList: messageList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Alert, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VideoPage, \"SsZDe4iK9j4ch5WhVqLEMHZS2bY=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = VideoPage;\nexport default VideoPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoPage\");","map":{"version":3,"sources":["C:/Users/jayka/web development/google-meet/src/components/vedioPage.jsx"],"names":["react","useState","useEffect","useReducer","useRef","useParams","useHistory","MeetingHeader","MeetingFooter","MeetingInfo","Messenger","Alert","Peer","getCallId","saveCallId","io","VideoPage","history","isAdmin","window","location","hash","console","log","socket","alertTimeout","id","peer","url","origin","pathname","meetingInfoPopUp","setMeetingInfoPopUp","isMessenger","setMessenger","messageAlert","setMessageAlert","isAudio","setIsAudio","streamObj","setStreamObj","intialState","MessageListReducer","state","action","type","payload","messageList","setMessageList","getRecieverCode","then","response","signal","data","initWebRTC","on","navigator","mediaDevices","getUserMedia","video","audio","stream","initiator","trickle","signalData","emit","document","querySelector","srcObject","src","URL","createObjectURL","play","videoConstraints","height","innerHeight","width","innerWidth","peers","setPeers","socketRef","userVideo","peersRef","roomID","current","connect","users","peersForVideos","array","forEach","userID","createPeer","push","peerID","userToSignal","callerID","addPeer","incomingSignal"],"mappings":"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","sourcesContent":["import react, { useState, useEffect, useReducer, useRef } from \"react\";\n\nimport { useParams, useHistory } from \"react-router-dom\";\nimport MeetingHeader from \"./meetingHeader\";\nimport MeetingFooter from \"./meetingFooter\";\nimport MeetingInfo from \"./meetingInfo\";\nimport Messenger from \"./messenger\";\nimport Alert from \"./alert\";\nimport Peer from \"simple-peer\";\nimport { getCallId, saveCallId } from \"././services/UserService\";\nimport io from \"socket.io-client\";\nfunction VideoPage() {\n  const history = useHistory();\n  const isAdmin = window.location.hash === \"#init\" ? true : false;\n\n  //#init\n  console.log(window.location.hash);\n  const socket = io(\"http://localhost:9000\");\n  let alertTimeout = null;\n  const { id } = useParams();\n\n  let peer = null;\n  const url = `${window.location.origin}${window.location.pathname}`;\n\n  const [meetingInfoPopUp, setMeetingInfoPopUp] = useState(false);\n  const [isMessenger, setMessenger] = useState(false);\n  const [messageAlert, setMessageAlert] = useState({});\n  const [isAudio, setIsAudio] = useState(true);\n  const [streamObj, setStreamObj] = useState();\n\n  //MESSAGE CHAT\n  const intialState = [];\n  const MessageListReducer = (state, action) => {\n    switch (action.type) {\n      case \"addMessage\":\n        return [...state, action.payload];\n\n      default:\n        return state;\n    }\n  };\n\n  const [messageList, setMessageList] = useReducer(\n    MessageListReducer,\n    intialState\n  );\n\n  const getRecieverCode = () => {\n    getCallId(id).then((response) => {\n      console.log(response);\n      peer.signal(response.data);\n    });\n  };\n\n  useEffect(() => {\n    //Call every time when page renders\n    if (isAdmin) {\n      setMeetingInfoPopUp(true);\n    }\n    initWebRTC();\n    socket.on(\"code\", (data) => {\n      console.log(data);\n      peer.signal(data);\n    });\n  }, []);\n\n  const initWebRTC = () => {\n    navigator.mediaDevices\n      .getUserMedia({\n        video: true,\n        audio: true,\n      })\n      .then((stream) => {\n        console.log(stream);\n\n        peer = new Peer({\n          initiator: isAdmin,\n          //trickle wait for all the data to send makes it slow\n          trickle: false,\n          stream: stream,\n        });\n\n        if (!isAdmin) {\n          getRecieverCode();\n        }\n\n        peer.on(\"signal\", (data) => {\n          if (isAdmin) {\n            console.log(\"Id : \" + id);\n            let payload = {\n              id: id,\n              signalData: data,\n            };\n            saveCallId(payload).then((response) => {\n              console.log(response);\n            });\n          } else {\n            //Socket event\n            // peer.on(\"open\", (id) => {\n            //   socket.emit(\"join-room\", id, data);\n            // });\n\n            //SENDING TO BACKEND\n            socket.emit(\"code\", data, id);\n          }\n        });\n\n        peer.on(\"connect\", () => {\n          console.log(\"peer connected\");\n        });\n\n        peer.on(\"stream\", (stream) => {\n          // got remote video stream, now let's show it in a video tag\n          var video = document.querySelector(\"video\");\n\n          if (\"srcObject\" in video) {\n            video.srcObject = stream;\n          } else {\n            video.src = window.URL.createObjectURL(stream); // for older browsers\n          }\n          video.play();\n        });\n      });\n  };\n\n  // NEW START\n  const videoConstraints = {\n    height: window.innerHeight / 2,\n    width: window.innerWidth / 2,\n  };\n\n  const [peers, setPeers] = useState([]);\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  // OBTAINED USING USE PARAMS\n  const roomID = id;\n\n  useEffect(() => {\n    //Call every time when page renders\n    if (isAdmin) {\n      setMeetingInfoPopUp(true);\n    }\n    initWebRTC();\n    // ESTABLISHING CONNECT WITH BACKEND\n    socketRef.current = io.connect(\"http://localhost:9000\");\n    // LOGIC FOR SOMEBODY JOINING THE ROOM\n    navigator.mediaDevices\n      .getUserMedia({ video: videoConstraints, audio: true })\n      .then((stream) => {\n        userVideo.current.srcObject = stream;\n        // LOGIC THAT USER HAS JOINED THE ROOM\n\n        //THIS EVENT Is NOT CACHED AT BACKEND\n        //.emit means sending  to backend\n        socketRef.current.emit(\"JOINED ROOM\");\n        // Recieve users from backened\n        socketRef.current.on(\"all users\", (users) => {\n          //peers is for how many videos are rendering\n          const peersForVideos = [];\n          users.array.forEach((userID) => {\n            console.log(socketRef.current.id);\n            //UserID is the of user currently joined\n            // socketRef.current.id id's of all those inside the meeting\n            \n            const peer = createPeer(userID, socketRef.current.id, stream);\n            //peersRef is for which is having connection with which\n            peersRef.current.push({\n              peerID:userID,peer\n            }\n            )\n          });\n\n          peersForVideos.push(peer)\n          setPeers(peersForVideos)\n        });\n        //PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\n        //.on means recieving from backend\n        socketRef.current.on(\"user joined\",(payload)=>{\n          \n        });\n      });\n  }, []);\n\n  function createPeer(userToSignal, callerID, stream) {\n    const peer = new Peer({\n      initiator: isAdmin,\n      //trickle wait for all the data to send makes it slow\n      trickle: false,\n      stream: stream,\n    });\n    //generates signal\n    //sending to backend\n    peer.on(\"signal\",signal=>{\n      socketRef.current.emit(\"sending signal\",{userToSignal,callerID,signal})\n    })\n  }\n\n  function addPeer(incomingSignal, callerID, stream) {}\n\n  return (\n    <div class=\"videoScreen\">\n      <MeetingHeader setMessenger={setMessenger} />\n      <MeetingFooter />\n      {isAdmin && meetingInfoPopUp && (\n        <MeetingInfo url={url} setMeetingInfoPopUp={setMeetingInfoPopUp} />\n      )}\n      {isMessenger ? (\n        <Messenger setMessenger={setMessenger} messageList={messageList} />\n      ) : (\n        <Alert />\n      )}\n    </div>\n  );\n}\n\nexport default VideoPage;\n"]},"metadata":{},"sourceType":"module"}