{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayka\\\\web development\\\\google-meet\\\\client\\\\src\\\\components\\\\Room.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vidStyle = {\n  // height: \"calc(50vh -90px)\",\n  // borderRadius:\"10px\"\n  // height:\"45%\",\n  // width:\"\",\n  padding: \"10px\",\n  paddingBottom: \"5px\"\n};\n\nconst Video = props => {\n  _s();\n\n  const ref = useRef();\n  useEffect(() => {\n    console.log(props.peer);\n    props.peer.on(\"stream\", stream => {\n      console.log(\"ENTE0RD\" + stream);\n      ref.current.srcObject = stream;\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"video\", {\n    style: vidStyle,\n    autoPlay: true,\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Video, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n_c = Video;\nconst videoConstraints = {\n  height: window.innerHeight / 2,\n  width: window.innerWidth / 2\n};\n\nconst Room = props => {\n  _s2();\n\n  const numUsers = useRef();\n  const [peers, setPeers] = useState([]);\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const roomID = props.id;\n  useEffect(() => {\n    socketRef.current = io.connect(\"http://localhost:9000\");\n    navigator.mediaDevices.getUserMedia({\n      video: videoConstraints,\n      audio: true\n    }).then(stream => {\n      userVideo.current.srcObject = stream;\n      console.log(\"USERVIDEO\" + stream); // LOGIC THAT USER HAS JOINED THE ROOM\n      //THIS EVENT Is NOT CACHED AT BACKEND\n      //.emit means sending  to backend\n\n      socketRef.current.emit(\"JOINED ROOM\");\n      socketRef.current.emit(\"join room\", roomID); // Recieve users from backened\n\n      if (!props.isAdmin) {\n        socketRef.current.on(\"all users\", users => {\n          //peers is for how many videos are rendering\n          console.log(users.length);\n          numUsers.current = users.length + 1;\n          const peersForVideo = [];\n          users.forEach(userID => {\n            console.log(userID + \" USER ID OF USER IN THE ROOM \");\n            console.log(socketRef.current); //socketRef.current.id is the of user currently joined\n            // UserID  id's of all those inside the meeting\n\n            const peer = createPeer(userID, socketRef.current.id, stream); //peersRef is for which is having connection with which\n\n            peersRef.current.push({\n              peerID: userID,\n              peer\n            });\n            peersForVideo.push(peer);\n          });\n          setPeers(peersForVideo);\n          console.log(peers);\n        }); //PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\n        //.on means recieving from backend\n\n        socketRef.current.on(\"user joined\", payload => {\n          const peer = addPeer(payload.signal, payload.callerID, stream);\n          peersRef.current.push({\n            peerID: payload.callerID,\n            peer\n          });\n          setPeers(users => [...users, peer]);\n        });\n        socketRef.current.on(\"receiving returned signal\", payload => {\n          // signal has been send to multiple now multiple users are sending back the signal to caller\n          const item = peersRef.current.find(p => p.peerID === payload.id);\n          console.log(item);\n          item.peer.signal(payload.signal);\n        });\n      }\n    });\n  }, []);\n\n  function createPeer(userToSignal, callerID, stream) {\n    console.log(\"CREATE PEER\");\n    const peer = new Peer({\n      initiator: true,\n      //trickle wait for all the data to send makes it slow\n      trickle: false,\n      stream\n    }); //generates signal\n    //sending to backend\n\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"sending signal\", {\n        userToSignal,\n        callerID,\n        signal\n      });\n    });\n    return peer;\n  }\n\n  function addPeer(incomingSignal, callerID, stream) {\n    console.log(\"Add Peer\");\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    }); // 1 accepting the incoming signal that this will return the signal\n\n    peer.signal(incomingSignal);\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"returning signal\", {\n        signal,\n        callerID\n      });\n    });\n    return peer;\n  } // console.log(\"PEERS \" + JSON.stringify(peers));\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      style: vidStyle,\n      muted: true,\n      ref: userVideo,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 4\n    }, this), peers.map((peer, index) => {\n      return /*#__PURE__*/_jsxDEV(Video, {\n        peer: peer\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 12\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 3\n  }, this);\n};\n\n_s2(Room, \"J6hlwmxX+ChjvgV8u4gyYhED/hs=\");\n\n_c2 = Room;\nexport default Room;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Video\");\n$RefreshReg$(_c2, \"Room\");","map":{"version":3,"sources":["C:/Users/jayka/web development/google-meet/client/src/components/Room.js"],"names":["React","useEffect","useRef","useState","io","Peer","vidStyle","padding","paddingBottom","Video","props","ref","console","log","peer","on","stream","current","srcObject","videoConstraints","height","window","innerHeight","width","innerWidth","Room","numUsers","peers","setPeers","socketRef","userVideo","peersRef","roomID","id","connect","navigator","mediaDevices","getUserMedia","video","audio","then","emit","isAdmin","users","length","peersForVideo","forEach","userID","createPeer","push","peerID","payload","addPeer","signal","callerID","item","find","p","userToSignal","initiator","trickle","incomingSignal","map","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\n\r\nconst vidStyle = {\r\n\t// height: \"calc(50vh -90px)\",\r\n    // borderRadius:\"10px\"\r\n    // height:\"45%\",\r\n    // width:\"\",\r\n    padding:\"10px\",\r\n    paddingBottom:\"5px\",\r\n};\r\n\r\nconst Video = (props) => {\r\n\tconst ref = useRef();\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log(props.peer);\r\n\t\tprops.peer.on(\"stream\", (stream) => {\r\n\t\t\tconsole.log(\"ENTE0RD\" + stream);\r\n\t\t\tref.current.srcObject = stream;\r\n\t\t});\r\n\t}, []);\r\n\r\n\treturn <video  style={vidStyle} autoPlay ref={ref} />;\r\n};\r\n\r\nconst videoConstraints = {\r\n\theight: window.innerHeight / 2,\r\n\twidth: window.innerWidth / 2,\r\n};\r\n\r\nconst Room = (props) => {\r\n    const numUsers=useRef()\r\n\tconst [peers, setPeers] = useState([]);\r\n\tconst socketRef = useRef();\r\n\tconst userVideo = useRef();\r\n\tconst peersRef = useRef([]);\r\n\tconst roomID = props.id;\r\n\r\n\tuseEffect(() => {\r\n\t\tsocketRef.current = io.connect(\"http://localhost:9000\");\r\n\t\tnavigator.mediaDevices\r\n\t\t\t.getUserMedia({ video: videoConstraints, audio: true })\r\n\t\t\t.then((stream) => {\r\n\r\n\t\t\t\tuserVideo.current.srcObject = stream;\r\n\t\t\t\tconsole.log(\"USERVIDEO\" + stream);\r\n\t\t\t\t// LOGIC THAT USER HAS JOINED THE ROOM\r\n\r\n\t\t\t\t//THIS EVENT Is NOT CACHED AT BACKEND\r\n\t\t\t\t//.emit means sending  to backend\r\n\t\t\t\tsocketRef.current.emit(\"JOINED ROOM\");\r\n\t\t\t\tsocketRef.current.emit(\"join room\", roomID);\r\n\t\t\t\t// Recieve users from backened\r\n\t\t\t\tif (!props.isAdmin) {\r\n\t\t\t\t\tsocketRef.current.on(\"all users\", (users) => {\r\n\t\t\t\t\t\t//peers is for how many videos are rendering\r\n\t\t\t\t\t\tconsole.log(users.length);\r\n                        numUsers.current=users.length+1\r\n\t\t\t\t\t\tconst peersForVideo = [];\r\n\t\t\t\t\t\tusers.forEach((userID) => {\r\n\t\t\t\t\t\t\tconsole.log(userID + \" USER ID OF USER IN THE ROOM \");\r\n\t\t\t\t\t\t\tconsole.log(socketRef.current);\r\n\t\t\t\t\t\t\t//socketRef.current.id is the of user currently joined\r\n\t\t\t\t\t\t\t// UserID  id's of all those inside the meeting\r\n\r\n\t\t\t\t\t\t\tconst peer = createPeer(userID, socketRef.current.id, stream);\r\n\t\t\t\t\t\t\t//peersRef is for which is having connection with which\r\n\t\t\t\t\t\t\tpeersRef.current.push({\r\n\t\t\t\t\t\t\t\tpeerID: userID,\r\n\t\t\t\t\t\t\t\tpeer,\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tpeersForVideo.push(peer);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tsetPeers(peersForVideo);\r\n\t\t\t\t\t\tconsole.log(peers);\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\r\n\t\t\t\t\t//.on means recieving from backend\r\n\t\t\t\t\tsocketRef.current.on(\"user joined\", (payload) => {\r\n\t\t\t\t\t\tconst peer = addPeer(payload.signal, payload.callerID, stream);\r\n\r\n\t\t\t\t\t\tpeersRef.current.push({\r\n\t\t\t\t\t\t\tpeerID: payload.callerID,\r\n\t\t\t\t\t\t\tpeer,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tsetPeers((users) => [...users, peer]);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsocketRef.current.on(\"receiving returned signal\", (payload) => {\r\n\t\t\t\t\t\t// signal has been send to multiple now multiple users are sending back the signal to caller\r\n\t\t\t\t\t\tconst item = peersRef.current.find((p) => p.peerID === payload.id);\r\n\t\t\t\t\t\tconsole.log(item);\r\n\t\t\t\t\t\titem.peer.signal(payload.signal);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}, []);\r\n\r\n\tfunction createPeer(userToSignal, callerID, stream) {\r\n\t\tconsole.log(\"CREATE PEER\");\r\n\t\tconst peer = new Peer({\r\n\t\t\tinitiator: true,\r\n\t\t\t//trickle wait for all the data to send makes it slow\r\n\t\t\ttrickle: false,\r\n\t\t\tstream,\r\n\t\t});\r\n\t\t//generates signal\r\n\t\t//sending to backend\r\n\t\tpeer.on(\"signal\", (signal) => {\r\n\t\t\tsocketRef.current.emit(\"sending signal\", {\r\n\t\t\t\tuserToSignal,\r\n\t\t\t\tcallerID,\r\n\t\t\t\tsignal,\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn peer;\r\n\t}\r\n\r\n\tfunction addPeer(incomingSignal, callerID, stream) {\r\n\t\tconsole.log(\"Add Peer\");\r\n\t\tconst peer = new Peer({\r\n\t\t\tinitiator: false,\r\n\t\t\ttrickle: false,\r\n\t\t\tstream,\r\n\t\t});\r\n\t\t// 1 accepting the incoming signal that this will return the signal\r\n\t\tpeer.signal(incomingSignal);\r\n\r\n\t\tpeer.on(\"signal\", (signal) => {\r\n\t\t\tsocketRef.current.emit(\"returning signal\", { signal, callerID });\r\n\t\t});\r\n\t\treturn peer;\r\n\t}\r\n\r\n\t// console.log(\"PEERS \" + JSON.stringify(peers));\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t<video style={vidStyle} muted ref={userVideo} autoPlay />\r\n\t\t\t{peers.map((peer, index) => {\r\n\t\t\t\treturn <Video key={index} peer={peer} />;\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Room;\r\n"]},"metadata":{},"sourceType":"module"}