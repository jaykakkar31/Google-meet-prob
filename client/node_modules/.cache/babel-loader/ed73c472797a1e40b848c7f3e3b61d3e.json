{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayka\\\\web development\\\\google-meet\\\\src\\\\components\\\\vedioPage.jsx\",\n    _s = $RefreshSig$();\n\nimport react, { useState, useEffect, useReducer } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport MeetingHeader from \"./meetingHeader\";\nimport MeetingFooter from \"./meetingFooter\";\nimport MeetingInfo from \"./meetingInfo\";\nimport Messenger from \"./messenger\";\nimport Alert from \"./alert\";\nimport Peer from \"simple-peer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction VideoPage() {\n  _s();\n\n  const history = useHistory(); //#init\n\n  console.log(window.location.hash);\n  let alertTimeout = null;\n  const {\n    id\n  } = useParams();\n  console.log(useParams());\n  let peer = null;\n  const isAdmin = window.location.hash === \"#init\" ? true : false;\n  const url = `${window.location.origin}${window.location.pathname}`;\n  const [meetingInfoPopUp, setMeetingInfoPopUp] = useState(false);\n  const [isMessenger, setMessenger] = useState(false);\n  const [messageAlert, setMessageAlert] = useState({});\n  const [isAudio, setIsAudio] = useState(true);\n  const [streamObj, setStreamObj] = useState(); //MESSAGE CHAT\n\n  const intialState = [];\n\n  const MessageListReducer = (state, action) => {\n    switch (action.type) {\n      case \"addMessage\":\n        return [...state, action.payload];\n\n      default:\n        return state;\n    }\n  };\n\n  const [messageList, setMessageList] = useReducer(MessageListReducer, intialState);\n\n  const initWebRTC = () => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      console.log(stream);\n      peer = new Peer({\n        initiator: isAdmin,\n        //trickle wait for all the data to send makes it slow\n        trickle: false,\n        stream: stream\n      });\n      peer.on('signal', data => {\n        if (isAdmin) {\n          let payload = {\n            id,\n            signalData: data\n          };\n        }\n      });\n    });\n  };\n\n  console.log(id);\n  useEffect(() => {\n    //Call every time when page renders\n    if (isAdmin) {\n      setMeetingInfoPopUp(true);\n    }\n\n    initWebRTC();\n  }, []);\n  console.log(isAdmin);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"videoScreen\",\n    children: [/*#__PURE__*/_jsxDEV(MeetingHeader, {\n      setMessenger: setMessenger\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetingFooter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), isAdmin && meetingInfoPopUp && /*#__PURE__*/_jsxDEV(MeetingInfo, {\n      url: url,\n      setMeetingInfoPopUp: setMeetingInfoPopUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), isMessenger ? /*#__PURE__*/_jsxDEV(Messenger, {\n      setMessenger: setMessenger,\n      messageList: messageList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Alert, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VideoPage, \"+P19bQzfmTY1TG+wiQLmCE6pEmQ=\", false, function () {\n  return [useHistory, useParams, useParams];\n});\n\n_c = VideoPage;\nexport default VideoPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoPage\");","map":{"version":3,"sources":["C:/Users/jayka/web development/google-meet/src/components/vedioPage.jsx"],"names":["react","useState","useEffect","useReducer","useParams","useHistory","MeetingHeader","MeetingFooter","MeetingInfo","Messenger","Alert","Peer","VideoPage","history","console","log","window","location","hash","alertTimeout","id","peer","isAdmin","url","origin","pathname","meetingInfoPopUp","setMeetingInfoPopUp","isMessenger","setMessenger","messageAlert","setMessageAlert","isAudio","setIsAudio","streamObj","setStreamObj","intialState","MessageListReducer","state","action","type","payload","messageList","setMessageList","initWebRTC","navigator","mediaDevices","getUserMedia","video","audio","then","stream","initiator","trickle","on","data","signalData"],"mappings":"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","sourcesContent":["import react, { useState, useEffect, useReducer } from \"react\";\n\nimport { useParams, useHistory } from \"react-router-dom\";\nimport MeetingHeader from \"./meetingHeader\";\nimport MeetingFooter from \"./meetingFooter\";\nimport MeetingInfo from \"./meetingInfo\";\nimport Messenger from \"./messenger\";\nimport Alert from \"./alert\";\nimport Peer from \"simple-peer\";\n\nfunction VideoPage() {\n  const history = useHistory();\n  //#init\n  console.log(window.location.hash);\n\n  let alertTimeout = null;\n  const { id } = useParams();\n  console.log(useParams());\n  let peer = null;\n  const isAdmin = window.location.hash === \"#init\" ? true : false;\n  const url = `${window.location.origin}${window.location.pathname}`;\n\n  const [meetingInfoPopUp, setMeetingInfoPopUp] = useState(false);\n  const [isMessenger, setMessenger] = useState(false);\n  const [messageAlert, setMessageAlert] = useState({});\n  const [isAudio, setIsAudio] = useState(true);\n  const [streamObj, setStreamObj] = useState();\n\n  //MESSAGE CHAT\n  const intialState = [];\n  const MessageListReducer = (state, action) => {\n    switch (action.type) {\n      case \"addMessage\":\n        return [...state, action.payload];\n\n      default:\n        return state;\n    }\n  };\n\n  const [messageList, setMessageList] = useReducer(\n    MessageListReducer,\n    intialState\n  );\n\n  const initWebRTC = () => {\n    navigator.mediaDevices\n      .getUserMedia({\n        video: true,\n        audio: true,\n      })\n      .then((stream) => {\n        console.log(stream);\n\n        peer = new Peer({\n          initiator: isAdmin,\n          //trickle wait for all the data to send makes it slow\n          trickle: false,\n          stream: stream,\n        });\n        peer.on('signal',(data)=>{\n            if(isAdmin){\n                let payload={\n                    id,\n                    signalData:data\n                }\n            }\n        })\n      });\n  };\n\n  console.log(id);\n  useEffect(() => {\n    //Call every time when page renders\n    if (isAdmin) {\n      setMeetingInfoPopUp(true);\n    }\n    initWebRTC();\n  }, []);\n\n  console.log(isAdmin);\n  return (\n    <div class=\"videoScreen\">\n      <MeetingHeader setMessenger={setMessenger} />\n      <MeetingFooter />\n      {isAdmin && meetingInfoPopUp && (\n        <MeetingInfo url={url} setMeetingInfoPopUp={setMeetingInfoPopUp} />\n      )}\n      {isMessenger ? (\n        <Messenger setMessenger={setMessenger} messageList={messageList} />\n      ) : (\n        <Alert />\n      )}\n    </div>\n  );\n}\n\nexport default VideoPage;\n"]},"metadata":{},"sourceType":"module"}