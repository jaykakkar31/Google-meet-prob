{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayka\\\\web development\\\\google-meet\\\\client\\\\src\\\\components\\\\MeetingPage\\\\Room.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState, useReducer } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport MeetingHeader from \"./meetingHeader\";\nimport MeetingFooter from \"./meetingFooter\";\nimport MeetingInfo from \"./meetingInfo\";\nimport Alert from \"./alert\";\nimport Messenger from \"./messenger\";\nimport { Player, ControlBar, PlayToggle } from \"video-react\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vidStyle = {\n  height: `264.15px`,\n  width: \"639.9px\",\n  padding: \"10px\",\n  paddingBottom: \"5px\",\n  objectFit: \"fill\"\n};\n\nconst Video = props => {\n  _s();\n\n  const ref = useRef();\n  console.log(\"VIDEO CALLED\" + JSON.stringify(props.peer));\n  useEffect(() => {\n    props.peer.on(\"stream\", stream => {\n      console.log(\"ENTE0RD\" + stream);\n      ref.current.srcObject = stream;\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"video\", {\n    style: vidStyle,\n    muted: !props.isAudio,\n    ref: ref,\n    autoPlay: true,\n    controls: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Video, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n_c = Video;\n\nconst MessageListReducer = (state, action) => {\n  let draftState = [...state];\n  console.log(state);\n\n  switch (action.type) {\n    case \"addMessage\":\n      console.log(action);\n      return [...draftState, action.payload];\n\n    default:\n      return state;\n  }\n};\n\n_c2 = MessageListReducer;\n\nconst Room = ({\n  id,\n  isAdmin,\n  setMeetingInfoPopUp,\n  url,\n  meetingInfoPopUp\n}) => {\n  _s2();\n\n  const [isMessenger, setMessenger] = useState(false);\n  const numUsers = useRef();\n  let history = useHistory();\n  const [peers, setPeers] = useState([]);\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const screenStream = useRef();\n  const roomID = id;\n  const [isAudio, setIsAudio] = useState(false);\n  const [streamObj, setStreamObj] = useState();\n  const [screenCastStream, setScreenCastStream] = useState();\n  const [isPresenting, setIsPresenting] = useState();\n  const [isVideo, setIsVideo] = useState(true);\n  const initialState = [];\n  const [messageListState, messgListReducer] = useReducer(MessageListReducer, initialState);\n  const [messageAlert, setMessageAlert] = useState({});\n  let alertTimeout = null;\n\n  const formatDate = () => {\n    return moment().format(\"LT\");\n  };\n\n  useEffect(() => {\n    socketRef.current = io.connect(\"/\");\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      setStreamObj(stream);\n      userVideo.current.srcObject = stream;\n      console.log(userVideo.current); // LOGIC THAT USER HAS JOINED THE ROOM\n      //THIS EVENT Is NOT CACHED AT BACKEND\n      //.emit means sending  to backend\n\n      socketRef.current.emit(\"JOINED ROOM\");\n      socketRef.current.emit(\"join room\", roomID); // Recieve users from backened\n      // if (!props.isAdmin) {\n\n      socketRef.current.on(\"all users\", users => {\n        //peers is for how many videos are rendering\n        const peersForVideo = [];\n        users.forEach(userID => {\n          console.log(userID + \" USER ID OF USER IN THE ROOM \");\n          console.log(socketRef.current); //socketRef.current.id is the of user currently joined\n          // UserID  id's of all those inside the meeting\n\n          const peer = createPeer(userID, socketRef.current.id, stream); //peersRef is for which is having connection with which\n\n          peersRef.current.push({\n            peerID: userID,\n            peer\n          });\n          peersForVideo.push(peer);\n        });\n\n        if (peers.length <= 4) {\n          setPeers(peersForVideo);\n        }\n      }); //PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\n      //.on means recieving from backend\n\n      socketRef.current.on(\"user joined\", payload => {\n        const peer = addPeer(payload.signal, payload.callerID, stream);\n        peersRef.current.push({\n          peerID: payload.callerID,\n          peer\n        });\n        setPeers(users => [...users, peer]);\n      });\n      socketRef.current.on(\"receiving returned signal\", payload => {\n        // signal has been send to multiple now multiple users are sending back the signal to caller\n        const item = peersRef.current.find(p => p.peerID === payload.id); // console.log(item);\n\n        item.peer.signal(payload.signal);\n      }); // }\n    });\n  }, []);\n\n  function createPeer(userToSignal, callerID, stream) {\n    console.log(\"CREATE PEER\");\n    const peer = new Peer({\n      initiator: true,\n      //trickle wait for all the data to send makes it slow\n      trickle: false,\n      stream\n    }); //generates signal\n    //sending to backend\n\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"sending signal\", {\n        userToSignal,\n        callerID,\n        signal\n      });\n    });\n    console.log(formatDate());\n    peer.on(\"data\", data => {\n      clearTimeout(alertTimeout);\n      messgListReducer({\n        type: \"addMessage\",\n        payload: {\n          user: callerID,\n          msg: data.toString(),\n          time: formatDate()\n        }\n      });\n      setMessageAlert({\n        alert: true,\n        isPopup: true,\n        payload: {\n          msg: data.toString(),\n          user: callerID\n        }\n      });\n      alertTimeout = setInterval(() => {\n        setMessageAlert({ ...messageAlert,\n          alert: false,\n          isPopup: false,\n          payload: {}\n        });\n      }, 10000);\n    });\n    return peer;\n  }\n\n  function addPeer(incomingSignal, callerID, stream) {\n    console.log(\"Add Peer\");\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    }); // 1 accepting the incoming signal that this will return the signal\n\n    peer.signal(incomingSignal);\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"returning signal\", {\n        signal,\n        callerID\n      });\n    });\n    return peer;\n  }\n\n  const screenShare = () => {\n    navigator.mediaDevices //Cursor True is means sending cursor also of the person sharing screen to the person recieving the screen\n    .getDisplayMedia({\n      cursor: true\n    }).then(screenStream => {\n      console.log(\"SCREEN STREAM\", screenStream);\n      console.log(userVideo.current);\n      peers.map((peer, index) => {\n        console.log(peer);\n        peer.replaceTrack( //0th track is the screen track\n        streamObj.getVideoTracks()[0], screenStream.getVideoTracks()[0], streamObj);\n      });\n      setIsPresenting(true); //WHEN SHARING STOPS RETURN TO NORMAl STATE\n      //RESPONSIBLE FOR WORKING OF STOP BUTTON\n\n      setScreenCastStream(screenStream);\n\n      screenStream.getTracks()[0].onended = () => {\n        peers.map((peer, index) => {\n          console.log(\"CALLED\");\n          peer.replaceTrack(screenStream.getVideoTracks()[0], streamObj.getVideoTracks()[0], streamObj);\n        });\n        setIsPresenting(false);\n      };\n    });\n  };\n\n  const stopScreenShare = () => {\n    screenCastStream.getVideoTracks().forEach(function (track) {\n      track.stop();\n    }); // Replace with video tracks\n\n    peers.map((peer, index) => {\n      peer.replaceTrack(screenCastStream.getVideoTracks()[0], streamObj.getVideoTracks()[0], streamObj);\n      setIsPresenting(false);\n    });\n  };\n\n  const toggleVideo = value => {\n    if (value) {\n      userVideo.current.play();\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(stream => {\n        userVideo.current.srcObject = stream;\n      });\n    } else {\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(stream => {\n        userVideo.current.srcObject = stream.stop;\n      });\n      userVideo.current.pause();\n    }\n\n    setIsVideo(value);\n  };\n\n  const disconnect = () => {\n    console.log(\"Clicked\");\n    socketRef.current.disconnect();\n    history.push(\"/\");\n  }; // console.log(messgListReducer);\n\n\n  const sendMsg = msg => {\n    //Send From one peer to another\n    console.log(\"SEND MESSAGE\");\n    console.log(formatDate());\n    peers.map(peer => {\n      peer.send(msg);\n      messgListReducer({\n        type: \"addMessg\",\n        payload: {\n          msg: msg,\n          user: socketRef.current.id,\n          time: formatDate()\n        }\n      });\n      console.log(peer);\n    });\n    console.log();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"videoScreen\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        style: vidStyle,\n        muted: !isAudio,\n        ref: userVideo,\n        autoPlay: true,\n        controls: isPresenting\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 5\n      }, this), peers.map((peer, index) => {\n        return /*#__PURE__*/_jsxDEV(Video, {\n          peer: peer,\n          numUsers: numUsers.current,\n          isAudio: isAudio\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 7\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MeetingHeader, {\n      setMessenger: setMessenger,\n      id: id,\n      setMessageAlert: setMessageAlert,\n      messageAlert: messageAlert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MeetingFooter, {\n      isPresenting: isPresenting,\n      screenShare: screenShare,\n      stopScreenShare: stopScreenShare,\n      disconnect: disconnect,\n      setIsAudio: setIsAudio,\n      isVideo: isVideo,\n      isAudio: isAudio,\n      toggleVideo: toggleVideo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 4\n    }, this), isAdmin && meetingInfoPopUp && /*#__PURE__*/_jsxDEV(MeetingInfo, {\n      url: url,\n      setMeetingInfoPopUp: setMeetingInfoPopUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 5\n    }, this), isMessenger ? /*#__PURE__*/_jsxDEV(Messenger, {\n      setMessenger: setMessenger,\n      sendMsg: sendMsg,\n      messageListState: messageListState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 5\n    }, this) : messageAlert.isPopup && /*#__PURE__*/_jsxDEV(Alert, {\n      messageAlert: messageAlert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 312,\n    columnNumber: 3\n  }, this);\n};\n\n_s2(Room, \"y5/AyCCa7IPNgL/o5ST8I3IY1ZM=\", false, function () {\n  return [useHistory];\n});\n\n_c3 = Room;\nexport default Room;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Video\");\n$RefreshReg$(_c2, \"MessageListReducer\");\n$RefreshReg$(_c3, \"Room\");","map":{"version":3,"sources":["C:/Users/jayka/web development/google-meet/client/src/components/MeetingPage/Room.js"],"names":["React","useEffect","useRef","useState","useReducer","useHistory","io","Peer","MeetingHeader","MeetingFooter","MeetingInfo","Alert","Messenger","Player","ControlBar","PlayToggle","moment","vidStyle","height","width","padding","paddingBottom","objectFit","Video","props","ref","console","log","JSON","stringify","peer","on","stream","current","srcObject","isAudio","MessageListReducer","state","action","draftState","type","payload","Room","id","isAdmin","setMeetingInfoPopUp","url","meetingInfoPopUp","isMessenger","setMessenger","numUsers","history","peers","setPeers","socketRef","userVideo","peersRef","screenStream","roomID","setIsAudio","streamObj","setStreamObj","screenCastStream","setScreenCastStream","isPresenting","setIsPresenting","isVideo","setIsVideo","initialState","messageListState","messgListReducer","messageAlert","setMessageAlert","alertTimeout","formatDate","format","connect","navigator","mediaDevices","getUserMedia","video","audio","then","emit","users","peersForVideo","forEach","userID","createPeer","push","peerID","length","addPeer","signal","callerID","item","find","p","userToSignal","initiator","trickle","data","clearTimeout","user","msg","toString","time","alert","isPopup","setInterval","incomingSignal","screenShare","getDisplayMedia","cursor","map","index","replaceTrack","getVideoTracks","getTracks","onended","stopScreenShare","track","stop","toggleVideo","value","play","pause","disconnect","sendMsg","send"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState, useReducer } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\nimport MeetingHeader from \"./meetingHeader\";\r\nimport MeetingFooter from \"./meetingFooter\";\r\nimport MeetingInfo from \"./meetingInfo\";\r\nimport Alert from \"./alert\";\r\nimport Messenger from \"./messenger\";\r\nimport { Player, ControlBar, PlayToggle } from \"video-react\";\r\nimport moment from \"moment\";\r\n\r\nconst vidStyle = {\r\n\theight: `264.15px`,\r\n\twidth: \"639.9px\",\r\n\tpadding: \"10px\",\r\n\tpaddingBottom: \"5px\",\r\n\tobjectFit: \"fill\",\r\n};\r\n\r\nconst Video = (props) => {\r\n\tconst ref = useRef();\r\n\tconsole.log(\"VIDEO CALLED\" + JSON.stringify(props.peer));\r\n\tuseEffect(() => {\r\n\t\tprops.peer.on(\"stream\", (stream) => {\r\n\t\t\tconsole.log(\"ENTE0RD\" + stream);\r\n\t\t\tref.current.srcObject = stream;\r\n\t\t});\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<video\r\n\t\t\tstyle={vidStyle}\r\n\t\t\tmuted={!props.isAudio}\r\n\t\t\tref={ref}\r\n\t\t\tautoPlay\r\n\t\t\tcontrols\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nconst MessageListReducer = (state, action) => {\r\n\tlet draftState = [...state];\r\n\tconsole.log(state);\r\n\tswitch (action.type) {\r\n\t\tcase \"addMessage\":\r\n\t\t\tconsole.log(action);\r\n\t\t\treturn [...draftState, action.payload];\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst Room = ({ id, isAdmin, setMeetingInfoPopUp, url, meetingInfoPopUp }) => {\r\n\tconst [isMessenger, setMessenger] = useState(false);\r\n\r\n\tconst numUsers = useRef();\r\n\tlet history = useHistory();\r\n\tconst [peers, setPeers] = useState([]);\r\n\tconst socketRef = useRef();\r\n\tconst userVideo = useRef();\r\n\tconst peersRef = useRef([]);\r\n\tconst screenStream = useRef();\r\n\tconst roomID = id;\r\n\tconst [isAudio, setIsAudio] = useState(false);\r\n\tconst [streamObj, setStreamObj] = useState();\r\n\tconst [screenCastStream, setScreenCastStream] = useState();\r\n\tconst [isPresenting, setIsPresenting] = useState();\r\n\tconst [isVideo, setIsVideo] = useState(true);\r\n\tconst initialState = [];\r\n\tconst [messageListState, messgListReducer] = useReducer(\r\n\t\tMessageListReducer,\r\n\t\tinitialState\r\n\t);\r\n\tconst [messageAlert, setMessageAlert] = useState({});\r\n\r\n\tlet alertTimeout = null;\r\n\r\n\tconst formatDate = () => {\r\n\t\treturn moment().format(\"LT\");\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tsocketRef.current = io.connect(\"/\");\r\n\t\tnavigator.mediaDevices\r\n\t\t\t.getUserMedia({ video: true, audio: true })\r\n\t\t\t.then((stream) => {\r\n\t\t\t\tsetStreamObj(stream);\r\n\t\t\t\tuserVideo.current.srcObject = stream;\r\n\t\t\t\tconsole.log(userVideo.current);\r\n\t\t\t\t// LOGIC THAT USER HAS JOINED THE ROOM\r\n\r\n\t\t\t\t//THIS EVENT Is NOT CACHED AT BACKEND\r\n\t\t\t\t//.emit means sending  to backend\r\n\t\t\t\tsocketRef.current.emit(\"JOINED ROOM\");\r\n\t\t\t\tsocketRef.current.emit(\"join room\", roomID);\r\n\t\t\t\t// Recieve users from backened\r\n\t\t\t\t// if (!props.isAdmin) {\r\n\r\n\t\t\t\tsocketRef.current.on(\"all users\", (users) => {\r\n\t\t\t\t\t//peers is for how many videos are rendering\r\n\r\n\t\t\t\t\tconst peersForVideo = [];\r\n\t\t\t\t\tusers.forEach((userID) => {\r\n\t\t\t\t\t\tconsole.log(userID + \" USER ID OF USER IN THE ROOM \");\r\n\t\t\t\t\t\tconsole.log(socketRef.current);\r\n\t\t\t\t\t\t//socketRef.current.id is the of user currently joined\r\n\t\t\t\t\t\t// UserID  id's of all those inside the meeting\r\n\r\n\t\t\t\t\t\tconst peer = createPeer(userID, socketRef.current.id, stream);\r\n\t\t\t\t\t\t//peersRef is for which is having connection with which\r\n\t\t\t\t\t\tpeersRef.current.push({\r\n\t\t\t\t\t\t\tpeerID: userID,\r\n\t\t\t\t\t\t\tpeer,\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tpeersForVideo.push(peer);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (peers.length <= 4) {\r\n\t\t\t\t\t\tsetPeers(peersForVideo);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t//PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\r\n\t\t\t\t//.on means recieving from backend\r\n\t\t\t\tsocketRef.current.on(\"user joined\", (payload) => {\r\n\t\t\t\t\tconst peer = addPeer(payload.signal, payload.callerID, stream);\r\n\r\n\t\t\t\t\tpeersRef.current.push({\r\n\t\t\t\t\t\tpeerID: payload.callerID,\r\n\t\t\t\t\t\tpeer,\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tsetPeers((users) => [...users, peer]);\r\n\t\t\t\t});\r\n\t\t\t\tsocketRef.current.on(\"receiving returned signal\", (payload) => {\r\n\t\t\t\t\t// signal has been send to multiple now multiple users are sending back the signal to caller\r\n\t\t\t\t\tconst item = peersRef.current.find((p) => p.peerID === payload.id);\r\n\t\t\t\t\t// console.log(item);\r\n\r\n\t\t\t\t\titem.peer.signal(payload.signal);\r\n\t\t\t\t});\r\n\t\t\t\t// }\r\n\t\t\t});\r\n\t}, []);\r\n\r\n\tfunction createPeer(userToSignal, callerID, stream) {\r\n\t\tconsole.log(\"CREATE PEER\");\r\n\t\tconst peer = new Peer({\r\n\t\t\tinitiator: true,\r\n\t\t\t//trickle wait for all the data to send makes it slow\r\n\t\t\ttrickle: false,\r\n\t\t\tstream,\r\n\t\t});\r\n\t\t//generates signal\r\n\t\t//sending to backend\r\n\t\tpeer.on(\"signal\", (signal) => {\r\n\t\t\tsocketRef.current.emit(\"sending signal\", {\r\n\t\t\t\tuserToSignal,\r\n\t\t\t\tcallerID,\r\n\t\t\t\tsignal,\r\n\t\t\t});\r\n\t\t});\r\n\t\tconsole.log(formatDate());\r\n\t\tpeer.on(\"data\", (data) => {\r\n\t\t\tclearTimeout(alertTimeout);\r\n\t\t\tmessgListReducer({\r\n\t\t\t\ttype: \"addMessage\",\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\tuser: callerID,\r\n\t\t\t\t\tmsg: data.toString(),\r\n\t\t\t\t\ttime: formatDate(),\r\n\t\t\t\t},\r\n\t\t\t});\r\n\r\n\t\t\tsetMessageAlert({\r\n\t\t\t\talert: true,\r\n\t\t\t\tisPopup: true,\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\tmsg: data.toString(),\r\n\t\t\t\t\tuser: callerID,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t\talertTimeout = setInterval(() => {\r\n\t\t\t\tsetMessageAlert({\r\n\t\t\t\t\t...messageAlert,\r\n                    alert:false,\r\n\t\t\t\t\tisPopup: false,\r\n\t\t\t\t\tpayload: {},\r\n\t\t\t\t});\r\n\t\t\t}, 10000);\r\n\t\t});\r\n\r\n\t\treturn peer;\r\n\t}\r\n\r\n\tfunction addPeer(incomingSignal, callerID, stream) {\r\n\t\tconsole.log(\"Add Peer\");\r\n\t\tconst peer = new Peer({\r\n\t\t\tinitiator: false,\r\n\t\t\ttrickle: false,\r\n\t\t\tstream,\r\n\t\t});\r\n\t\t// 1 accepting the incoming signal that this will return the signal\r\n\t\tpeer.signal(incomingSignal);\r\n\r\n\t\tpeer.on(\"signal\", (signal) => {\r\n\t\t\tsocketRef.current.emit(\"returning signal\", { signal, callerID });\r\n\t\t});\r\n\t\treturn peer;\r\n\t}\r\n\r\n\tconst screenShare = () => {\r\n\t\tnavigator.mediaDevices\r\n\t\t\t//Cursor True is means sending cursor also of the person sharing screen to the person recieving the screen\r\n\t\t\t.getDisplayMedia({ cursor: true })\r\n\t\t\t.then((screenStream) => {\r\n\t\t\t\tconsole.log(\"SCREEN STREAM\", screenStream);\r\n\t\t\t\tconsole.log(userVideo.current);\r\n\r\n\t\t\t\tpeers.map((peer, index) => {\r\n\t\t\t\t\tconsole.log(peer);\r\n\t\t\t\t\tpeer.replaceTrack(\r\n\t\t\t\t\t\t//0th track is the screen track\r\n\t\t\t\t\t\tstreamObj.getVideoTracks()[0],\r\n\t\t\t\t\t\tscreenStream.getVideoTracks()[0],\r\n\t\t\t\t\t\tstreamObj\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t\tsetIsPresenting(true);\r\n\r\n\t\t\t\t//WHEN SHARING STOPS RETURN TO NORMAl STATE\r\n\t\t\t\t//RESPONSIBLE FOR WORKING OF STOP BUTTON\r\n\t\t\t\tsetScreenCastStream(screenStream);\r\n\r\n\t\t\t\tscreenStream.getTracks()[0].onended = () => {\r\n\t\t\t\t\tpeers.map((peer, index) => {\r\n\t\t\t\t\t\tconsole.log(\"CALLED\");\r\n\t\t\t\t\t\tpeer.replaceTrack(\r\n\t\t\t\t\t\t\tscreenStream.getVideoTracks()[0],\r\n\t\t\t\t\t\t\tstreamObj.getVideoTracks()[0],\r\n\t\t\t\t\t\t\tstreamObj\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsetIsPresenting(false);\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t};\r\n\tconst stopScreenShare = () => {\r\n\t\tscreenCastStream.getVideoTracks().forEach(function (track) {\r\n\t\t\ttrack.stop();\r\n\t\t});\r\n\t\t// Replace with video tracks\r\n\t\tpeers.map((peer, index) => {\r\n\t\t\tpeer.replaceTrack(\r\n\t\t\t\tscreenCastStream.getVideoTracks()[0],\r\n\t\t\t\tstreamObj.getVideoTracks()[0],\r\n\t\t\t\tstreamObj\r\n\t\t\t);\r\n\t\t\tsetIsPresenting(false);\r\n\t\t});\r\n\t};\r\n\r\n\tconst toggleVideo = (value) => {\r\n\t\tif (value) {\r\n\t\t\tuserVideo.current.play();\r\n\t\t\tnavigator.mediaDevices\r\n\t\t\t\t.getUserMedia({ video: true, audio: true })\r\n\t\t\t\t.then((stream) => {\r\n\t\t\t\t\tuserVideo.current.srcObject = stream;\r\n\t\t\t\t});\r\n\t\t} else {\r\n\t\t\tnavigator.mediaDevices\r\n\t\t\t\t.getUserMedia({ video: true, audio: true })\r\n\t\t\t\t.then((stream) => {\r\n\t\t\t\t\tuserVideo.current.srcObject = stream.stop;\r\n\t\t\t\t});\r\n\t\t\tuserVideo.current.pause();\r\n\t\t}\r\n\r\n\t\tsetIsVideo(value);\r\n\t};\r\n\r\n\tconst disconnect = () => {\r\n\t\tconsole.log(\"Clicked\");\r\n\t\tsocketRef.current.disconnect();\r\n\t\thistory.push(\"/\");\r\n\t};\r\n\r\n\t// console.log(messgListReducer);\r\n\r\n\tconst sendMsg = (msg) => {\r\n\t\t//Send From one peer to another\r\n\t\tconsole.log(\"SEND MESSAGE\");\r\n\r\n\t\tconsole.log(formatDate());\r\n\t\tpeers.map((peer) => {\r\n\t\t\tpeer.send(msg);\r\n\t\t\tmessgListReducer({\r\n\t\t\t\ttype: \"addMessg\",\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\tmsg: msg,\r\n\t\t\t\t\tuser: socketRef.current.id,\r\n\t\t\t\t\ttime: formatDate(),\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t\tconsole.log(peer);\r\n\t\t});\r\n\t\tconsole.log();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div class=\"videoScreen\">\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<video\r\n\t\t\t\t\tstyle={vidStyle}\r\n\t\t\t\t\tmuted={!isAudio}\r\n\t\t\t\t\tref={userVideo}\r\n\t\t\t\t\tautoPlay\r\n\t\t\t\t\tcontrols={isPresenting}\r\n\t\t\t\t/>\r\n\t\t\t\t{peers.map((peer, index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Video\r\n\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\tpeer={peer}\r\n\t\t\t\t\t\t\tnumUsers={numUsers.current}\r\n\t\t\t\t\t\t\tisAudio={isAudio}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t\t<MeetingHeader\r\n\t\t\t\tsetMessenger={setMessenger}\r\n\t\t\t\tid={id}\r\n\t\t\t\tsetMessageAlert={setMessageAlert}\r\n                messageAlert={messageAlert}\r\n\t\t\t/>\r\n\r\n\t\t\t<MeetingFooter\r\n\t\t\t\tisPresenting={isPresenting}\r\n\t\t\t\tscreenShare={screenShare}\r\n\t\t\t\tstopScreenShare={stopScreenShare}\r\n\t\t\t\tdisconnect={disconnect}\r\n\t\t\t\tsetIsAudio={setIsAudio}\r\n\t\t\t\tisVideo={isVideo}\r\n\t\t\t\tisAudio={isAudio}\r\n\t\t\t\ttoggleVideo={toggleVideo}\r\n\t\t\t/>\r\n\t\t\t{isAdmin && meetingInfoPopUp && (\r\n\t\t\t\t<MeetingInfo url={url} setMeetingInfoPopUp={setMeetingInfoPopUp} />\r\n\t\t\t)}\r\n\t\t\t{isMessenger ? (\r\n\t\t\t\t<Messenger\r\n\t\t\t\t\tsetMessenger={setMessenger}\r\n\t\t\t\t\tsendMsg={sendMsg}\r\n\t\t\t\t\tmessageListState={messageListState}\r\n\t\t\t\t/>\r\n\t\t\t) : (\r\n\t\t\t\tmessageAlert.isPopup && <Alert messageAlert={messageAlert} />\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Room;\r\n"]},"metadata":{},"sourceType":"module"}