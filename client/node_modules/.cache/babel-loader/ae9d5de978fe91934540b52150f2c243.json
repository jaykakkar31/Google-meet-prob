{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayka\\\\web development\\\\google-meet\\\\client\\\\src\\\\components\\\\vedioPage.js\",\n    _s = $RefreshSig$();\n\nimport react, { useState, useEffect, useReducer, useRef, createRef } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport MeetingHeader from \"./meetingHeader\";\nimport MeetingFooter from \"./meetingFooter\";\nimport MeetingInfo from \"./meetingInfo\";\nimport styled from \"styled-components\";\nimport Messenger from \"./messenger\";\nimport Alert from \"./alert\";\nimport Peer from \"simple-peer\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction VideoPage() {\n  _s();\n\n  const isAdmin = window.location.hash === \"#init\" ? true : false; //#init\n  // console.log(window.location.hash);\n\n  const {\n    id\n  } = useParams(); // let peer = null;\n\n  const url = `${window.location.origin}${window.location.pathname}`;\n  const [meetingInfoPopUp, setMeetingInfoPopUp] = useState(false);\n  const [isMessenger, setMessenger] = useState(false);\n  const [peers, setPeers] = useState([]);\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const roomID = id;\n  const videoConstraints = {\n    height: window.innerHeight / 2,\n    width: window.innerWidth / 2\n  };\n  useEffect(() => {\n    if (isAdmin) {\n      setMeetingInfoPopUp(true);\n    }\n\n    room();\n  }, []); // //ID ,Admin\n\n  const room = () => {\n    socketRef.current = io.connect(\"http://localhost:9000\");\n    navigator.mediaDevices.getUserMedia({\n      video: videoConstraints,\n      audio: true\n    }).then(stream => {\n      userVideo.current.srcObject = stream;\n      console.log(\"USERVIDEO\" + stream); // LOGIC THAT USER HAS JOINED THE ROOM\n      //THIS EVENT Is NOT CACHED AT BACKEND\n      //.emit means sending  to backend\n\n      socketRef.current.emit(\"JOINED ROOM\");\n      socketRef.current.emit(\"join room\", roomID); // Recieve users from backened\n      // if (!props.isAdmin) {\n\n      socketRef.current.on(\"all users\", users => {\n        //peers is for how many videos are rendering\n        console.log(\"ALL USERS\");\n        const peersForVideo = [];\n        users.forEach(userID => {\n          console.log(userID + \" USER ID OF USER IN THE ROOM \");\n          console.log(socketRef.current); //socketRef.current.id is the of user currently joined\n          // UserID  id's of all those inside the meeting\n\n          const peer = createPeer(userID, socketRef.current.id, stream); //peersRef is for which is having connection with which\n\n          peersRef.current.push({\n            peerID: userID,\n            peer\n          });\n          peersForVideo.push(peer);\n        });\n        setPeers(peersForVideo);\n        console.log(peers);\n      }); //PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\n      //.on means recieving from backend\n\n      socketRef.current.on(\"user joined\", payload => {\n        const peer = addPeer(payload.signal, payload.callerID, stream);\n        peersRef.current.push({\n          peerID: payload.callerID,\n          peer\n        });\n        setPeers(users => [...users, peer]);\n      });\n      socketRef.current.on(\"receiving returned signal\", payload => {\n        // signal has been send to multiple now multiple users are sending back the signal to caller\n        const item = peersRef.current.find(p => p.peerID === payload.id);\n        console.log(item);\n        item.peer.signal(payload.signal);\n      }); // }\n    });\n  };\n\n  function createPeer(userToSignal, callerID, stream) {\n    console.log(\"CREATE PEER\");\n    const peer = new Peer({\n      initiator: true,\n      //trickle wait for all the data to send makes it slow\n      trickle: false,\n      stream\n    }); //generates signal\n    //sending to backend\n\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"sending signal\", {\n        userToSignal,\n        callerID,\n        signal\n      });\n    });\n    return peer;\n  }\n\n  function addPeer(incomingSignal, callerID, stream) {\n    console.log(\"Add Peer\");\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    }); // 1 accepting the incoming signal that this will return the signal\n\n    peer.signal(incomingSignal);\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"returning signal\", {\n        signal,\n        callerID\n      });\n    });\n    return peer;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"videoScreen\",\n    children: [/*#__PURE__*/_jsxDEV(MeetingHeader, {\n      setMessenger: setMessenger // Room={Room}\n      // peers={peers}\n      ,\n      userVideo: userVideo,\n      isAdmin: isAdmin,\n      id: id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MeetingFooter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 4\n    }, this), isAdmin && meetingInfoPopUp && /*#__PURE__*/_jsxDEV(MeetingInfo, {\n      url: url,\n      setMeetingInfoPopUp: setMeetingInfoPopUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 5\n    }, this), isMessenger ? /*#__PURE__*/_jsxDEV(Messenger, {\n      setMessenger: setMessenger // messageList={messageList}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(Alert, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 3\n  }, this);\n}\n\n_s(VideoPage, \"hnbwabp54ex/+1b7T0N5lahYNPM=\", false, function () {\n  return [useParams];\n});\n\n_c = VideoPage;\nexport default VideoPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoPage\");","map":{"version":3,"sources":["C:/Users/jayka/web development/google-meet/client/src/components/vedioPage.js"],"names":["react","useState","useEffect","useReducer","useRef","createRef","useParams","useHistory","MeetingHeader","MeetingFooter","MeetingInfo","styled","Messenger","Alert","Peer","io","VideoPage","isAdmin","window","location","hash","id","url","origin","pathname","meetingInfoPopUp","setMeetingInfoPopUp","isMessenger","setMessenger","peers","setPeers","socketRef","userVideo","peersRef","roomID","videoConstraints","height","innerHeight","width","innerWidth","room","current","connect","navigator","mediaDevices","getUserMedia","video","audio","then","stream","srcObject","console","log","emit","on","users","peersForVideo","forEach","userID","peer","createPeer","push","peerID","payload","addPeer","signal","callerID","item","find","p","userToSignal","initiator","trickle","incomingSignal"],"mappings":"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","sourcesContent":["import react, {\r\n\tuseState,\r\n\tuseEffect,\r\n\tuseReducer,\r\n\tuseRef,\r\n\tcreateRef,\r\n} from \"react\";\r\n\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport MeetingHeader from \"./meetingHeader\";\r\nimport MeetingFooter from \"./meetingFooter\";\r\nimport MeetingInfo from \"./meetingInfo\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Messenger from \"./messenger\";\r\nimport Alert from \"./alert\";\r\nimport Peer from \"simple-peer\";\r\nimport io from \"socket.io-client\";\r\n\r\nfunction VideoPage() {\r\n\tconst isAdmin = window.location.hash === \"#init\" ? true : false;\r\n\r\n\t//#init\r\n\t// console.log(window.location.hash);\r\n\r\n\tconst { id } = useParams();\r\n\r\n\t// let peer = null;\r\n\tconst url = `${window.location.origin}${window.location.pathname}`;\r\n\r\n\tconst [meetingInfoPopUp, setMeetingInfoPopUp] = useState(false);\r\n\tconst [isMessenger, setMessenger] = useState(false);\r\n\tconst [peers, setPeers] = useState([]);\r\n\tconst socketRef = useRef();\r\n\tconst userVideo = useRef();\r\n\tconst peersRef = useRef([]);\r\n\tconst roomID = id;\r\n\r\n\tconst videoConstraints = {\r\n\t\theight: window.innerHeight / 2,\r\n\t\twidth: window.innerWidth / 2,\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (isAdmin) {\r\n\t\t\tsetMeetingInfoPopUp(true);\r\n\t\t}\r\n\t\troom();\r\n\t}, []);\r\n\r\n\t// //ID ,Admin\r\n\r\n\tconst room = () => {\r\n\t\tsocketRef.current = io.connect(\"http://localhost:9000\");\r\n\t\tnavigator.mediaDevices\r\n\t\t\t.getUserMedia({ video: videoConstraints, audio: true })\r\n\t\t\t.then((stream) => {\r\n\t\t\t\tuserVideo.current.srcObject = stream;\r\n\r\n\t\t\t\tconsole.log(\"USERVIDEO\" + stream);\r\n\t\t\t\t// LOGIC THAT USER HAS JOINED THE ROOM\r\n\r\n\t\t\t\t//THIS EVENT Is NOT CACHED AT BACKEND\r\n\t\t\t\t//.emit means sending  to backend\r\n\t\t\t\tsocketRef.current.emit(\"JOINED ROOM\");\r\n\t\t\t\tsocketRef.current.emit(\"join room\", roomID);\r\n\t\t\t\t// Recieve users from backened\r\n\t\t\t\t// if (!props.isAdmin) {\r\n\r\n\t\t\t\tsocketRef.current.on(\"all users\", (users) => {\r\n\t\t\t\t\t//peers is for how many videos are rendering\r\n\r\n\t\t\t\t\tconsole.log(\"ALL USERS\")\r\n\t\t\t\t\tconst peersForVideo = [];\r\n\t\t\t\t\tusers.forEach((userID) => {\r\n\t\t\t\t\t\tconsole.log(userID + \" USER ID OF USER IN THE ROOM \");\r\n\t\t\t\t\t\tconsole.log(socketRef.current);\r\n\t\t\t\t\t\t//socketRef.current.id is the of user currently joined\r\n\t\t\t\t\t\t// UserID  id's of all those inside the meeting\r\n\r\n\t\t\t\t\t\tconst peer = createPeer(userID, socketRef.current.id, stream);\r\n\t\t\t\t\t\t//peersRef is for which is having connection with which\r\n\t\t\t\t\t\tpeersRef.current.push({\r\n\t\t\t\t\t\t\tpeerID: userID,\r\n\t\t\t\t\t\t\tpeer,\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tpeersForVideo.push(peer);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tsetPeers(peersForVideo);\r\n\t\t\t\t\tconsole.log(peers);\r\n\t\t\t\t});\r\n\t\t\t\t//PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\r\n\t\t\t\t//.on means recieving from backend\r\n\t\t\t\tsocketRef.current.on(\"user joined\", (payload) => {\r\n\t\t\t\t\tconst peer = addPeer(payload.signal, payload.callerID, stream);\r\n\r\n\t\t\t\t\tpeersRef.current.push({\r\n\t\t\t\t\t\tpeerID: payload.callerID,\r\n\t\t\t\t\t\tpeer,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsetPeers((users) => [...users, peer]);\r\n\t\t\t\t});\r\n\t\t\t\tsocketRef.current.on(\"receiving returned signal\", (payload) => {\r\n\t\t\t\t\t// signal has been send to multiple now multiple users are sending back the signal to caller\r\n\t\t\t\t\tconst item = peersRef.current.find((p) => p.peerID === payload.id);\r\n\t\t\t\t\tconsole.log(item);\r\n\t\t\t\t\titem.peer.signal(payload.signal);\r\n\t\t\t\t});\r\n\t\t\t\t// }\r\n\t\t\t});\r\n\t};\r\n\r\n\tfunction createPeer(userToSignal, callerID, stream) {\r\n\t\tconsole.log(\"CREATE PEER\");\r\n\t\tconst peer = new Peer({\r\n\t\t\tinitiator: true,\r\n\t\t\t//trickle wait for all the data to send makes it slow\r\n\t\t\ttrickle: false,\r\n\t\t\tstream,\r\n\t\t});\r\n\t\t//generates signal\r\n\t\t//sending to backend\r\n\t\tpeer.on(\"signal\", (signal) => {\r\n\t\t\tsocketRef.current.emit(\"sending signal\", {\r\n\t\t\t\tuserToSignal,\r\n\t\t\t\tcallerID,\r\n\t\t\t\tsignal,\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn peer;\r\n\t}\r\n\r\n\tfunction addPeer(incomingSignal, callerID, stream) {\r\n\t\tconsole.log(\"Add Peer\");\r\n\t\tconst peer = new Peer({\r\n\t\t\tinitiator: false,\r\n\t\t\ttrickle: false,\r\n\t\t\tstream,\r\n\t\t});\r\n\t\t// 1 accepting the incoming signal that this will return the signal\r\n\t\tpeer.signal(incomingSignal);\r\n\r\n\t\tpeer.on(\"signal\", (signal) => {\r\n\t\t\tsocketRef.current.emit(\"returning signal\", { signal, callerID });\r\n\t\t});\r\n\t\treturn peer;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div class=\"videoScreen\">\r\n\t\t\t<MeetingHeader\r\n\t\t\t\tsetMessenger={setMessenger}\r\n\t\t\t\t// Room={Room}\r\n\t\t\t\t// peers={peers}\r\n\t\t\t\tuserVideo={userVideo}\r\n\t\t\t\tisAdmin={isAdmin}\r\n\t\t\t\tid={id}\r\n\t\t\t/>\r\n\t\t\t<MeetingFooter />\r\n\t\t\t{isAdmin && meetingInfoPopUp && (\r\n\t\t\t\t<MeetingInfo url={url} setMeetingInfoPopUp={setMeetingInfoPopUp} />\r\n\t\t\t)}\r\n\t\t\t{isMessenger ? (\r\n\t\t\t\t<Messenger\r\n\t\t\t\t\tsetMessenger={setMessenger}\r\n\t\t\t\t\t// messageList={messageList}\r\n\t\t\t\t/>\r\n\t\t\t) : (\r\n\t\t\t\t<Alert />\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default VideoPage;\r\n"]},"metadata":{},"sourceType":"module"}