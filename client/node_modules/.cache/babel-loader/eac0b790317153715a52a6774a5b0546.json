{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayka\\\\web development\\\\google-meet\\\\src\\\\components\\\\vedioPage.jsx\",\n    _s2 = $RefreshSig$();\n\nimport react, { useState, useEffect, useReducer, useRef } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport MeetingHeader from \"./meetingHeader\";\nimport MeetingFooter from \"./meetingFooter\";\nimport MeetingInfo from \"./meetingInfo\";\nimport styled from \"styled-components\";\nimport Messenger from \"./messenger\";\nimport Alert from \"./alert\";\nimport Peer from \"simple-peer\";\nimport { getCallId, saveCallId } from \"././services/UserService\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction VideoPage() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const history = useHistory();\n  const isAdmin = window.location.hash === \"#init\" ? true : false; //#init\n\n  console.log(window.location.hash);\n  const socket = io(\"http://localhost:9000\");\n  let alertTimeout = null;\n  const {\n    id\n  } = useParams();\n  const [height, setHeight] = useState(0);\n  const [width, setWidth] = useState(0); // let peer = null;\n\n  const url = `${window.location.origin}${window.location.pathname}`;\n  const [meetingInfoPopUp, setMeetingInfoPopUp] = useState(false);\n  const [isMessenger, setMessenger] = useState(false); // const [messageAlert, setMessageAlert] = useState({});\n  // const [isAudio, setIsAudio] = useState(true);\n  // const [streamObj, setStreamObj] = useState();\n  // //MESSAGE CHAT\n  // const intialState = [];\n  // const MessageListReducer = (state, action) => {\n  //   switch (action.type) {\n  //     case \"addMessage\":\n  //       return [...state, action.payload];\n  //     default:\n  //       return state;\n  //   }\n  // };\n  // const [messageList, setMessageList] = useReducer(\n  //   MessageListReducer,\n  //   intialState\n  // );\n  // const getRecieverCode = () => {\n  //   getCallId(id).then((response) => {\n  //     console.log(response);\n  //     peer.signal(response.data);\n  //   });\n  // };\n  // useEffect(() => {\n  //   //Call every time when page renders\n  //   if (isAdmin) {\n  //     setMeetingInfoPopUp(true);\n  //   }\n  //   initWebRTC();\n  //   socket.on(\"code\", (data) => {\n  //     console.log(data);\n  //     peer.signal(data);\n  //   });\n  // }, []);\n  // const initWebRTC = () => {\n  //   navigator.mediaDevices\n  //     .getUserMedia({\n  //       video: true,\n  //       audio: true,\n  //     })\n  //     .then((stream) => {\n  //       console.log(stream);\n  //       peer = new Peer({\n  //         initiator: isAdmin,\n  //         //trickle wait for all the data to send makes it slow\n  //         trickle: false,\n  //         stream: stream,\n  //       });\n  //       if (!isAdmin) {\n  //         getRecieverCode();\n  //       }\n  //       peer.on(\"signal\", (data) => {\n  //         if (isAdmin) {\n  //           console.log(\"Id : \" + id);\n  //           let payload = {\n  //             id: id,\n  //             signalData: data,\n  //           };\n  //           saveCallId(payload).then((response) => {\n  //             console.log(response);\n  //           });\n  //         } else {\n  //           //Socket event\n  //           // peer.on(\"open\", (id) => {\n  //           //   socket.emit(\"join-room\", id, data);\n  //           // });\n  //           //SENDING TO BACKEND\n  //           socket.emit(\"code\", data, id);\n  //         }\n  //       });\n  //       peer.on(\"connect\", () => {\n  //         console.log(\"peer connected\");\n  //       });\n  //       peer.on(\"stream\", (stream) => {\n  //         // got remote video stream, now let's show it in a video tag\n  //         var video = document.querySelector(\"video\");\n  //         if (\"srcObject\" in video) {\n  //           video.srcObject = stream;\n  //         } else {\n  //           video.src = window.URL.createObjectURL(stream); // for older browsers\n  //         }\n  //         video.play();\n  //       });\n  //     });\n  // };\n  // NEW START\n\n  const [peers, setPeers] = useState([]);\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef([]); // OBTAINED USING USE PARAMS\n\n  const roomID = id;\n  useEffect(() => {\n    //Call every time when page renders\n    if (isAdmin) {\n      setMeetingInfoPopUp(true);\n    } // initWebRTC();\n    // ESTABLISHING CONNECT WITH BACKEND\n\n\n    socketRef.current = io.connect(\"http://localhost:9000\"); // LOGIC FOR SOMEBODY JOINING THE ROOM\n\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      // var video = document.querySelector(\"video\");\n      // if (\"srcObject\" in video) {\n      //   video.srcObject = stream;\n      // } else {\n      //   video.src = window.URL.createObjectURL(stream); // for older browsers\n      // }\n      // video.play();\n      userVideo.current.srcObject = stream; // LOGIC THAT USER HAS JOINED THE ROOM\n      //THIS EVENT Is NOT CACHED AT BACKEND\n      //.emit means sending  to backend\n\n      socketRef.current.emit(\"JOINED ROOM\");\n      socketRef.current.emit(\"join room\", id); // Recieve users from backened\n\n      if (!isAdmin) {\n        socketRef.current.on(\"all users\", users => {\n          //peers is for how many videos are rendering\n          console.log(users.length);\n          const peersForVideo = [];\n          users.forEach(userID => {\n            console.log(userID + \" USER ID IN THE ROOM \");\n            console.log(socketRef.current); //socketRef.current.id is the of user currently joined\n            //UserID  id's of all those inside the meeting\n\n            const peer = createPeer(userID, socketRef.current.id, stream); //peersRef is for which is having connection with which\n\n            peersRef.current.push({\n              peerID: userID,\n              peer\n            });\n            peersForVideo.push(peer);\n          });\n          setPeers(peersForVideo);\n        }); //PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\n        //.on means recieving from backend\n\n        socketRef.current.on(\"user joined\", payload => {\n          const peer = addPeer(payload.signal, payload.callerID, payload.stream);\n          peersRef.current.push({\n            peerID: payload.callerID,\n            peer\n          });\n          setPeers(prevUsers => [...prevUsers, peer]);\n        });\n        socketRef.current.on(\"receiving returned signal\", payload => {\n          // signal has been send to multiple now multiple users are sending back the signal to caller\n          const item = peersRef.current.find(p => p.peerID === payload.id);\n          item.peer.signal(payload.signal);\n        });\n      }\n    });\n  }, []);\n\n  function createPeer(userToSignal, callerID, stream) {\n    const peer = new Peer({\n      initiator: true,\n      //trickle wait for all the data to send makes it slow\n      trickle: false,\n      stream\n    }); //generates signal\n    //sending to backend\n\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"sending signal\", {\n        userToSignal,\n        callerID,\n        signal\n      });\n    });\n    return peer;\n  }\n\n  function addPeer(incomingSignal, callerID, stream) {\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    }); // 1 accepting the incoming signal that tthis will return the signal\n\n    peer.signal(incomingSignal);\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"returning signal\", {\n        signal,\n        callerID\n      });\n    });\n    return peer;\n  }\n\n  const StyledVideo = styled.video`\n  height: 50%;\n  width: 50%;\n`;\n\n  const Video = props => {\n    _s();\n\n    const ref = useRef();\n    useEffect(() => {\n      console.log(props.peer);\n      props.peer.on(\"stream\", stream => {\n        console.log(stream);\n        ref.current.srcObject = stream;\n      });\n    }, []);\n    return /*#__PURE__*/_jsxDEV(StyledVideo, {\n      playsInline: true,\n      autoPlay: true,\n      ref: ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 10\n    }, this);\n  };\n\n  _s(Video, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"videoScreen\",\n    children: [/*#__PURE__*/_jsxDEV(MeetingHeader, {\n      setMessenger: setMessenger,\n      peers: peers,\n      userVideo: userVideo,\n      Video: Video\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetingFooter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), isAdmin && meetingInfoPopUp && /*#__PURE__*/_jsxDEV(MeetingInfo, {\n      url: url,\n      setMeetingInfoPopUp: setMeetingInfoPopUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 9\n    }, this), isMessenger ? /*#__PURE__*/_jsxDEV(Messenger, {\n      setMessenger: setMessenger // messageList={messageList}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Alert, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(VideoPage, \"3Ip1iSZINwYl0GeHVQYagTf2amY=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = VideoPage;\nexport default VideoPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoPage\");","map":{"version":3,"sources":["C:/Users/jayka/web development/google-meet/src/components/vedioPage.jsx"],"names":["react","useState","useEffect","useReducer","useRef","useParams","useHistory","MeetingHeader","MeetingFooter","MeetingInfo","styled","Messenger","Alert","Peer","getCallId","saveCallId","io","VideoPage","history","isAdmin","window","location","hash","console","log","socket","alertTimeout","id","height","setHeight","width","setWidth","url","origin","pathname","meetingInfoPopUp","setMeetingInfoPopUp","isMessenger","setMessenger","peers","setPeers","socketRef","userVideo","peersRef","roomID","current","connect","navigator","mediaDevices","getUserMedia","video","audio","then","stream","srcObject","emit","on","users","length","peersForVideo","forEach","userID","peer","createPeer","push","peerID","payload","addPeer","signal","callerID","prevUsers","item","find","p","userToSignal","initiator","trickle","incomingSignal","StyledVideo","Video","props","ref"],"mappings":"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","sourcesContent":["import react, { useState, useEffect, useReducer, useRef } from \"react\";\n\nimport { useParams, useHistory } from \"react-router-dom\";\nimport MeetingHeader from \"./meetingHeader\";\nimport MeetingFooter from \"./meetingFooter\";\nimport MeetingInfo from \"./meetingInfo\";\nimport styled from \"styled-components\";\n\nimport Messenger from \"./messenger\";\nimport Alert from \"./alert\";\nimport Peer from \"simple-peer\";\nimport { getCallId, saveCallId } from \"././services/UserService\";\nimport io from \"socket.io-client\";\nfunction VideoPage() {\n  const history = useHistory();\n  const isAdmin = window.location.hash === \"#init\" ? true : false;\n\n  //#init\n  console.log(window.location.hash);\n  const socket = io(\"http://localhost:9000\");\n  let alertTimeout = null;\n  const { id } = useParams();\n  const [height, setHeight] = useState(0);\n  const [width, setWidth] = useState(0);\n\n  // let peer = null;\n  const url = `${window.location.origin}${window.location.pathname}`;\n\n  const [meetingInfoPopUp, setMeetingInfoPopUp] = useState(false);\n  const [isMessenger, setMessenger] = useState(false);\n  // const [messageAlert, setMessageAlert] = useState({});\n  // const [isAudio, setIsAudio] = useState(true);\n  // const [streamObj, setStreamObj] = useState();\n\n  // //MESSAGE CHAT\n  // const intialState = [];\n  // const MessageListReducer = (state, action) => {\n  //   switch (action.type) {\n  //     case \"addMessage\":\n  //       return [...state, action.payload];\n\n  //     default:\n  //       return state;\n  //   }\n  // };\n\n  // const [messageList, setMessageList] = useReducer(\n  //   MessageListReducer,\n  //   intialState\n  // );\n\n  // const getRecieverCode = () => {\n  //   getCallId(id).then((response) => {\n  //     console.log(response);\n  //     peer.signal(response.data);\n  //   });\n  // };\n\n  // useEffect(() => {\n  //   //Call every time when page renders\n  //   if (isAdmin) {\n  //     setMeetingInfoPopUp(true);\n  //   }\n  //   initWebRTC();\n  //   socket.on(\"code\", (data) => {\n  //     console.log(data);\n  //     peer.signal(data);\n  //   });\n  // }, []);\n\n  // const initWebRTC = () => {\n  //   navigator.mediaDevices\n  //     .getUserMedia({\n  //       video: true,\n  //       audio: true,\n  //     })\n  //     .then((stream) => {\n  //       console.log(stream);\n\n  //       peer = new Peer({\n  //         initiator: isAdmin,\n  //         //trickle wait for all the data to send makes it slow\n  //         trickle: false,\n  //         stream: stream,\n  //       });\n\n  //       if (!isAdmin) {\n  //         getRecieverCode();\n  //       }\n\n  //       peer.on(\"signal\", (data) => {\n  //         if (isAdmin) {\n  //           console.log(\"Id : \" + id);\n  //           let payload = {\n  //             id: id,\n  //             signalData: data,\n  //           };\n  //           saveCallId(payload).then((response) => {\n  //             console.log(response);\n  //           });\n  //         } else {\n  //           //Socket event\n  //           // peer.on(\"open\", (id) => {\n  //           //   socket.emit(\"join-room\", id, data);\n  //           // });\n\n  //           //SENDING TO BACKEND\n  //           socket.emit(\"code\", data, id);\n  //         }\n  //       });\n\n  //       peer.on(\"connect\", () => {\n  //         console.log(\"peer connected\");\n  //       });\n\n  //       peer.on(\"stream\", (stream) => {\n  //         // got remote video stream, now let's show it in a video tag\n  //         var video = document.querySelector(\"video\");\n\n  //         if (\"srcObject\" in video) {\n  //           video.srcObject = stream;\n  //         } else {\n  //           video.src = window.URL.createObjectURL(stream); // for older browsers\n  //         }\n  //         video.play();\n  //       });\n  //     });\n  // };\n\n  // NEW START\n\n  const [peers, setPeers] = useState([]);\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  // OBTAINED USING USE PARAMS\n  const roomID = id;\n\n  useEffect(() => {\n    //Call every time when page renders\n    if (isAdmin) {\n      setMeetingInfoPopUp(true);\n    }\n    // initWebRTC();\n    // ESTABLISHING CONNECT WITH BACKEND\n    socketRef.current = io.connect(\"http://localhost:9000\");\n    // LOGIC FOR SOMEBODY JOINING THE ROOM\n    navigator.mediaDevices\n      .getUserMedia({ video: true, audio: true })\n      .then((stream) => {\n        // var video = document.querySelector(\"video\");\n        // if (\"srcObject\" in video) {\n        //   video.srcObject = stream;\n        // } else {\n        //   video.src = window.URL.createObjectURL(stream); // for older browsers\n        // }\n        // video.play();\n\n        userVideo.current.srcObject = stream;\n        // LOGIC THAT USER HAS JOINED THE ROOM\n\n        //THIS EVENT Is NOT CACHED AT BACKEND\n        //.emit means sending  to backend\n        socketRef.current.emit(\"JOINED ROOM\");\n        socketRef.current.emit(\"join room\", id);\n        // Recieve users from backened\n        if (!isAdmin) {\n          socketRef.current.on(\"all users\", (users) => {\n            //peers is for how many videos are rendering\n            console.log(users.length);\n            const peersForVideo = [];\n            users.forEach((userID) => {\n              console.log(userID + \" USER ID IN THE ROOM \");\n              console.log(socketRef.current);\n              //socketRef.current.id is the of user currently joined\n              //UserID  id's of all those inside the meeting\n\n              const peer = createPeer(userID, socketRef.current.id, stream);\n              //peersRef is for which is having connection with which\n              peersRef.current.push({\n                peerID: userID,\n                peer,\n              });\n\n              peersForVideo.push(peer);\n            });\n            setPeers(peersForVideo);\n          });\n          //PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\n          //.on means recieving from backend\n          socketRef.current.on(\"user joined\", (payload) => {\n            const peer = addPeer(\n              payload.signal,\n              payload.callerID,\n              payload.stream\n            );\n            peersRef.current.push({\n              peerID: payload.callerID,\n              peer,\n            });\n            setPeers((prevUsers) => [...prevUsers, peer]);\n          });\n          socketRef.current.on(\"receiving returned signal\", (payload) => {\n            // signal has been send to multiple now multiple users are sending back the signal to caller\n            const item = peersRef.current.find((p) => p.peerID === payload.id);\n            item.peer.signal(payload.signal);\n          });\n        }\n      });\n  }, []);\n\n  function createPeer(userToSignal, callerID, stream) {\n    const peer = new Peer({\n      initiator: true,\n      //trickle wait for all the data to send makes it slow\n      trickle: false,\n      stream,\n    });\n    //generates signal\n    //sending to backend\n    peer.on(\"signal\", (signal) => {\n      socketRef.current.emit(\"sending signal\", {\n        userToSignal,\n        callerID,\n        signal,\n      });\n    });\n    return peer;\n  }\n\n  function addPeer(incomingSignal, callerID, stream) {\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream,\n    });\n    // 1 accepting the incoming signal that tthis will return the signal\n    peer.signal(incomingSignal);\n\n    peer.on(\"signal\", (signal) => {\n      socketRef.current.emit(\"returning signal\", { signal, callerID });\n    });\n    return peer;\n  }\n\n\n  \nconst StyledVideo = styled.video`\n  height: 50%;\n  width: 50%;\n`;\nconst Video = (props) => {\n  const ref = useRef();\n\n  useEffect(() => {\n    console.log(props.peer);\n    props.peer.on(\"stream\", (stream) => {\n      console.log( stream);\n      ref.current.srcObject = stream;\n    });\n  }, []);\n\n  return <StyledVideo playsInline autoPlay ref={ref} />;\n};\n\n  return (\n    <div class=\"videoScreen\">\n      <MeetingHeader\n        setMessenger={setMessenger}\n        peers={peers}\n        userVideo={userVideo}\n        Video={Video}\n      />\n      <MeetingFooter />\n      {isAdmin && meetingInfoPopUp && (\n        <MeetingInfo url={url} setMeetingInfoPopUp={setMeetingInfoPopUp} />\n      )}\n      {isMessenger ? (\n        <Messenger\n          setMessenger={setMessenger}\n          // messageList={messageList}\n        />\n      ) : (\n        <Alert />\n      )}\n    </div>\n  );\n}\n\nexport default VideoPage;\n"]},"metadata":{},"sourceType":"module"}