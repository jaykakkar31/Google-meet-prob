{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayka\\\\web development\\\\google-meet\\\\client\\\\src\\\\components\\\\Room.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport MeetingHeader from \"./meetingHeader\";\nimport MeetingFooter from \"./meetingFooter\";\nimport MeetingInfo from \"./meetingInfo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vidStyle = {\n  // height: \"calc(50vh -90px)\",\n  // borderRadius:\"10px\"\n  height: \"45%\",\n  width: \"45%\",\n  padding: \"10px\",\n  paddingBottom: \"5px\"\n};\n\nconst Video = props => {\n  _s();\n\n  const ref = useRef();\n  useEffect(() => {\n    console.log(props.peer);\n    props.peer.on(\"stream\", stream => {\n      console.log(\"ENTE0RD\" + stream);\n      ref.current.srcObject = stream;\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"video\", {\n    style: vidStyle,\n    autoPlay: true,\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Video, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n_c = Video;\nlet peer = null;\nconst videoConstraints = {\n  height: window.innerHeight / 2,\n  width: window.innerWidth / 2\n};\n\nconst Room = ({\n  id,\n  setMessenger,\n  isAdmin,\n  setMeetingInfoPopUp\n}) => {\n  _s2();\n\n  const numUsers = useRef();\n  const [peers, setPeers] = useState([]);\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const roomID = id;\n  const [streamObj, setStreamObj] = useState();\n  const [screenCastStream, setScreenCastStream] = useState();\n  const [isPresenting, setIsPresenting] = useState();\n  useEffect(() => {\n    socketRef.current = io.connect(\"http://localhost:9000\");\n    navigator.mediaDevices.getUserMedia({\n      video: videoConstraints,\n      audio: true\n    }).then(stream => {\n      setStreamObj(stream);\n      userVideo.current.srcObject = stream;\n      console.log(\"USERVIDEO\" + stream); // LOGIC THAT USER HAS JOINED THE ROOM\n      //THIS EVENT Is NOT CACHED AT BACKEND\n      //.emit means sending  to backend\n\n      socketRef.current.emit(\"JOINED ROOM\");\n      socketRef.current.emit(\"join room\", roomID); // Recieve users from backened\n      // if (!props.isAdmin) {\n\n      socketRef.current.on(\"all users\", users => {\n        //peers is for how many videos are rendering\n        console.log(users.length);\n        numUsers.current = users.length + 1;\n        const peersForVideo = [];\n        users.forEach(userID => {\n          console.log(userID + \" USER ID OF USER IN THE ROOM \");\n          console.log(socketRef.current); //socketRef.current.id is the of user currently joined\n          // UserID  id's of all those inside the meeting\n\n          const peer = createPeer(userID, socketRef.current.id, stream); //peersRef is for which is having connection with which\n\n          peersRef.current.push({\n            peerID: userID,\n            peer\n          });\n          peersForVideo.push(peer);\n        });\n        setPeers(peersForVideo);\n        console.log(peers);\n      }); //PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\n      //.on means recieving from backend\n\n      socketRef.current.on(\"user joined\", payload => {\n        const peer = addPeer(payload.signal, payload.callerID, stream);\n        peersRef.current.push({\n          peerID: payload.callerID,\n          peer\n        });\n        setPeers(users => [...users, peer]);\n      });\n      socketRef.current.on(\"receiving returned signal\", payload => {\n        // signal has been send to multiple now multiple users are sending back the signal to caller\n        const item = peersRef.current.find(p => p.peerID === payload.id);\n        console.log(item);\n        item.peer.signal(payload.signal);\n      }); // }\n    });\n  }, []);\n\n  function createPeer(userToSignal, callerID, stream) {\n    console.log(\"CREATE PEER\");\n    const peer = new Peer({\n      initiator: true,\n      //trickle wait for all the data to send makes it slow\n      trickle: false,\n      stream\n    }); //generates signal\n    //sending to backend\n\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"sending signal\", {\n        userToSignal,\n        callerID,\n        signal\n      });\n    });\n    return peer;\n  }\n\n  function addPeer(incomingSignal, callerID, stream) {\n    console.log(\"Add Peer\");\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    }); // 1 accepting the incoming signal that this will return the signal\n\n    peer.signal(incomingSignal);\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"returning signal\", {\n        signal,\n        callerID\n      });\n    });\n    return peer;\n  }\n\n  const screenShare = () => {\n    navigator.mediaDevices.getDisplayMedia({\n      cursor: true\n    }).then(screenStream => {\n      peer.replaceTrack(streamObj.getVideoTracks()[0], screenStream.getVideoTracks()[0], streamObj);\n      setScreenCastStream(screenStream);\n\n      screenStream.getTracks()[0].onended = () => {\n        peer.replaceTrack(screenStream.getVideoTracks()[0], streamObj.getVideoTracks()[0], streamObj);\n      };\n\n      setIsPresenting(true);\n    });\n  };\n\n  const stopScreenShare = () => {\n    screenCastStream.getVideoTracks().forEach(function (track) {\n      track.stop();\n    });\n    peer.replaceTrack(screenCastStream.getVideoTracks()[0], streamObj.getVideoTracks()[0], streamObj);\n    setIsPresenting(false);\n  }; // console.log(\"PEERS \" + JSON.stringify(peers));\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"videoScreen\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        style: vidStyle,\n        muted: true,\n        ref: userVideo,\n        autoPlay: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 5\n      }, this), peers.map((peer, index) => {\n        return /*#__PURE__*/_jsxDEV(Video, {\n          peer: peer\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MeetingHeader, {\n      setMessenger: setMessenger // peers={peers}\n      // userVideo={userVideo}\n      // isAdmin={isAdmin}\n      ,\n      id: id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MeetingFooter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 4\n    }, this), isAdmin && meetingInfoPopUp && /*#__PURE__*/_jsxDEV(MeetingInfo, {\n      url: url,\n      setMeetingInfoPopUp: setMeetingInfoPopUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 5\n    }, this), isMessenger ? /*#__PURE__*/_jsxDEV(Messenger, {\n      setMessenger: setMessenger // messageList={messageList}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(Alert, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 3\n  }, this);\n};\n\n_s2(Room, \"qYjL7uPlxO9wEXx9ZYTH23H/dbA=\");\n\n_c2 = Room;\nexport default Room;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Video\");\n$RefreshReg$(_c2, \"Room\");","map":{"version":3,"sources":["C:/Users/jayka/web development/google-meet/client/src/components/Room.js"],"names":["React","useEffect","useRef","useState","io","Peer","MeetingHeader","MeetingFooter","MeetingInfo","vidStyle","height","width","padding","paddingBottom","Video","props","ref","console","log","peer","on","stream","current","srcObject","videoConstraints","window","innerHeight","innerWidth","Room","id","setMessenger","isAdmin","setMeetingInfoPopUp","numUsers","peers","setPeers","socketRef","userVideo","peersRef","roomID","streamObj","setStreamObj","screenCastStream","setScreenCastStream","isPresenting","setIsPresenting","connect","navigator","mediaDevices","getUserMedia","video","audio","then","emit","users","length","peersForVideo","forEach","userID","createPeer","push","peerID","payload","addPeer","signal","callerID","item","find","p","userToSignal","initiator","trickle","incomingSignal","screenShare","getDisplayMedia","cursor","screenStream","replaceTrack","getVideoTracks","getTracks","onended","stopScreenShare","track","stop","map","index","meetingInfoPopUp","url","isMessenger"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\nimport MeetingHeader from \"./meetingHeader\";\r\nimport MeetingFooter from \"./meetingFooter\";\r\nimport MeetingInfo from \"./meetingInfo\";\r\n\r\nconst vidStyle = {\r\n\t// height: \"calc(50vh -90px)\",\r\n\t// borderRadius:\"10px\"\r\n\theight: \"45%\",\r\n\twidth: \"45%\",\r\n\r\n\tpadding: \"10px\",\r\n\tpaddingBottom: \"5px\",\r\n};\r\n\r\nconst Video = (props) => {\r\n\tconst ref = useRef();\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log(props.peer);\r\n\t\tprops.peer.on(\"stream\", (stream) => {\r\n\t\t\tconsole.log(\"ENTE0RD\" + stream);\r\n\t\t\tref.current.srcObject = stream;\r\n\t\t});\r\n\t}, []);\r\n\r\n\treturn <video style={vidStyle} autoPlay ref={ref} />;\r\n};\r\n\r\nlet peer = null;\r\n\r\n\r\nconst videoConstraints = {\r\n\theight: window.innerHeight / 2,\r\n\twidth: window.innerWidth / 2,\r\n};\r\n\r\nconst Room = ({ id, setMessenger, isAdmin, setMeetingInfoPopUp }) => {\r\n\tconst numUsers = useRef();\r\n\tconst [peers, setPeers] = useState([]);\r\n\tconst socketRef = useRef();\r\n\tconst userVideo = useRef();\r\n\tconst peersRef = useRef([]);\r\n\tconst roomID = id;\r\n\tconst [streamObj, setStreamObj] = useState();\r\n\tconst [screenCastStream, setScreenCastStream] = useState();\r\n\tconst [isPresenting, setIsPresenting] = useState();\r\n\r\n\tuseEffect(() => {\r\n\t\tsocketRef.current = io.connect(\"http://localhost:9000\");\r\n\t\tnavigator.mediaDevices\r\n\t\t\t.getUserMedia({ video: videoConstraints, audio: true })\r\n\t\t\t.then((stream) => {\r\n\t\t\t\tsetStreamObj(stream);\r\n\t\t\t\tuserVideo.current.srcObject = stream;\r\n\t\t\t\tconsole.log(\"USERVIDEO\" + stream);\r\n\t\t\t\t// LOGIC THAT USER HAS JOINED THE ROOM\r\n\r\n\t\t\t\t//THIS EVENT Is NOT CACHED AT BACKEND\r\n\t\t\t\t//.emit means sending  to backend\r\n\t\t\t\tsocketRef.current.emit(\"JOINED ROOM\");\r\n\t\t\t\tsocketRef.current.emit(\"join room\", roomID);\r\n\t\t\t\t// Recieve users from backened\r\n\t\t\t\t// if (!props.isAdmin) {\r\n\r\n\t\t\t\tsocketRef.current.on(\"all users\", (users) => {\r\n\t\t\t\t\t//peers is for how many videos are rendering\r\n\t\t\t\t\tconsole.log(users.length);\r\n\t\t\t\t\tnumUsers.current = users.length + 1;\r\n\t\t\t\t\tconst peersForVideo = [];\r\n\t\t\t\t\tusers.forEach((userID) => {\r\n\t\t\t\t\t\tconsole.log(userID + \" USER ID OF USER IN THE ROOM \");\r\n\t\t\t\t\t\tconsole.log(socketRef.current);\r\n\t\t\t\t\t\t//socketRef.current.id is the of user currently joined\r\n\t\t\t\t\t\t// UserID  id's of all those inside the meeting\r\n\r\n\t\t\t\t\t\tconst peer = createPeer(userID, socketRef.current.id, stream);\r\n\t\t\t\t\t\t//peersRef is for which is having connection with which\r\n\t\t\t\t\t\tpeersRef.current.push({\r\n\t\t\t\t\t\t\tpeerID: userID,\r\n\t\t\t\t\t\t\tpeer,\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tpeersForVideo.push(peer);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsetPeers(peersForVideo);\r\n\t\t\t\t\tconsole.log(peers);\r\n\t\t\t\t});\r\n\t\t\t\t//PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\r\n\t\t\t\t//.on means recieving from backend\r\n\t\t\t\tsocketRef.current.on(\"user joined\", (payload) => {\r\n\t\t\t\t\tconst peer = addPeer(payload.signal, payload.callerID, stream);\r\n\r\n\t\t\t\t\tpeersRef.current.push({\r\n\t\t\t\t\t\tpeerID: payload.callerID,\r\n\t\t\t\t\t\tpeer,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsetPeers((users) => [...users, peer]);\r\n\t\t\t\t});\r\n\t\t\t\tsocketRef.current.on(\"receiving returned signal\", (payload) => {\r\n\t\t\t\t\t// signal has been send to multiple now multiple users are sending back the signal to caller\r\n\t\t\t\t\tconst item = peersRef.current.find((p) => p.peerID === payload.id);\r\n\t\t\t\t\tconsole.log(item);\r\n\t\t\t\t\titem.peer.signal(payload.signal);\r\n\t\t\t\t});\r\n\t\t\t\t// }\r\n\t\t\t});\r\n\t}, []);\r\n\r\n\tfunction createPeer(userToSignal, callerID, stream) {\r\n\t\tconsole.log(\"CREATE PEER\");\r\n\t\tconst peer = new Peer({\r\n\t\t\tinitiator: true,\r\n\t\t\t//trickle wait for all the data to send makes it slow\r\n\t\t\ttrickle: false,\r\n\t\t\tstream,\r\n\t\t});\r\n\t\t//generates signal\r\n\t\t//sending to backend\r\n\t\tpeer.on(\"signal\", (signal) => {\r\n\t\t\tsocketRef.current.emit(\"sending signal\", {\r\n\t\t\t\tuserToSignal,\r\n\t\t\t\tcallerID,\r\n\t\t\t\tsignal,\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn peer;\r\n\t}\r\n\r\n\tfunction addPeer(incomingSignal, callerID, stream) {\r\n\t\tconsole.log(\"Add Peer\");\r\n\t\tconst peer = new Peer({\r\n\t\t\tinitiator: false,\r\n\t\t\ttrickle: false,\r\n\t\t\tstream,\r\n\t\t});\r\n\t\t// 1 accepting the incoming signal that this will return the signal\r\n\t\tpeer.signal(incomingSignal);\r\n\r\n\t\tpeer.on(\"signal\", (signal) => {\r\n\t\t\tsocketRef.current.emit(\"returning signal\", { signal, callerID });\r\n\t\t});\r\n\t\treturn peer;\r\n\t}\r\n\r\n\tconst screenShare = () => {\r\n\t\tnavigator.mediaDevices\r\n\t\t\t.getDisplayMedia({ cursor: true })\r\n\t\t\t.then((screenStream) => {\r\n\t\t\t\tpeer.replaceTrack(\r\n\t\t\t\t\tstreamObj.getVideoTracks()[0],\r\n\t\t\t\t\tscreenStream.getVideoTracks()[0],\r\n\t\t\t\t\tstreamObj\r\n\t\t\t\t);\r\n\t\t\t\tsetScreenCastStream(screenStream);\r\n\t\t\t\tscreenStream.getTracks()[0].onended = () => {\r\n\t\t\t\t\tpeer.replaceTrack(\r\n\t\t\t\t\t\tscreenStream.getVideoTracks()[0],\r\n\t\t\t\t\t\tstreamObj.getVideoTracks()[0],\r\n\t\t\t\t\t\tstreamObj\r\n\t\t\t\t\t);\r\n\t\t\t\t};\r\n\t\t\t\tsetIsPresenting(true);\r\n\t\t\t});\r\n\t};\r\n\tconst stopScreenShare = () => {\r\n\t\tscreenCastStream.getVideoTracks().forEach(function (track) {\r\n\t\t\ttrack.stop();\r\n\t\t});\r\n\t\tpeer.replaceTrack(\r\n\t\t\tscreenCastStream.getVideoTracks()[0],\r\n\t\t\tstreamObj.getVideoTracks()[0],\r\n\t\t\tstreamObj\r\n\t\t);\r\n\t\tsetIsPresenting(false);\r\n\t};\r\n\r\n\t// console.log(\"PEERS \" + JSON.stringify(peers));\r\n\treturn (\r\n\t\t<div class=\"videoScreen\">\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<video style={vidStyle} muted ref={userVideo} autoPlay />\r\n\t\t\t\t{peers.map((peer, index) => {\r\n\t\t\t\t\treturn <Video key={index} peer={peer} />;\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t\t<MeetingHeader\r\n\t\t\t\tsetMessenger={setMessenger}\r\n\t\t\t\t// peers={peers}\r\n\t\t\t\t// userVideo={userVideo}\r\n\t\t\t\t// isAdmin={isAdmin}\r\n\t\t\t\tid={id}\r\n\t\t\t/>\r\n\t\t\t<MeetingFooter />\r\n\t\t\t{isAdmin && meetingInfoPopUp && (\r\n\t\t\t\t<MeetingInfo url={url} setMeetingInfoPopUp={setMeetingInfoPopUp} />\r\n\t\t\t)}\r\n\t\t\t{isMessenger ? (\r\n\t\t\t\t<Messenger\r\n\t\t\t\t\tsetMessenger={setMessenger}\r\n\t\t\t\t\t// messageList={messageList}\r\n\t\t\t\t/>\r\n\t\t\t) : (\r\n\t\t\t\t<Alert />\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Room;\r\n"]},"metadata":{},"sourceType":"module"}