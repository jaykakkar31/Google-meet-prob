{"ast":null,"code":"// import React, { useEffect, useRef, useState } from \"react\";\n// import io from \"socket.io-client\";\n// import Peer from \"simple-peer\";\n// const vidStyle = {\n// \t// height: \"calc(50vh -90px)\",\n//     // borderRadius:\"10px\"\n//     height:\"45%\",\n//     width:\"45%\",\n//     padding:\"10px\",\n//     paddingBottom:\"5px\",\n// };\n// const Video = (props) => {\n// \tconst ref = useRef();\n// \tuseEffect(() => {\n// \t\tconsole.log(props.peer);\n// \t\tprops.peer.on(\"stream\", (stream) => {\n// \t\t\tconsole.log(\"ENTE0RD\" + stream);\n// \t\t\tref.current.srcObject = stream;\n// \t\t});\n// \t}, []);\n// \treturn <video  style={vidStyle} autoPlay ref={ref} />;\n// };\n// const videoConstraints = {\n// \theight: window.innerHeight / 2,\n// \twidth: window.innerWidth / 2,\n// };\n// const Room = (props) => {\n//     const numUsers=useRef()\n// \tconst [peers, setPeers] = useState([]);\n// \tconst socketRef = useRef();\n// \tconst userVideo = useRef();\n// \tconst peersRef = useRef([]);\n// \tconst roomID = props.id;\n// \tuseEffect(() => {\n// \t\tsocketRef.current = io.connect(\"http://localhost:9000\");\n// \t\tnavigator.mediaDevices\n// \t\t\t.getUserMedia({ video: videoConstraints, audio: true })\n// \t\t\t.then((stream) => {\n// \t\t\t\tuserVideo.current.srcObject = stream;\n// \t\t\t\tconsole.log(\"USERVIDEO\" + stream);\n// \t\t\t\t// LOGIC THAT USER HAS JOINED THE ROOM\n// \t\t\t\t//THIS EVENT Is NOT CACHED AT BACKEND\n// \t\t\t\t//.emit means sending  to backend\n// \t\t\t\tsocketRef.current.emit(\"JOINED ROOM\");\n// \t\t\t\tsocketRef.current.emit(\"join room\", roomID);\n// \t\t\t\t// Recieve users from backened\n// \t\t\t\tif (!props.isAdmin) {\n// \t\t\t\t\tsocketRef.current.on(\"all users\", (users) => {\n// \t\t\t\t\t\t//peers is for how many videos are rendering\n// \t\t\t\t\t\tconsole.log(users.length);\n//                         numUsers.current=users.length+1\n// \t\t\t\t\t\tconst peersForVideo = [];\n// \t\t\t\t\t\tusers.forEach((userID) => {\n// \t\t\t\t\t\t\tconsole.log(userID + \" USER ID OF USER IN THE ROOM \");\n// \t\t\t\t\t\t\tconsole.log(socketRef.current);\n// \t\t\t\t\t\t\t//socketRef.current.id is the of user currently joined\n// \t\t\t\t\t\t\t// UserID  id's of all those inside the meeting\n// \t\t\t\t\t\t\tconst peer = createPeer(userID, socketRef.current.id, stream);\n// \t\t\t\t\t\t\t//peersRef is for which is having connection with which\n// \t\t\t\t\t\t\tpeersRef.current.push({\n// \t\t\t\t\t\t\t\tpeerID: userID,\n// \t\t\t\t\t\t\t\tpeer,\n// \t\t\t\t\t\t\t});\n// \t\t\t\t\t\t\tpeersForVideo.push(peer);\n// \t\t\t\t\t\t});\n// \t\t\t\t\t\tsetPeers(peersForVideo);\n// \t\t\t\t\t\tconsole.log(peers);\n// \t\t\t\t\t});\n// \t\t\t\t\t//PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\n// \t\t\t\t\t//.on means recieving from backend\n// \t\t\t\t\tsocketRef.current.on(\"user joined\", (payload) => {\n// \t\t\t\t\t\tconst peer = addPeer(payload.signal, payload.callerID, stream);\n// \t\t\t\t\t\tpeersRef.current.push({\n// \t\t\t\t\t\t\tpeerID: payload.callerID,\n// \t\t\t\t\t\t\tpeer,\n// \t\t\t\t\t\t});\n// \t\t\t\t\t\tsetPeers((users) => [...users, peer]);\n// \t\t\t\t\t});\n// \t\t\t\t\tsocketRef.current.on(\"receiving returned signal\", (payload) => {\n// \t\t\t\t\t\t// signal has been send to multiple now multiple users are sending back the signal to caller\n// \t\t\t\t\t\tconst item = peersRef.current.find((p) => p.peerID === payload.id);\n// \t\t\t\t\t\tconsole.log(item);\n// \t\t\t\t\t\titem.peer.signal(payload.signal);\n// \t\t\t\t\t});\n// \t\t\t\t}\n// \t\t\t});\n// \t}, []);\n// \tfunction createPeer(userToSignal, callerID, stream) {\n// \t\tconsole.log(\"CREATE PEER\");\n// \t\tconst peer = new Peer({\n// \t\t\tinitiator: true,\n// \t\t\t//trickle wait for all the data to send makes it slow\n// \t\t\ttrickle: false,\n// \t\t\tstream,\n// \t\t});\n// \t\t//generates signal\n// \t\t//sending to backend\n// \t\tpeer.on(\"signal\", (signal) => {\n// \t\t\tsocketRef.current.emit(\"sending signal\", {\n// \t\t\t\tuserToSignal,\n// \t\t\t\tcallerID,\n// \t\t\t\tsignal,\n// \t\t\t});\n// \t\t});\n// \t\treturn peer;\n// \t}\n// \tfunction addPeer(incomingSignal, callerID, stream) {\n// \t\tconsole.log(\"Add Peer\");\n// \t\tconst peer = new Peer({\n// \t\t\tinitiator: false,\n// \t\t\ttrickle: false,\n// \t\t\tstream,\n// \t\t});\n// \t\t// 1 accepting the incoming signal that this will return the signal\n// \t\tpeer.signal(incomingSignal);\n// \t\tpeer.on(\"signal\", (signal) => {\n// \t\t\tsocketRef.current.emit(\"returning signal\", { signal, callerID });\n// \t\t});\n// \t\treturn peer;\n// \t}\n// \t// console.log(\"PEERS \" + JSON.stringify(peers));\n// \treturn (\n// \t\t<div className=\"container\">\n// \t\t\t<video style={vidStyle} muted ref={userVideo} autoPlay />\n// \t\t\t{peers.map((peer, index) => {\n// \t\t\t\treturn <Video key={index} peer={peer} />;\n// \t\t\t})}\n// \t\t</div>\n// \t);\n// };\n// export default Room;","map":{"version":3,"sources":["C:/Users/jayka/web development/google-meet/client/src/components/Room.js"],"names":[],"mappingssourcesContent":["// import React, { useEffect, useRef, useState } from \"react\";\r\n// import io from \"socket.io-client\";\r\n// import Peer from \"simple-peer\";\r\n\r\n// const vidStyle = {\r\n// \t// height: \"calc(50vh -90px)\",\r\n//     // borderRadius:\"10px\"\r\n//     height:\"45%\",\r\n//     width:\"45%\",\r\n\r\n//     padding:\"10px\",\r\n//     paddingBottom:\"5px\",\r\n// };\r\n\r\n// const Video = (props) => {\r\n// \tconst ref = useRef();\r\n\r\n// \tuseEffect(() => {\r\n// \t\tconsole.log(props.peer);\r\n// \t\tprops.peer.on(\"stream\", (stream) => {\r\n// \t\t\tconsole.log(\"ENTE0RD\" + stream);\r\n// \t\t\tref.current.srcObject = stream;\r\n// \t\t});\r\n// \t}, []);\r\n\r\n// \treturn <video  style={vidStyle} autoPlay ref={ref} />;\r\n// };\r\n\r\n// const videoConstraints = {\r\n// \theight: window.innerHeight / 2,\r\n// \twidth: window.innerWidth / 2,\r\n// };\r\n\r\n// const Room = (props) => {\r\n//     const numUsers=useRef()\r\n// \tconst [peers, setPeers] = useState([]);\r\n// \tconst socketRef = useRef();\r\n// \tconst userVideo = useRef();\r\n// \tconst peersRef = useRef([]);\r\n// \tconst roomID = props.id;\r\n\r\n// \tuseEffect(() => {\r\n// \t\tsocketRef.current = io.connect(\"http://localhost:9000\");\r\n// \t\tnavigator.mediaDevices\r\n// \t\t\t.getUserMedia({ video: videoConstraints, audio: true })\r\n// \t\t\t.then((stream) => {\r\n\r\n// \t\t\t\tuserVideo.current.srcObject = stream;\r\n// \t\t\t\tconsole.log(\"USERVIDEO\" + stream);\r\n// \t\t\t\t// LOGIC THAT USER HAS JOINED THE ROOM\r\n\r\n// \t\t\t\t//THIS EVENT Is NOT CACHED AT BACKEND\r\n// \t\t\t\t//.emit means sending  to backend\r\n// \t\t\t\tsocketRef.current.emit(\"JOINED ROOM\");\r\n// \t\t\t\tsocketRef.current.emit(\"join room\", roomID);\r\n// \t\t\t\t// Recieve users from backened\r\n// \t\t\t\tif (!props.isAdmin) {\r\n// \t\t\t\t\tsocketRef.current.on(\"all users\", (users) => {\r\n// \t\t\t\t\t\t//peers is for how many videos are rendering\r\n// \t\t\t\t\t\tconsole.log(users.length);\r\n//                         numUsers.current=users.length+1\r\n// \t\t\t\t\t\tconst peersForVideo = [];\r\n// \t\t\t\t\t\tusers.forEach((userID) => {\r\n// \t\t\t\t\t\t\tconsole.log(userID + \" USER ID OF USER IN THE ROOM \");\r\n// \t\t\t\t\t\t\tconsole.log(socketRef.current);\r\n// \t\t\t\t\t\t\t//socketRef.current.id is the of user currently joined\r\n// \t\t\t\t\t\t\t// UserID  id's of all those inside the meeting\r\n\r\n// \t\t\t\t\t\t\tconst peer = createPeer(userID, socketRef.current.id, stream);\r\n// \t\t\t\t\t\t\t//peersRef is for which is having connection with which\r\n// \t\t\t\t\t\t\tpeersRef.current.push({\r\n// \t\t\t\t\t\t\t\tpeerID: userID,\r\n// \t\t\t\t\t\t\t\tpeer,\r\n// \t\t\t\t\t\t\t});\r\n\r\n// \t\t\t\t\t\t\tpeersForVideo.push(peer);\r\n// \t\t\t\t\t\t});\r\n// \t\t\t\t\t\tsetPeers(peersForVideo);\r\n// \t\t\t\t\t\tconsole.log(peers);\r\n// \t\t\t\t\t});\r\n// \t\t\t\t\t//PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\r\n// \t\t\t\t\t//.on means recieving from backend\r\n// \t\t\t\t\tsocketRef.current.on(\"user joined\", (payload) => {\r\n// \t\t\t\t\t\tconst peer = addPeer(payload.signal, payload.callerID, stream);\r\n\r\n// \t\t\t\t\t\tpeersRef.current.push({\r\n// \t\t\t\t\t\t\tpeerID: payload.callerID,\r\n// \t\t\t\t\t\t\tpeer,\r\n// \t\t\t\t\t\t});\r\n// \t\t\t\t\t\tsetPeers((users) => [...users, peer]);\r\n// \t\t\t\t\t});\r\n// \t\t\t\t\tsocketRef.current.on(\"receiving returned signal\", (payload) => {\r\n// \t\t\t\t\t\t// signal has been send to multiple now multiple users are sending back the signal to caller\r\n// \t\t\t\t\t\tconst item = peersRef.current.find((p) => p.peerID === payload.id);\r\n// \t\t\t\t\t\tconsole.log(item);\r\n// \t\t\t\t\t\titem.peer.signal(payload.signal);\r\n// \t\t\t\t\t});\r\n// \t\t\t\t}\r\n// \t\t\t});\r\n// \t}, []);\r\n\r\n// \tfunction createPeer(userToSignal, callerID, stream) {\r\n// \t\tconsole.log(\"CREATE PEER\");\r\n// \t\tconst peer = new Peer({\r\n// \t\t\tinitiator: true,\r\n// \t\t\t//trickle wait for all the data to send makes it slow\r\n// \t\t\ttrickle: false,\r\n// \t\t\tstream,\r\n// \t\t});\r\n// \t\t//generates signal\r\n// \t\t//sending to backend\r\n// \t\tpeer.on(\"signal\", (signal) => {\r\n// \t\t\tsocketRef.current.emit(\"sending signal\", {\r\n// \t\t\t\tuserToSignal,\r\n// \t\t\t\tcallerID,\r\n// \t\t\t\tsignal,\r\n// \t\t\t});\r\n// \t\t});\r\n// \t\treturn peer;\r\n// \t}\r\n\r\n// \tfunction addPeer(incomingSignal, callerID, stream) {\r\n// \t\tconsole.log(\"Add Peer\");\r\n// \t\tconst peer = new Peer({\r\n// \t\t\tinitiator: false,\r\n// \t\t\ttrickle: false,\r\n// \t\t\tstream,\r\n// \t\t});\r\n// \t\t// 1 accepting the incoming signal that this will return the signal\r\n// \t\tpeer.signal(incomingSignal);\r\n\r\n// \t\tpeer.on(\"signal\", (signal) => {\r\n// \t\t\tsocketRef.current.emit(\"returning signal\", { signal, callerID });\r\n// \t\t});\r\n// \t\treturn peer;\r\n// \t}\r\n\r\n// \t// console.log(\"PEERS \" + JSON.stringify(peers));\r\n// \treturn (\r\n// \t\t<div className=\"container\">\r\n// \t\t\t<video style={vidStyle} muted ref={userVideo} autoPlay />\r\n// \t\t\t{peers.map((peer, index) => {\r\n// \t\t\t\treturn <Video key={index} peer={peer} />;\r\n// \t\t\t})}\r\n// \t\t</div>\r\n// \t);\r\n// };\r\n\r\n// export default Room;\r\n"]},"metadata":{},"sourceType":"module"}