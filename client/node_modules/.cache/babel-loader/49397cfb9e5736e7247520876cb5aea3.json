{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayka\\\\web development\\\\google-meet\\\\client\\\\src\\\\components\\\\vedioPage.js\",\n    _s = $RefreshSig$();\n\nimport react, { useState, useEffect, useReducer, useRef } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport MeetingHeader from \"./meetingHeader\";\nimport MeetingFooter from \"./meetingFooter\";\nimport MeetingInfo from \"./meetingInfo\";\nimport styled from \"styled-components\";\nimport Messenger from \"./messenger\";\nimport Alert from \"./alert\";\nimport Peer from \"simple-peer\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction VideoPage() {\n  _s();\n\n  const isAdmin = window.location.hash === \"#init\" ? true : false; //#init\n  // console.log(window.location.hash);\n\n  const {\n    id\n  } = useParams(); // let peer = null;\n\n  const url = `${window.location.origin}${window.location.pathname}`;\n  const [meetingInfoPopUp, setMeetingInfoPopUp] = useState(false);\n  const [isMessenger, setMessenger] = useState(false);\n  useEffect(() => {\n    if (isAdmin) {\n      setMeetingInfoPopUp(true);\n    }\n  }, []); // const vidStyle = {\n  // \t// height: \"calc(50vh -90px)\",\n  // \t// borderRadius:\"10px\"\n  // \theight: \"45%\",\n  // \twidth: \"45%\",\n  // \tpadding: \"10px\",\n  // \tpaddingBottom: \"5px\",\n  // };\n  // const Video = (props) => {\n  // \tconst ref = useRef();\n  // \tuseEffect(() => {\n  // \t\tconsole.log(props.peer);\n  // \t\tprops.peer.on(\"stream\", (stream) => {\n  // \t\t\tconsole.log(\"ENTE0RD\" + stream);\n  // \t\t\tref.current.srcObject = stream;\n  // \t\t});\n  // \t}, []);\n  // \treturn <video style={vidStyle} autoPlay ref={ref} />;\n  // };\n  // const videoConstraints = {\n  // \theight: window.innerHeight / 2,\n  // \twidth: window.innerWidth / 2,\n  // };\n  // const Room = (props) => {\n  // \tconst numUsers = useRef();\n  // \tconst [peers, setPeers] = useState([]);\n  // \tconst socketRef = useRef();\n  // \tconst userVideo = useRef();\n  // \tconst peersRef = useRef([]);\n  // \tconst roomID = props.id;\n  // \tuseEffect(() => {\n  // \t\tsocketRef.current = io.connect(\"http://localhost:9000\");\n  // \t\tnavigator.mediaDevices\n  // \t\t\t.getUserMedia({ video: videoConstraints, audio: true })\n  // \t\t\t.then((stream) => {\n  // \t\t\t\t// userVideo.current.srcObject = stream;\n  // \t\t\t\tlet video = document.getElementById(\"video\");\n  // \t\t\t\tif (\"srcObject\" in video) {\n  // \t\t\t\t\tvideo.srcObject = stream;\n  // \t\t\t\t} else {\n  // \t\t\t\t\tvideo.src = window.URL.createObjectURL(stream); // for older browsers\n  // \t\t\t\t}\n  // \t\t\t\tvideo.play();\n  // \t\t\t\tconsole.log(\"USERVIDEO\" + stream);\n  // \t\t\t\t// LOGIC THAT USER HAS JOINED THE ROOM\n  // \t\t\t\t//THIS EVENT Is NOT CACHED AT BACKEND\n  // \t\t\t\t//.emit means sending  to backend\n  // \t\t\t\tsocketRef.current.emit(\"JOINED ROOM\");\n  // \t\t\t\tsocketRef.current.emit(\"join room\", roomID);\n  // \t\t\t\t// Recieve users from backened\n  //                 console.log(isAdmin);\n  // \t\t\t\tif (!isAdmin) {\n  // \t\t\t\t\tsocketRef.current.on(\"all users\", (users) => {\n  // \t\t\t\t\t\t//peers is for how many videos are rendering\n  // \t\t\t\t\t\tconsole.log(users.length);\n  // \t\t\t\t\t\tnumUsers.current = users.length + 1;\n  // \t\t\t\t\t\tconst peersForVideo = [];\n  // \t\t\t\t\t\tusers.forEach((userID) => {\n  // \t\t\t\t\t\t\tconsole.log(userID + \" USER ID OF USER IN THE ROOM \");\n  // \t\t\t\t\t\t\tconsole.log(socketRef.current);\n  // \t\t\t\t\t\t\t//socketRef.current.id is the of user currently joined\n  // \t\t\t\t\t\t\t// UserID  id's of all those inside the meeting\n  // \t\t\t\t\t\t\tconst peer = createPeer(userID, socketRef.current.id, stream);\n  // \t\t\t\t\t\t\t//peersRef is for which is having connection with which\n  // \t\t\t\t\t\t\tpeersRef.current.push({\n  // \t\t\t\t\t\t\t\tpeerID: userID,\n  // \t\t\t\t\t\t\t\tpeer,\n  // \t\t\t\t\t\t\t});\n  // \t\t\t\t\t\t\tpeersForVideo.push(peer);\n  // \t\t\t\t\t\t});\n  // \t\t\t\t\t\tsetPeers(peersForVideo);\n  // \t\t\t\t\t\tconsole.log(peers);\n  // \t\t\t\t\t});\n  // \t\t\t\t\t//PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\n  // \t\t\t\t\t//.on means recieving from backend\n  // \t\t\t\t\tsocketRef.current.on(\"user joined\", (payload) => {\n  // \t\t\t\t\t\tconst peer = addPeer(payload.signal, payload.callerID, stream);\n  // \t\t\t\t\t\tpeersRef.current.push({\n  // \t\t\t\t\t\t\tpeerID: payload.callerID,\n  // \t\t\t\t\t\t\tpeer,\n  // \t\t\t\t\t\t});\n  // \t\t\t\t\t\tsetPeers((users) => [...users, peer]);\n  // \t\t\t\t\t});\n  // \t\t\t\t\tsocketRef.current.on(\"receiving returned signal\", (payload) => {\n  // \t\t\t\t\t\t// signal has been send to multiple now multiple users are sending back the signal to caller\n  // \t\t\t\t\t\tconst item = peersRef.current.find(\n  // \t\t\t\t\t\t\t(p) => p.peerID === payload.id\n  // \t\t\t\t\t\t);\n  // \t\t\t\t\t\tconsole.log(item);\n  // \t\t\t\t\t\titem.peer.signal(payload.signal);\n  // \t\t\t\t\t});\n  // \t\t\t\t}\n  // \t\t\t});\n  // \t}, []);\n  // \tfunction createPeer(userToSignal, callerID, stream) {\n  // \t\tconsole.log(\"CREATE PEER\");\n  // \t\tconst peer = new Peer({\n  // \t\t\tinitiator: true,\n  // \t\t\t//trickle wait for all the data to send makes it slow\n  // \t\t\ttrickle: false,\n  // \t\t\tstream,\n  // \t\t});\n  // \t\t//generates signal\n  // \t\t//sending to backend\n  // \t\tpeer.on(\"signal\", (signal) => {\n  // \t\t\tsocketRef.current.emit(\"sending signal\", {\n  // \t\t\t\tuserToSignal,\n  // \t\t\t\tcallerID,\n  // \t\t\t\tsignal,\n  // \t\t\t});\n  // \t\t});\n  // \t\treturn peer;\n  // \t}\n  // \tfunction addPeer(incomingSignal, callerID, stream) {\n  // \t\tconsole.log(\"Add Peer\");\n  // \t\tconst peer = new Peer({\n  // \t\t\tinitiator: false,\n  // \t\t\ttrickle: false,\n  // \t\t\tstream,\n  // \t\t});\n  // \t\t// 1 accepting the incoming signal that this will return the signal\n  // \t\tpeer.signal(incomingSignal);\n  // \t\tpeer.on(\"signal\", (signal) => {\n  // \t\t\tsocketRef.current.emit(\"returning signal\", { signal, callerID });\n  // \t\t});\n  // \t\treturn peer;\n  // \t}\n  // \t// console.log(\"PEERS \" + JSON.stringify(peers));\n  // \treturn (\n  // \t\t<div className=\"container\">\n  // \t\t\t<video id=\"video\" style={vidStyle} muted ref={userVideo} autoPlay />\n  // \t\t\t{peers.map((peer, index) => {\n  // \t\t\t\treturn <Video key={index} peer={peer} />;\n  // \t\t\t})}\n  // \t\t</div>\n  // \t);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"videoScreen\",\n    children: [/*#__PURE__*/_jsxDEV(MeetingHeader, {\n      setMessenger: setMessenger // peers={peers}\n      // userVideo={userVideo}\n      // Video={Video}\n      // ref={userVideo}\n      ,\n      isAdmin: isAdmin,\n      id: id // Room={Room}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MeetingFooter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 4\n    }, this), isAdmin && meetingInfoPopUp && /*#__PURE__*/_jsxDEV(MeetingInfo, {\n      url: url,\n      setMeetingInfoPopUp: setMeetingInfoPopUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 5\n    }, this), isMessenger ? /*#__PURE__*/_jsxDEV(Messenger, {\n      setMessenger: setMessenger // messageList={messageList}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(Alert, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 3\n  }, this);\n}\n\n_s(VideoPage, \"Xae22M79kcI6o3IfuV3ThdO4rXM=\", false, function () {\n  return [useParams];\n});\n\n_c = VideoPage;\nexport default VideoPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoPage\");","map":{"version":3,"sources":["C:/Users/jayka/web development/google-meet/client/src/components/vedioPage.js"],"names":["react","useState","useEffect","useReducer","useRef","useParams","useHistory","MeetingHeader","MeetingFooter","MeetingInfo","styled","Messenger","Alert","Peer","io","VideoPage","isAdmin","window","location","hash","id","url","origin","pathname","meetingInfoPopUp","setMeetingInfoPopUp","isMessenger","setMessenger"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AAEA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,kBAAtC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,EAAP,MAAe,kBAAf;;;AACA,SAASC,SAAT,GAAqB;AAAA;;AACpB,QAAMC,OAAO,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,KAAyB,OAAzB,GAAmC,IAAnC,GAA0C,KAA1D,CADoB,CAGpB;AACA;;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAASf,SAAS,EAAxB,CANoB,CAQpB;;AACA,QAAMgB,GAAG,GAAI,GAAEJ,MAAM,CAACC,QAAP,CAAgBI,MAAO,GAAEL,MAAM,CAACC,QAAP,CAAgBK,QAAS,EAAjE;AAEA,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CxB,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAACyB,WAAD,EAAcC,YAAd,IAA8B1B,QAAQ,CAAC,KAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIc,OAAJ,EAAa;AACZS,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACA;AACD,GAJQ,EAIN,EAJM,CAAT,CAdoB,CAoBpsBACC;AAAK,IAAA,KAAK,EAAC,aAAX;AAAA,4BACC,QAAC,aAAD;AACC,MAAA,YAAY,EAAEE,YADf,CAEC;AACA;AACA;AACY;AALb;AAMC,MAAA,OAAO,EAAEX,OANV;AAOC,MAAA,EAAE,EAAEI,EAPL,CAQC;;AARD;AAAA;AAAA;AAAA;AAAA,YADD,eAWC,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YAXD,EAYEJ,OAAO,IAAIQ,gBAAX,iBACA,QAAC,WAAD;AAAa,MAAA,GAAG,EAAEH,GAAlB;AAAuB,MAAA,mBAAmB,EAAEI;AAA5C;AAAA;AAAA;AAAA;AAAA,YAbF,EAeEC,WAAW,gBACX,QAAC,SAAD;AACC,MAAA,YAAY,EAAEC,YADf,CAEC;;AAFD;AAAA;AAAA;AAAA;AAAA,YADW,gBAMX,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YArBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AA0BA;;GAxMQZ,S;UAMOV,S;;;KANPU,S;AA0MT,eAAeA,SAAf","sourcesContent":["import react, { useState, useEffect, useReducer, useRef } from \"react\";\r\n\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport MeetingHeader from \"./meetingHeader\";\r\nimport MeetingFooter from \"./meetingFooter\";\r\nimport MeetingInfo from \"./meetingInfo\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Messenger from \"./messenger\";\r\nimport Alert from \"./alert\";\r\nimport Peer from \"simple-peer\";\r\nimport io from \"socket.io-client\";\r\nfunction VideoPage() {\r\n\tconst isAdmin = window.location.hash === \"#init\" ? true : false;\r\n\r\n\t//#init\r\n\t// console.log(window.location.hash);\r\n\r\n\tconst { id } = useParams();\r\n\r\n\t// let peer = null;\r\n\tconst url = `${window.location.origin}${window.location.pathname}`;\r\n\r\n\tconst [meetingInfoPopUp, setMeetingInfoPopUp] = useState(false);\r\n\tconst [isMessenger, setMessenger] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (isAdmin) {\r\n\t\t\tsetMeetingInfoPopUp(true);\r\n\t\t}\r\n\t}, []);\r\n\r\n\t// const vidStyle = {\r\n\t// \t// height: \"calc(50vh -90px)\",\r\n\t// \t// borderRadius:\"10px\"\r\n\t// \theight: \"45%\",\r\n\t// \twidth: \"45%\",\r\n\r\n\t// \tpadding: \"10px\",\r\n\t// \tpaddingBottom: \"5px\",\r\n\t// };\r\n\r\n\t// const Video = (props) => {\r\n\t// \tconst ref = useRef();\r\n\r\n\t// \tuseEffect(() => {\r\n\t// \t\tconsole.log(props.peer);\r\n\t// \t\tprops.peer.on(\"stream\", (stream) => {\r\n\t// \t\t\tconsole.log(\"ENTE0RD\" + stream);\r\n\t// \t\t\tref.current.srcObject = stream;\r\n\t// \t\t});\r\n\t// \t}, []);\r\n\r\n\t// \treturn <video style={vidStyle} autoPlay ref={ref} />;\r\n\t// };\r\n\r\n\t// const videoConstraints = {\r\n\t// \theight: window.innerHeight / 2,\r\n\t// \twidth: window.innerWidth / 2,\r\n\t// };\r\n\r\n\t// const Room = (props) => {\r\n\t// \tconst numUsers = useRef();\r\n\t// \tconst [peers, setPeers] = useState([]);\r\n\t// \tconst socketRef = useRef();\r\n\t// \tconst userVideo = useRef();\r\n\t// \tconst peersRef = useRef([]);\r\n\t// \tconst roomID = props.id;\r\n\r\n\t// \tuseEffect(() => {\r\n\t// \t\tsocketRef.current = io.connect(\"http://localhost:9000\");\r\n\t// \t\tnavigator.mediaDevices\r\n\t// \t\t\t.getUserMedia({ video: videoConstraints, audio: true })\r\n\t// \t\t\t.then((stream) => {\r\n\t// \t\t\t\t// userVideo.current.srcObject = stream;\r\n\t// \t\t\t\tlet video = document.getElementById(\"video\");\r\n\r\n\t// \t\t\t\tif (\"srcObject\" in video) {\r\n\t// \t\t\t\t\tvideo.srcObject = stream;\r\n\t// \t\t\t\t} else {\r\n\t// \t\t\t\t\tvideo.src = window.URL.createObjectURL(stream); // for older browsers\r\n\t// \t\t\t\t}\r\n\r\n\t// \t\t\t\tvideo.play();\r\n\t// \t\t\t\tconsole.log(\"USERVIDEO\" + stream);\r\n\t// \t\t\t\t// LOGIC THAT USER HAS JOINED THE ROOM\r\n\r\n\t// \t\t\t\t//THIS EVENT Is NOT CACHED AT BACKEND\r\n\t// \t\t\t\t//.emit means sending  to backend\r\n\t// \t\t\t\tsocketRef.current.emit(\"JOINED ROOM\");\r\n\t// \t\t\t\tsocketRef.current.emit(\"join room\", roomID);\r\n\t// \t\t\t\t// Recieve users from backened\r\n    //                 console.log(isAdmin);\r\n\t// \t\t\t\tif (!isAdmin) {\r\n\t// \t\t\t\t\tsocketRef.current.on(\"all users\", (users) => {\r\n\t// \t\t\t\t\t\t//peers is for how many videos are rendering\r\n\t// \t\t\t\t\t\tconsole.log(users.length);\r\n\t// \t\t\t\t\t\tnumUsers.current = users.length + 1;\r\n\t// \t\t\t\t\t\tconst peersForVideo = [];\r\n\t// \t\t\t\t\t\tusers.forEach((userID) => {\r\n\t// \t\t\t\t\t\t\tconsole.log(userID + \" USER ID OF USER IN THE ROOM \");\r\n\t// \t\t\t\t\t\t\tconsole.log(socketRef.current);\r\n\t// \t\t\t\t\t\t\t//socketRef.current.id is the of user currently joined\r\n\t// \t\t\t\t\t\t\t// UserID  id's of all those inside the meeting\r\n\r\n\t// \t\t\t\t\t\t\tconst peer = createPeer(userID, socketRef.current.id, stream);\r\n\t// \t\t\t\t\t\t\t//peersRef is for which is having connection with which\r\n\t// \t\t\t\t\t\t\tpeersRef.current.push({\r\n\t// \t\t\t\t\t\t\t\tpeerID: userID,\r\n\t// \t\t\t\t\t\t\t\tpeer,\r\n\t// \t\t\t\t\t\t\t});\r\n\r\n\t// \t\t\t\t\t\t\tpeersForVideo.push(peer);\r\n\t// \t\t\t\t\t\t});\r\n\t// \t\t\t\t\t\tsetPeers(peersForVideo);\r\n\t// \t\t\t\t\t\tconsole.log(peers);\r\n\t// \t\t\t\t\t});\r\n\t// \t\t\t\t\t//PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\r\n\t// \t\t\t\t\t//.on means recieving from backend\r\n\t// \t\t\t\t\tsocketRef.current.on(\"user joined\", (payload) => {\r\n\t// \t\t\t\t\t\tconst peer = addPeer(payload.signal, payload.callerID, stream);\r\n\r\n\t// \t\t\t\t\t\tpeersRef.current.push({\r\n\t// \t\t\t\t\t\t\tpeerID: payload.callerID,\r\n\t// \t\t\t\t\t\t\tpeer,\r\n\t// \t\t\t\t\t\t});\r\n\t// \t\t\t\t\t\tsetPeers((users) => [...users, peer]);\r\n\t// \t\t\t\t\t});\r\n\t// \t\t\t\t\tsocketRef.current.on(\"receiving returned signal\", (payload) => {\r\n\t// \t\t\t\t\t\t// signal has been send to multiple now multiple users are sending back the signal to caller\r\n\t// \t\t\t\t\t\tconst item = peersRef.current.find(\r\n\t// \t\t\t\t\t\t\t(p) => p.peerID === payload.id\r\n\t// \t\t\t\t\t\t);\r\n\t// \t\t\t\t\t\tconsole.log(item);\r\n\t// \t\t\t\t\t\titem.peer.signal(payload.signal);\r\n\t// \t\t\t\t\t});\r\n\t// \t\t\t\t}\r\n\t// \t\t\t});\r\n\t// \t}, []);\r\n\t// \tfunction createPeer(userToSignal, callerID, stream) {\r\n\t// \t\tconsole.log(\"CREATE PEER\");\r\n\t// \t\tconst peer = new Peer({\r\n\t// \t\t\tinitiator: true,\r\n\t// \t\t\t//trickle wait for all the data to send makes it slow\r\n\t// \t\t\ttrickle: false,\r\n\t// \t\t\tstream,\r\n\t// \t\t});\r\n\t// \t\t//generates signal\r\n\t// \t\t//sending to backend\r\n\t// \t\tpeer.on(\"signal\", (signal) => {\r\n\t// \t\t\tsocketRef.current.emit(\"sending signal\", {\r\n\t// \t\t\t\tuserToSignal,\r\n\t// \t\t\t\tcallerID,\r\n\t// \t\t\t\tsignal,\r\n\t// \t\t\t});\r\n\t// \t\t});\r\n\t// \t\treturn peer;\r\n\t// \t}\r\n\r\n\t// \tfunction addPeer(incomingSignal, callerID, stream) {\r\n\t// \t\tconsole.log(\"Add Peer\");\r\n\t// \t\tconst peer = new Peer({\r\n\t// \t\t\tinitiator: false,\r\n\t// \t\t\ttrickle: false,\r\n\t// \t\t\tstream,\r\n\t// \t\t});\r\n\t// \t\t// 1 accepting the incoming signal that this will return the signal\r\n\t// \t\tpeer.signal(incomingSignal);\r\n\r\n\t// \t\tpeer.on(\"signal\", (signal) => {\r\n\t// \t\t\tsocketRef.current.emit(\"returning signal\", { signal, callerID });\r\n\t// \t\t});\r\n\t// \t\treturn peer;\r\n\t// \t}\r\n\r\n\t// \t// console.log(\"PEERS \" + JSON.stringify(peers));\r\n\t// \treturn (\r\n\t// \t\t<div className=\"container\">\r\n\t// \t\t\t<video id=\"video\" style={vidStyle} muted ref={userVideo} autoPlay />\r\n\t// \t\t\t{peers.map((peer, index) => {\r\n\t// \t\t\t\treturn <Video key={index} peer={peer} />;\r\n\t// \t\t\t})}\r\n\t// \t\t</div>\r\n\t// \t);\r\n\t// };\r\n\r\n\treturn (\r\n\t\t<div class=\"videoScreen\">\r\n\t\t\t<MeetingHeader\r\n\t\t\t\tsetMessenger={setMessenger}\r\n\t\t\t\t// peers={peers}\r\n\t\t\t\t// userVideo={userVideo}\r\n\t\t\t\t// Video={Video}\r\n                // ref={userVideo}\r\n\t\t\t\tisAdmin={isAdmin}\r\n\t\t\t\tid={id}\r\n\t\t\t\t// Room={Room}\r\n\t\t\t/>\r\n\t\t\t<MeetingFooter />\r\n\t\t\t{isAdmin && meetingInfoPopUp && (\r\n\t\t\t\t<MeetingInfo url={url} setMeetingInfoPopUp={setMeetingInfoPopUp} />\r\n\t\t\t)}\r\n\t\t\t{isMessenger ? (\r\n\t\t\t\t<Messenger\r\n\t\t\t\t\tsetMessenger={setMessenger}\r\n\t\t\t\t\t// messageList={messageList}\r\n\t\t\t\t/>\r\n\t\t\t) : (\r\n\t\t\t\t<Alert />\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default VideoPage;\r\n"]},"metadata":{},"sourceType":"module"}