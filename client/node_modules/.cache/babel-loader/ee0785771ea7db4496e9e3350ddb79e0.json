{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayka\\\\web development\\\\google-meet\\\\client\\\\src\\\\components\\\\vedioPage.js\",\n    _s = $RefreshSig$();\n\nimport react, { useState, useEffect, useReducer, useRef, createRef } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport MeetingHeader from \"./meetingHeader\";\nimport MeetingFooter from \"./meetingFooter\";\nimport MeetingInfo from \"./meetingInfo\";\nimport styled from \"styled-components\";\nimport Messenger from \"./messenger\";\nimport Alert from \"./alert\";\nimport Peer from \"simple-peer\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction VideoPage() {\n  _s();\n\n  const isAdmin = window.location.hash === \"#init\" ? true : false; //#init\n  // console.log(window.location.hash);\n\n  const {\n    id\n  } = useParams(); // let peer = null;\n\n  const url = `${window.location.origin}${window.location.pathname}`;\n  const [meetingInfoPopUp, setMeetingInfoPopUp] = useState(false);\n  const [isMessenger, setMessenger] = useState(false); // const [peers, setPeers] = useState([]);\n  // const socketRef = useRef();\n  // const userVideo = useRef();\n  // const peersRef = useRef([]);\n  // const roomID = id;\n  // const videoConstraints = {\n  // \theight: window.innerHeight / 2,\n  // \twidth: window.innerWidth / 2,\n  // };\n  // useEffect(() => {\n  // \tif (isAdmin) {\n  // \t\tsetMeetingInfoPopUp(true);\n  // \t}\n  // \troom();\n  // }, []);\n  // //ID ,Admin\n  // const room = () => {\n  // \tsocketRef.current = io.connect(\"http://localhost:9000\");\n  // \tnavigator.mediaDevices\n  // \t\t.getUserMedia({ video: videoConstraints, audio: true })\n  // \t\t.then((stream) => {\n  // \t\t\tuserVideo.current.srcObject = stream;\n  // \t\t\tconsole.log(\"USERVIDEO\" + stream);\n  // \t\t\t// LOGIC THAT USER HAS JOINED THE ROOM\n  // \t\t\t//THIS EVENT Is NOT CACHED AT BACKEND\n  // \t\t\t//.emit means sending  to backend\n  // \t\t\tsocketRef.current.emit(\"JOINED ROOM\");\n  // \t\t\tsocketRef.current.emit(\"join room\", roomID);\n  // \t\t\t// Recieve users from backened\n  // \t\t\t// if (!props.isAdmin) {\n  // \t\t\tsocketRef.current.on(\"all users\", (users) => {\n  // \t\t\t\t//peers is for how many videos are rendering\n  // \t\t\t\tconsole.log(\"ALL USERS\")\n  // \t\t\t\tconst peersForVideo = [];\n  // \t\t\t\tusers.forEach((userID) => {\n  // \t\t\t\t\tconsole.log(userID + \" USER ID OF USER IN THE ROOM \");\n  // \t\t\t\t\tconsole.log(socketRef.current);\n  // \t\t\t\t\t//socketRef.current.id is the of user currently joined\n  // \t\t\t\t\t// UserID  id's of all those inside the meeting\n  // \t\t\t\t\tconst peer = createPeer(userID, socketRef.current.id, stream);\n  // \t\t\t\t\t//peersRef is for which is having connection with which\n  // \t\t\t\t\tpeersRef.current.push({\n  // \t\t\t\t\t\tpeerID: userID,\n  // \t\t\t\t\t\tpeer,\n  // \t\t\t\t\t});\n  // \t\t\t\t\tpeersForVideo.push(peer);\n  // \t\t\t\t});\n  // \t\t\t\tsetPeers(peersForVideo);\n  // \t\t\t\tconsole.log(peers);\n  // \t\t\t});\n  // \t\t\t//PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\n  // \t\t\t//.on means recieving from backend\n  // \t\t\tsocketRef.current.on(\"user joined\", (payload) => {\n  // \t\t\t\tconst peer = addPeer(payload.signal, payload.callerID, stream);\n  // \t\t\t\tpeersRef.current.push({\n  // \t\t\t\t\tpeerID: payload.callerID,\n  // \t\t\t\t\tpeer,\n  // \t\t\t\t});\n  // \t\t\t\tsetPeers((users) => [...users, peer]);\n  // \t\t\t});\n  // \t\t\tsocketRef.current.on(\"receiving returned signal\", (payload) => {\n  // \t\t\t\t// signal has been send to multiple now multiple users are sending back the signal to caller\n  // \t\t\t\tconst item = peersRef.current.find((p) => p.peerID === payload.id);\n  // \t\t\t\tconsole.log(item);\n  // \t\t\t\titem.peer.signal(payload.signal);\n  // \t\t\t});\n  // \t\t\t// }\n  // \t\t});\n  // };\n  // function createPeer(userToSignal, callerID, stream) {\n  // \tconsole.log(\"CREATE PEER\");\n  // \tconst peer = new Peer({\n  // \t\tinitiator: true,\n  // \t\t//trickle wait for all the data to send makes it slow\n  // \t\ttrickle: false,\n  // \t\tstream,\n  // \t});\n  // \t//generates signal\n  // \t//sending to backend\n  // \tpeer.on(\"signal\", (signal) => {\n  // \t\tsocketRef.current.emit(\"sending signal\", {\n  // \t\t\tuserToSignal,\n  // \t\t\tcallerID,\n  // \t\t\tsignal,\n  // \t\t});\n  // \t});\n  // \treturn peer;\n  // }\n  // function addPeer(incomingSignal, callerID, stream) {\n  // \tconsole.log(\"Add Peer\");\n  // \tconst peer = new Peer({\n  // \t\tinitiator: false,\n  // \t\ttrickle: false,\n  // \t\tstream,\n  // \t});\n  // \t// 1 accepting the incoming signal that this will return the signal\n  // \tpeer.signal(incomingSignal);\n  // \tpeer.on(\"signal\", (signal) => {\n  // \t\tsocketRef.current.emit(\"returning signal\", { signal, callerID });\n  // \t});\n  // \treturn peer;\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"videoScreen\",\n    children: [/*#__PURE__*/_jsxDEV(MeetingHeader, {\n      setMessenger: setMessenger // Room={Room}\n      // peers={peers}\n      // userVideo={userVideo}\n      ,\n      isAdmin: isAdmin,\n      id: id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MeetingFooter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 4\n    }, this), isAdmin && meetingInfoPopUp && /*#__PURE__*/_jsxDEV(MeetingInfo, {\n      url: url,\n      setMeetingInfoPopUp: setMeetingInfoPopUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 5\n    }, this), isMessenger ? /*#__PURE__*/_jsxDEV(Messenger, {\n      setMessenger: setMessenger // messageList={messageList}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(Alert, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 3\n  }, this);\n}\n\n_s(VideoPage, \"pbE4+qXPXAajZVDHVgnEYO0FK4E=\", false, function () {\n  return [useParams];\n});\n\n_c = VideoPage;\nexport default VideoPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoPage\");","map":{"version":3,"sources":["C:/Users/jayka/web development/google-meet/client/src/components/vedioPage.js"],"names":["react","useState","useEffect","useReducer","useRef","createRef","useParams","useHistory","MeetingHeader","MeetingFooter","MeetingInfo","styled","Messenger","Alert","Peer","io","VideoPage","isAdmin","window","location","hash","id","url","origin","pathname","meetingInfoPopUp","setMeetingInfoPopUp","isMessenger","setMessenger"],"mappings":";;;AAAA,OAAOA,KAAP,IACCC,QADD,EAECC,SAFD,EAGCC,UAHD,EAICC,MAJD,EAKCC,SALD,QAMO,OANP;AAQA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,kBAAtC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,EAAP,MAAe,kBAAf;;;AAEA,SAASC,SAAT,GAAqB;AAAA;;AACpB,QAAMC,OAAO,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,KAAyB,OAAzB,GAAmC,IAAnC,GAA0C,KAA1D,CADoB,CAGpB;AACA;;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAASf,SAAS,EAAxB,CANoB,CAQpB;;AACA,QAAMgB,GAAG,GAAI,GAAEJ,MAAM,CAACC,QAAP,CAAgBI,MAAO,GAAEL,MAAM,CAACC,QAAP,CAAgBK,QAAS,EAAjE;AAEA,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CzB,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAAC0B,WAAD,EAAcC,YAAd,IAA8B3B,QAAQ,CAAC,KAAD,CAA5C,CAZoB,CAapsBACC;AAAK,IAAA,KAAK,EAAC,aAAX;AAAA,4BACC,QAAC,aAAD;AACC,MAAA,YAAY,EAAE2B,YADf,CAEC;AACA;AACA;AAJD;AAKC,MAAA,OAAO,EAAEX,OALV;AAMC,MAAA,EAAE,EAAEI;AANL;AAAA;AAAA;AAAA;AAAA,YADD,eASC,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YATD,EAUEJ,OAAO,IAAIQ,gBAAX,iBACA,QAAC,WAAD;AAAa,MAAA,GAAG,EAAEH,GAAlB;AAAuB,MAAA,mBAAmB,EAAEI;AAA5C;AAAA;AAAA;AAAA;AAAA,YAXF,EAaEC,WAAW,gBACX,QAAC,SAAD;AACC,MAAA,YAAY,EAAEC,YADf,CAEC;;AAFD;AAAA;AAAA;AAAA;AAAA,YADW,gBAMX,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YAnBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAwBA;;GA3JQZ,S;UAMOV,S;;;KANPU,S;AA6JT,eAAeA,SAAf","sourcesContent":["import react, {\r\n\tuseState,\r\n\tuseEffect,\r\n\tuseReducer,\r\n\tuseRef,\r\n\tcreateRef,\r\n} from \"react\";\r\n\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport MeetingHeader from \"./meetingHeader\";\r\nimport MeetingFooter from \"./meetingFooter\";\r\nimport MeetingInfo from \"./meetingInfo\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Messenger from \"./messenger\";\r\nimport Alert from \"./alert\";\r\nimport Peer from \"simple-peer\";\r\nimport io from \"socket.io-client\";\r\n\r\nfunction VideoPage() {\r\n\tconst isAdmin = window.location.hash === \"#init\" ? true : false;\r\n\r\n\t//#init\r\n\t// console.log(window.location.hash);\r\n\r\n\tconst { id } = useParams();\r\n\r\n\t// let peer = null;\r\n\tconst url = `${window.location.origin}${window.location.pathname}`;\r\n\r\n\tconst [meetingInfoPopUp, setMeetingInfoPopUp] = useState(false);\r\n\tconst [isMessenger, setMessenger] = useState(false);\r\n\t// const [peers, setPeers] = useState([]);\r\n\t// const socketRef = useRef();\r\n\t// const userVideo = useRef();\r\n\t// const peersRef = useRef([]);\r\n\t// const roomID = id;\r\n\r\n\t// const videoConstraints = {\r\n\t// \theight: window.innerHeight / 2,\r\n\t// \twidth: window.innerWidth / 2,\r\n\t// };\r\n\r\n\t// useEffect(() => {\r\n\t// \tif (isAdmin) {\r\n\t// \t\tsetMeetingInfoPopUp(true);\r\n\t// \t}\r\n\t// \troom();\r\n\t// }, []);\r\n\r\n\t// //ID ,Admin\r\n\r\n\t// const room = () => {\r\n\t// \tsocketRef.current = io.connect(\"http://localhost:9000\");\r\n\t// \tnavigator.mediaDevices\r\n\t// \t\t.getUserMedia({ video: videoConstraints, audio: true })\r\n\t// \t\t.then((stream) => {\r\n\t// \t\t\tuserVideo.current.srcObject = stream;\r\n\r\n\t// \t\t\tconsole.log(\"USERVIDEO\" + stream);\r\n\t// \t\t\t// LOGIC THAT USER HAS JOINED THE ROOM\r\n\r\n\t// \t\t\t//THIS EVENT Is NOT CACHED AT BACKEND\r\n\t// \t\t\t//.emit means sending  to backend\r\n\t// \t\t\tsocketRef.current.emit(\"JOINED ROOM\");\r\n\t// \t\t\tsocketRef.current.emit(\"join room\", roomID);\r\n\t// \t\t\t// Recieve users from backened\r\n\t// \t\t\t// if (!props.isAdmin) {\r\n\r\n\t// \t\t\tsocketRef.current.on(\"all users\", (users) => {\r\n\t// \t\t\t\t//peers is for how many videos are rendering\r\n\r\n\t// \t\t\t\tconsole.log(\"ALL USERS\")\r\n\t// \t\t\t\tconst peersForVideo = [];\r\n\t// \t\t\t\tusers.forEach((userID) => {\r\n\t// \t\t\t\t\tconsole.log(userID + \" USER ID OF USER IN THE ROOM \");\r\n\t// \t\t\t\t\tconsole.log(socketRef.current);\r\n\t// \t\t\t\t\t//socketRef.current.id is the of user currently joined\r\n\t// \t\t\t\t\t// UserID  id's of all those inside the meeting\r\n\r\n\t// \t\t\t\t\tconst peer = createPeer(userID, socketRef.current.id, stream);\r\n\t// \t\t\t\t\t//peersRef is for which is having connection with which\r\n\t// \t\t\t\t\tpeersRef.current.push({\r\n\t// \t\t\t\t\t\tpeerID: userID,\r\n\t// \t\t\t\t\t\tpeer,\r\n\t// \t\t\t\t\t});\r\n\r\n\t// \t\t\t\t\tpeersForVideo.push(peer);\r\n\t// \t\t\t\t});\r\n\r\n\t// \t\t\t\tsetPeers(peersForVideo);\r\n\t// \t\t\t\tconsole.log(peers);\r\n\t// \t\t\t});\r\n\t// \t\t\t//PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\r\n\t// \t\t\t//.on means recieving from backend\r\n\t// \t\t\tsocketRef.current.on(\"user joined\", (payload) => {\r\n\t// \t\t\t\tconst peer = addPeer(payload.signal, payload.callerID, stream);\r\n\r\n\t// \t\t\t\tpeersRef.current.push({\r\n\t// \t\t\t\t\tpeerID: payload.callerID,\r\n\t// \t\t\t\t\tpeer,\r\n\t// \t\t\t\t});\r\n\t// \t\t\t\tsetPeers((users) => [...users, peer]);\r\n\t// \t\t\t});\r\n\t// \t\t\tsocketRef.current.on(\"receiving returned signal\", (payload) => {\r\n\t// \t\t\t\t// signal has been send to multiple now multiple users are sending back the signal to caller\r\n\t// \t\t\t\tconst item = peersRef.current.find((p) => p.peerID === payload.id);\r\n\t// \t\t\t\tconsole.log(item);\r\n\t// \t\t\t\titem.peer.signal(payload.signal);\r\n\t// \t\t\t});\r\n\t// \t\t\t// }\r\n\t// \t\t});\r\n\t// };\r\n\r\n\t// function createPeer(userToSignal, callerID, stream) {\r\n\t// \tconsole.log(\"CREATE PEER\");\r\n\t// \tconst peer = new Peer({\r\n\t// \t\tinitiator: true,\r\n\t// \t\t//trickle wait for all the data to send makes it slow\r\n\t// \t\ttrickle: false,\r\n\t// \t\tstream,\r\n\t// \t});\r\n\t// \t//generates signal\r\n\t// \t//sending to backend\r\n\t// \tpeer.on(\"signal\", (signal) => {\r\n\t// \t\tsocketRef.current.emit(\"sending signal\", {\r\n\t// \t\t\tuserToSignal,\r\n\t// \t\t\tcallerID,\r\n\t// \t\t\tsignal,\r\n\t// \t\t});\r\n\t// \t});\r\n\t// \treturn peer;\r\n\t// }\r\n\r\n\t// function addPeer(incomingSignal, callerID, stream) {\r\n\t// \tconsole.log(\"Add Peer\");\r\n\t// \tconst peer = new Peer({\r\n\t// \t\tinitiator: false,\r\n\t// \t\ttrickle: false,\r\n\t// \t\tstream,\r\n\t// \t});\r\n\t// \t// 1 accepting the incoming signal that this will return the signal\r\n\t// \tpeer.signal(incomingSignal);\r\n\r\n\t// \tpeer.on(\"signal\", (signal) => {\r\n\t// \t\tsocketRef.current.emit(\"returning signal\", { signal, callerID });\r\n\t// \t});\r\n\t// \treturn peer;\r\n\t// }\r\n\r\n\treturn (\r\n\t\t<div class=\"videoScreen\">\r\n\t\t\t<MeetingHeader\r\n\t\t\t\tsetMessenger={setMessenger}\r\n\t\t\t\t// Room={Room}\r\n\t\t\t\t// peers={peers}\r\n\t\t\t\t// userVideo={userVideo}\r\n\t\t\t\tisAdmin={isAdmin}\r\n\t\t\t\tid={id}\r\n\t\t\t/>\r\n\t\t\t<MeetingFooter />\r\n\t\t\t{isAdmin && meetingInfoPopUp && (\r\n\t\t\t\t<MeetingInfo url={url} setMeetingInfoPopUp={setMeetingInfoPopUp} />\r\n\t\t\t)}\r\n\t\t\t{isMessenger ? (\r\n\t\t\t\t<Messenger\r\n\t\t\t\t\tsetMessenger={setMessenger}\r\n\t\t\t\t\t// messageList={messageList}\r\n\t\t\t\t/>\r\n\t\t\t) : (\r\n\t\t\t\t<Alert />\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default VideoPage;\r\n"]},"metadata":{},"sourceType":"module"}