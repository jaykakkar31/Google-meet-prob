{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayka\\\\web development\\\\google-meet\\\\client\\\\src\\\\components\\\\meetingHeader.js\",\n    _s = $RefreshSig$();\n\nimport react, { useEffect, useState, useRef } from \"react\";\nimport PeopleIcon from \"@material-ui/icons/People\";\nimport ChatBubbleIcon from \"@material-ui/icons/ChatBubble\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\nimport Room from \"./Room\"; //use for time\n\nimport moment from \"moment\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MeetingHeader({\n  setMessenger,\n  id,\n  isAdmin\n}) {\n  _s();\n\n  // useEffect(() => {\n  // \t\tconst vidStyle = {\n  // \t\t\t// height: \"calc(50vh -90px)\",\n  // \t\t\t// borderRadius:\"10px\"\n  // \t\t\theight: \"45%\",\n  // \t\t\twidth: \"45%\",\n  // \t\t\tpadding: \"10px\",\n  // \t\t\tpaddingBottom: \"5px\",\n  // \t\t};\n  // \t\tconst Video = (props) => {\n  // \t\t\tconst ref = useRef();\n  // \t\t\tuseEffect(() => {\n  // \t\t\t\tconsole.log(props.peer);\n  // \t\t\t\tprops.peer.on(\"stream\", (stream) => {\n  // \t\t\t\t\tconsole.log(\"ENTE0RD\" + stream);\n  // \t\t\t\t\tref.current.srcObject = stream;\n  // \t\t\t\t});\n  // \t\t\t}, []);\n  // \t\t\treturn <video style={vidStyle} autoPlay ref={ref} />;\n  // \t\t};\n  // \t\tconst videoConstraints = {\n  // \t\t\theight: window.innerHeight / 2,\n  // \t\t\twidth: window.innerWidth / 2,\n  // \t\t};\n  // \t\tconst Room = (props) => {\n  // \t\t\tconst numUsers = useRef();\n  // \t\t\tconst [peers, setPeers] = useState([]);\n  // \t\t\tconst socketRef = useRef();\n  // \t\t\tconst userVideo = useRef();\n  // \t\t\tconst peersRef = useRef([]);\n  // \t\t\tconst roomID = props.id;\n  // \t\t\tuseEffect(() => {\n  // \t\t\t\tsocketRef.current = io.connect(\"http://localhost:9000\");\n  // \t\t\t\tnavigator.mediaDevices\n  // \t\t\t\t\t.getUserMedia({ video: videoConstraints, audio: true })\n  // \t\t\t\t\t.then((stream) => {\n  // \t\t\t\t\t\tuserVideo.current.srcObject = stream;\n  // \t\t\t\t\t\tconsole.log(\"USERVIDEO\" + stream);\n  // \t\t\t\t\t\t// LOGIC THAT USER HAS JOINED THE ROOM\n  // \t\t\t\t\t\t//THIS EVENT Is NOT CACHED AT BACKEND\n  // \t\t\t\t\t\t//.emit means sending  to backend\n  // \t\t\t\t\t\tsocketRef.current.emit(\"JOINED ROOM\");\n  // \t\t\t\t\t\tsocketRef.current.emit(\"join room\", roomID);\n  // \t\t\t\t\t\t// Recieve users from backened\n  // \t\t\t\t\t\t// if (!props.isAdmin) {\n  // \t\t\t\t\t\tsocketRef.current.on(\"all users\", (users) => {\n  // \t\t\t\t\t\t\t//peers is for how many videos are rendering\n  // \t\t\t\t\t\t\tconsole.log(users.length);\n  // \t\t\t\t\t\t\tnumUsers.current = users.length + 1;\n  // \t\t\t\t\t\t\tconst peersForVideo = [];\n  // \t\t\t\t\t\t\tusers.forEach((userID) => {\n  // \t\t\t\t\t\t\t\tconsole.log(userID + \" USER ID OF USER IN THE ROOM \");\n  // \t\t\t\t\t\t\t\tconsole.log(socketRef.current);\n  // \t\t\t\t\t\t\t\t//socketRef.current.id is the of user currently joined\n  // \t\t\t\t\t\t\t\t// UserID  id's of all those inside the meeting\n  // \t\t\t\t\t\t\t\tconst peer = createPeer(userID, socketRef.current.id, stream);\n  // \t\t\t\t\t\t\t\t//peersRef is for which is having connection with which\n  // \t\t\t\t\t\t\t\tpeersRef.current.push({\n  // \t\t\t\t\t\t\t\t\tpeerID: userID,\n  // \t\t\t\t\t\t\t\t\tpeer,\n  // \t\t\t\t\t\t\t\t});\n  // \t\t\t\t\t\t\t\tpeersForVideo.push(peer);\n  // \t\t\t\t\t\t\t});\n  // \t\t\t\t\t\t\tsetPeers(peersForVideo);\n  // \t\t\t\t\t\t\tconsole.log(peers);\n  // \t\t\t\t\t\t});\n  // \t\t\t\t\t\t//PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\n  // \t\t\t\t\t\t//.on means recieving from backend\n  // \t\t\t\t\t\tsocketRef.current.on(\"user joined\", (payload) => {\n  // \t\t\t\t\t\t\tconst peer = addPeer(payload.signal, payload.callerID, stream);\n  // \t\t\t\t\t\t\tpeersRef.current.push({\n  // \t\t\t\t\t\t\t\tpeerID: payload.callerID,\n  // \t\t\t\t\t\t\t\tpeer,\n  // \t\t\t\t\t\t\t});\n  // \t\t\t\t\t\t\tsetPeers((users) => [...users, peer]);\n  // \t\t\t\t\t\t});\n  // \t\t\t\t\t\tsocketRef.current.on(\"receiving returned signal\", (payload) => {\n  // \t\t\t\t\t\t\t// signal has been send to multiple now multiple users are sending back the signal to caller\n  // \t\t\t\t\t\t\tconst item = peersRef.current.find(\n  // \t\t\t\t\t\t\t\t(p) => p.peerID === payload.id\n  // \t\t\t\t\t\t\t);\n  // \t\t\t\t\t\t\tconsole.log(item);\n  // \t\t\t\t\t\t\titem.peer.signal(payload.signal);\n  // \t\t\t\t\t\t});\n  // \t\t\t\t\t\t// }\n  // \t\t\t\t\t});\n  // \t\t\t}, []);\n  // \t\t\tfunction createPeer(userToSignal, callerID, stream) {\n  // \t\t\t\tconsole.log(\"CREATE PEER\");\n  // \t\t\t\tconst peer = new Peer({\n  // \t\t\t\t\tinitiator: true,\n  // \t\t\t\t\t//trickle wait for all the data to send makes it slow\n  // \t\t\t\t\ttrickle: false,\n  // \t\t\t\t\tstream,\n  // \t\t\t\t});\n  // \t\t\t\t//generates signal\n  // \t\t\t\t//sending to backend\n  // \t\t\t\tpeer.on(\"signal\", (signal) => {\n  // \t\t\t\t\tsocketRef.current.emit(\"sending signal\", {\n  // \t\t\t\t\t\tuserToSignal,\n  // \t\t\t\t\t\tcallerID,\n  // \t\t\t\t\t\tsignal,\n  // \t\t\t\t\t});\n  // \t\t\t\t});\n  // \t\t\t\treturn peer;\n  // \t\t\t}\n  // \t\t\tfunction addPeer(incomingSignal, callerID, stream) {\n  // \t\t\t\tconsole.log(\"Add Peer\");\n  // \t\t\t\tconst peer = new Peer({\n  // \t\t\t\t\tinitiator: false,\n  // \t\t\t\t\ttrickle: false,\n  // \t\t\t\t\tstream,\n  // \t\t\t\t});\n  // \t\t\t\t// 1 accepting the incoming signal that this will return the signal\n  // \t\t\t\tpeer.signal(incomingSignal);\n  // \t\t\t\tpeer.on(\"signal\", (signal) => {\n  // \t\t\t\t\tsocketRef.current.emit(\"returning signal\", { signal, callerID });\n  // \t\t\t\t});\n  // \t\t\t\treturn peer;\n  // \t\t\t}\n  // \t\t\t// console.log(\"PEERS \" + JSON.stringify(peers));\n  // \t\t\treturn (\n  // \t\t\t\t<div className=\"container\">\n  // \t\t\t\t\t<video style={vidStyle} muted ref={userVideo} autoPlay />\n  // \t\t\t\t\t{peers.map((peer, index) => {\n  // \t\t\t\t\t\treturn <Video key={index} peer={peer} />;\n  // \t\t\t\t\t})}\n  // \t\t\t\t</div>\n  // \t\t\t);\n  // \t\t};\n  // \t}, []);\n  const formatDate = () => {\n    return moment().format(\"LT\");\n  };\n\n  const [currentTime, setCurrentTime] = useState(() => {\n    formatDate();\n  });\n  useEffect(() => {\n    setInterval(() => setCurrentTime(formatDate()), 1000);\n    console.log(currentTime);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Room, {\n      id: id,\n      isAdmin: isAdmin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"frame-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"header-items icon-block\",\n        children: /*#__PURE__*/_jsxDEV(PeopleIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"header-items icon-block\",\n        onClick: () => {\n          setMessenger(true);\n        },\n        children: /*#__PURE__*/_jsxDEV(ChatBubbleIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"header-items date-block\",\n        children: currentTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"header-items icon-block\",\n        children: /*#__PURE__*/_jsxDEV(AccountCircleIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 3\n  }, this);\n}\n\n_s(MeetingHeader, \"vw8Qg2G0cfGfODiQGue5zh5upcA=\");\n\n_c = MeetingHeader;\nexport default MeetingHeader;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetingHeader\");","map":{"version":3,"sources":["C:/Users/jayka/web development/google-meet/client/src/components/meetingHeader.js"],"names":["react","useEffect","useState","useRef","PeopleIcon","ChatBubbleIcon","AccountCircleIcon","Room","moment","io","Peer","MeetingHeader","setMessenger","id","isAdmin","formatDate","format","currentTime","setCurrentTime","setInterval","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,IAAP,MAAiB,aAAjB;;;AAEA,SAASC,aAAT,CAAuB;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,EAAhB;AAAoBC,EAAAA;AAApB,CAAvB,EAAsD;AAAA;;AAClxB,WAAOP,MAAM,GAAGQ,MAAT,CAAgB,IAAhB,CAAP;AACA,GAFD;;AAIA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,MAAM;AACpDa,IAAAA,UAAU;AACV,GAF6C,CAA9C;AAGAd,EAAAA,SAAS,CAAC,MAAM;AACfkB,IAAAA,WAAW,CAAC,MAAMD,cAAc,CAACH,UAAU,EAAX,CAArB,EAAqC,IAArC,CAAX;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AACA,GAHQ,EAGN,EAHM,CAAT;AAKA,sBACC;AAAA,4BACC,QAAC,IAAD;AAAM,MAAA,EAAE,EAAEJ,EAAV;AAAc,MAAA,OAAO,EAAEC;AAAvB;AAAA;AAAA;AAAA;AAAA,YADD,eAGC;AAAK,MAAA,KAAK,EAAC,cAAX;AAAA,8BACC;AAAK,QAAA,KAAK,EAAC,yBAAX;AAAA,+BACC,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cADD,eAIC;AACC,QAAA,KAAK,EAAC,yBADP;AAEC,QAAA,OAAO,EAAE,MAAM;AACdF,UAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,SAJF;AAAA,+BAMC,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAND;AAAA;AAAA;AAAA;AAAA,cAJD,eAYC;AAAK,QAAA,KAAK,EAAC,yBAAX;AAAA,kBAAsCK;AAAtC;AAAA;AAAA;AAAA;AAAA,cAZD,eAaC;AAAK,QAAA,KAAK,EAAC,yBAAX;AAAA,+BACC,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cAbD;AAAA;AAAA;AAAA;AAAA;AAAA,YAHD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAuBA;;GAxLQN,a;;KAAAA,a;AA0LT,eAAeA,aAAf","sourcesContent":["import react, { useEffect, useState, useRef } from \"react\";\r\nimport PeopleIcon from \"@material-ui/icons/People\";\r\nimport ChatBubbleIcon from \"@material-ui/icons/ChatBubble\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport Room from \"./Room\";\r\n//use for time\r\nimport moment from \"moment\";\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\n\r\nfunction MeetingHeader({ setMessenger, id, isAdmin }) {\r\n    // useEffect(() => {\r\n\t// \t\tconst vidStyle = {\r\n\t// \t\t\t// height: \"calc(50vh -90px)\",\r\n\t// \t\t\t// borderRadius:\"10px\"\r\n\t// \t\t\theight: \"45%\",\r\n\t// \t\t\twidth: \"45%\",\r\n\r\n\t// \t\t\tpadding: \"10px\",\r\n\t// \t\t\tpaddingBottom: \"5px\",\r\n\t// \t\t};\r\n\r\n\t// \t\tconst Video = (props) => {\r\n\t// \t\t\tconst ref = useRef();\r\n\r\n\t// \t\t\tuseEffect(() => {\r\n\t// \t\t\t\tconsole.log(props.peer);\r\n\t// \t\t\t\tprops.peer.on(\"stream\", (stream) => {\r\n\t// \t\t\t\t\tconsole.log(\"ENTE0RD\" + stream);\r\n\t// \t\t\t\t\tref.current.srcObject = stream;\r\n\t// \t\t\t\t});\r\n\t// \t\t\t}, []);\r\n\r\n\t// \t\t\treturn <video style={vidStyle} autoPlay ref={ref} />;\r\n\t// \t\t};\r\n\r\n\t// \t\tconst videoConstraints = {\r\n\t// \t\t\theight: window.innerHeight / 2,\r\n\t// \t\t\twidth: window.innerWidth / 2,\r\n\t// \t\t};\r\n\r\n\t// \t\tconst Room = (props) => {\r\n\t// \t\t\tconst numUsers = useRef();\r\n\t// \t\t\tconst [peers, setPeers] = useState([]);\r\n\t// \t\t\tconst socketRef = useRef();\r\n\t// \t\t\tconst userVideo = useRef();\r\n\t// \t\t\tconst peersRef = useRef([]);\r\n\t// \t\t\tconst roomID = props.id;\r\n\r\n\t// \t\t\tuseEffect(() => {\r\n\t// \t\t\t\tsocketRef.current = io.connect(\"http://localhost:9000\");\r\n\t// \t\t\t\tnavigator.mediaDevices\r\n\t// \t\t\t\t\t.getUserMedia({ video: videoConstraints, audio: true })\r\n\t// \t\t\t\t\t.then((stream) => {\r\n\t// \t\t\t\t\t\tuserVideo.current.srcObject = stream;\r\n\t// \t\t\t\t\t\tconsole.log(\"USERVIDEO\" + stream);\r\n\t// \t\t\t\t\t\t// LOGIC THAT USER HAS JOINED THE ROOM\r\n\r\n\t// \t\t\t\t\t\t//THIS EVENT Is NOT CACHED AT BACKEND\r\n\t// \t\t\t\t\t\t//.emit means sending  to backend\r\n\t// \t\t\t\t\t\tsocketRef.current.emit(\"JOINED ROOM\");\r\n\t// \t\t\t\t\t\tsocketRef.current.emit(\"join room\", roomID);\r\n\t// \t\t\t\t\t\t// Recieve users from backened\r\n\t// \t\t\t\t\t\t// if (!props.isAdmin) {\r\n\r\n\t// \t\t\t\t\t\tsocketRef.current.on(\"all users\", (users) => {\r\n\t// \t\t\t\t\t\t\t//peers is for how many videos are rendering\r\n\t// \t\t\t\t\t\t\tconsole.log(users.length);\r\n\t// \t\t\t\t\t\t\tnumUsers.current = users.length + 1;\r\n\t// \t\t\t\t\t\t\tconst peersForVideo = [];\r\n\t// \t\t\t\t\t\t\tusers.forEach((userID) => {\r\n\t// \t\t\t\t\t\t\t\tconsole.log(userID + \" USER ID OF USER IN THE ROOM \");\r\n\t// \t\t\t\t\t\t\t\tconsole.log(socketRef.current);\r\n\t// \t\t\t\t\t\t\t\t//socketRef.current.id is the of user currently joined\r\n\t// \t\t\t\t\t\t\t\t// UserID  id's of all those inside the meeting\r\n\r\n\t// \t\t\t\t\t\t\t\tconst peer = createPeer(userID, socketRef.current.id, stream);\r\n\t// \t\t\t\t\t\t\t\t//peersRef is for which is having connection with which\r\n\t// \t\t\t\t\t\t\t\tpeersRef.current.push({\r\n\t// \t\t\t\t\t\t\t\t\tpeerID: userID,\r\n\t// \t\t\t\t\t\t\t\t\tpeer,\r\n\t// \t\t\t\t\t\t\t\t});\r\n\r\n\t// \t\t\t\t\t\t\t\tpeersForVideo.push(peer);\r\n\t// \t\t\t\t\t\t\t});\r\n\t// \t\t\t\t\t\t\tsetPeers(peersForVideo);\r\n\t// \t\t\t\t\t\t\tconsole.log(peers);\r\n\t// \t\t\t\t\t\t});\r\n\t// \t\t\t\t\t\t//PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\r\n\t// \t\t\t\t\t\t//.on means recieving from backend\r\n\t// \t\t\t\t\t\tsocketRef.current.on(\"user joined\", (payload) => {\r\n\t// \t\t\t\t\t\t\tconst peer = addPeer(payload.signal, payload.callerID, stream);\r\n\r\n\t// \t\t\t\t\t\t\tpeersRef.current.push({\r\n\t// \t\t\t\t\t\t\t\tpeerID: payload.callerID,\r\n\t// \t\t\t\t\t\t\t\tpeer,\r\n\t// \t\t\t\t\t\t\t});\r\n\t// \t\t\t\t\t\t\tsetPeers((users) => [...users, peer]);\r\n\t// \t\t\t\t\t\t});\r\n\t// \t\t\t\t\t\tsocketRef.current.on(\"receiving returned signal\", (payload) => {\r\n\t// \t\t\t\t\t\t\t// signal has been send to multiple now multiple users are sending back the signal to caller\r\n\t// \t\t\t\t\t\t\tconst item = peersRef.current.find(\r\n\t// \t\t\t\t\t\t\t\t(p) => p.peerID === payload.id\r\n\t// \t\t\t\t\t\t\t);\r\n\t// \t\t\t\t\t\t\tconsole.log(item);\r\n\t// \t\t\t\t\t\t\titem.peer.signal(payload.signal);\r\n\t// \t\t\t\t\t\t});\r\n\t// \t\t\t\t\t\t// }\r\n\t// \t\t\t\t\t});\r\n\t// \t\t\t}, []);\r\n\r\n\t// \t\t\tfunction createPeer(userToSignal, callerID, stream) {\r\n\t// \t\t\t\tconsole.log(\"CREATE PEER\");\r\n\t// \t\t\t\tconst peer = new Peer({\r\n\t// \t\t\t\t\tinitiator: true,\r\n\t// \t\t\t\t\t//trickle wait for all the data to send makes it slow\r\n\t// \t\t\t\t\ttrickle: false,\r\n\t// \t\t\t\t\tstream,\r\n\t// \t\t\t\t});\r\n\t// \t\t\t\t//generates signal\r\n\t// \t\t\t\t//sending to backend\r\n\t// \t\t\t\tpeer.on(\"signal\", (signal) => {\r\n\t// \t\t\t\t\tsocketRef.current.emit(\"sending signal\", {\r\n\t// \t\t\t\t\t\tuserToSignal,\r\n\t// \t\t\t\t\t\tcallerID,\r\n\t// \t\t\t\t\t\tsignal,\r\n\t// \t\t\t\t\t});\r\n\t// \t\t\t\t});\r\n\t// \t\t\t\treturn peer;\r\n\t// \t\t\t}\r\n\r\n\t// \t\t\tfunction addPeer(incomingSignal, callerID, stream) {\r\n\t// \t\t\t\tconsole.log(\"Add Peer\");\r\n\t// \t\t\t\tconst peer = new Peer({\r\n\t// \t\t\t\t\tinitiator: false,\r\n\t// \t\t\t\t\ttrickle: false,\r\n\t// \t\t\t\t\tstream,\r\n\t// \t\t\t\t});\r\n\t// \t\t\t\t// 1 accepting the incoming signal that this will return the signal\r\n\t// \t\t\t\tpeer.signal(incomingSignal);\r\n\r\n\t// \t\t\t\tpeer.on(\"signal\", (signal) => {\r\n\t// \t\t\t\t\tsocketRef.current.emit(\"returning signal\", { signal, callerID });\r\n\t// \t\t\t\t});\r\n\t// \t\t\t\treturn peer;\r\n\t// \t\t\t}\r\n\r\n\t// \t\t\t// console.log(\"PEERS \" + JSON.stringify(peers));\r\n\t// \t\t\treturn (\r\n\t// \t\t\t\t<div className=\"container\">\r\n\t// \t\t\t\t\t<video style={vidStyle} muted ref={userVideo} autoPlay />\r\n\t// \t\t\t\t\t{peers.map((peer, index) => {\r\n\t// \t\t\t\t\t\treturn <Video key={index} peer={peer} />;\r\n\t// \t\t\t\t\t})}\r\n\t// \t\t\t\t</div>\r\n\t// \t\t\t);\r\n\t// \t\t};\r\n\t// \t}, []);\r\n\r\n\tconst formatDate = () => {\r\n\t\treturn moment().format(\"LT\");\r\n\t};\r\n\r\n\tconst [currentTime, setCurrentTime] = useState(() => {\r\n\t\tformatDate();\r\n\t});\r\n\tuseEffect(() => {\r\n\t\tsetInterval(() => setCurrentTime(formatDate()), 1000);\r\n\t\tconsole.log(currentTime);\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Room id={id} isAdmin={isAdmin} />\r\n\r\n\t\t\t<div class=\"frame-header\">\r\n\t\t\t\t<div class=\"header-items icon-block\">\r\n\t\t\t\t\t<PeopleIcon />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"header-items icon-block\"\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tsetMessenger(true);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<ChatBubbleIcon />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"header-items date-block\">{currentTime}</div>\r\n\t\t\t\t<div class=\"header-items icon-block\">\r\n\t\t\t\t\t<AccountCircleIcon />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default MeetingHeader;\r\n"]},"metadata":{},"sourceType":"module"}