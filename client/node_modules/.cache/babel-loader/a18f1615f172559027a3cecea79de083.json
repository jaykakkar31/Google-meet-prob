{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayka\\\\web development\\\\google-meet\\\\src\\\\components\\\\vedioPage.jsx\",\n    _s2 = $RefreshSig$();\n\nimport react, { useState, useEffect, useReducer, useRef } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport MeetingHeader from \"./meetingHeader\";\nimport MeetingFooter from \"./meetingFooter\";\nimport MeetingInfo from \"./meetingInfo\";\nimport styled from \"styled-components\";\nimport Messenger from \"./messenger\";\nimport Alert from \"./alert\";\nimport Peer from \"simple-peer\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction VideoPage() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const isAdmin = window.location.hash === \"#init\" ? true : false; //#init\n  // console.log(window.location.hash);\n\n  const {\n    id\n  } = useParams(); // let peer = null;\n\n  const url = `${window.location.origin}${window.location.pathname}`;\n  const [meetingInfoPopUp, setMeetingInfoPopUp] = useState(false);\n  const [isMessenger, setMessenger] = useState(false); // NEW START\n\n  const [peers, setPeers] = useState([]);\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  useEffect(() => {\n    //Call every time when page renders\n    if (isAdmin) {\n      setMeetingInfoPopUp(true);\n    } // initWebRTC();\n    // ESTABLISHING CONNECT WITH BACKEND\n\n\n    socketRef.current = io.connect(\"http://localhost:9000\"); // LOGIC FOR SOMEBODY JOINING THE ROOM\n\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      userVideo.current.srcObject = stream; // var video = document.querySelector(\"video\");\n      // if (\"srcObject\" in video) {\n      //   video.srcObject = stream;\n      // } else {\n      //   video.src = window.URL.createObjectURL(stream); // for older browsers\n      // }\n      // video.play();\n      // LOGIC THAT USER HAS JOINED THE ROOM\n      //THIS EVENT Is NOT CACHED AT BACKEND\n      //.emit means sending  to backend\n\n      socketRef.current.emit(\"JOINED ROOM\");\n      socketRef.current.emit(\"join room\", id); // Recieve users from backened\n      // if (!isAdmin) {\n\n      socketRef.current.on(\"all users\", users => {\n        //peers is for how many videos are rendering\n        console.log(users.length);\n        const peersForVideo = [];\n        users.forEach(userID => {\n          console.log(userID + \" USER ID OF USER IN THE ROOM \");\n          console.log(socketRef.current); //socketRef.current.id is the of user currently joined\n          //UserID  id's of all those inside the meeting\n\n          const peer = createPeer(userID, socketRef.current.id, stream); //peersRef is for which is having connection with which\n\n          peersRef.current.push({\n            peerID: userID,\n            peer\n          });\n          peersForVideo.push(peer);\n        });\n        setPeers(peersForVideo);\n      }); //PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\n      //.on means recieving from backend\n\n      socketRef.current.on(\"user joined\", payload => {\n        const peer = addPeer(payload.signal, payload.callerID, payload.stream);\n        peersRef.current.push({\n          peerID: payload.callerID,\n          peer\n        });\n        setPeers(prevUsers => [...prevUsers, peer]);\n      });\n      socketRef.current.on(\"receiving returned signal\", payload => {\n        // signal has been send to multiple now multiple users are sending back the signal to caller\n        const item = peersRef.current.find(p => p.peerID === payload.id);\n        console.log(item);\n        item.peer.signal(payload.signal);\n      }); // }\n    });\n  }, []);\n\n  function createPeer(userToSignal, callerID, stream) {\n    const peer = new Peer({\n      initiator: true,\n      //trickle wait for all the data to send makes it slow\n      trickle: false,\n      stream\n    }); //generates signal\n    //sending to backend\n\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"sending signal\", {\n        userToSignal,\n        callerID,\n        signal\n      });\n    });\n    return peer;\n  }\n\n  function addPeer(incomingSignal, callerID, stream) {\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    }); // 1 accepting the incoming signal that tthis will return the signal\n\n    peer.signal(incomingSignal);\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"returning signal\", {\n        signal,\n        callerID\n      });\n    });\n    return peer;\n  }\n\n  const StyledVideo = styled.video`\n\t\theight: 50%;\n\t\twidth: 50%;\n\t`;\n\n  const Video = props => {\n    _s();\n\n    const ref = useRef();\n    useEffect(() => {\n      console.log(props.peer);\n      props.peer.on(\"stream\", stream => {\n        console.log(stream);\n        ref.current.srcObject = stream;\n      });\n    }, []);\n    return /*#__PURE__*/_jsxDEV(StyledVideo, {\n      playsInline: true,\n      autoPlay: true,\n      ref: ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 10\n    }, this);\n  };\n\n  _s(Video, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"videoScreen\",\n    children: [/*#__PURE__*/_jsxDEV(MeetingHeader, {\n      setMessenger: setMessenger,\n      peers: peers,\n      userVideo: userVideo,\n      Video: Video\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MeetingFooter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 4\n    }, this), isAdmin && meetingInfoPopUp && /*#__PURE__*/_jsxDEV(MeetingInfo, {\n      url: url,\n      setMeetingInfoPopUp: setMeetingInfoPopUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 5\n    }, this), isMessenger ? /*#__PURE__*/_jsxDEV(Messenger, {\n      setMessenger: setMessenger // messageList={messageList}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(Alert, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 3\n  }, this);\n}\n\n_s2(VideoPage, \"hnbwabp54ex/+1b7T0N5lahYNPM=\", false, function () {\n  return [useParams];\n});\n\n_c = VideoPage;\nexport default VideoPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoPage\");","map":{"version":3,"sources":["C:/Users/jayka/web development/google-meet/src/components/vedioPage.jsx"],"names":["react","useState","useEffect","useReducer","useRef","useParams","useHistory","MeetingHeader","MeetingFooter","MeetingInfo","styled","Messenger","Alert","Peer","io","VideoPage","isAdmin","window","location","hash","id","url","origin","pathname","meetingInfoPopUp","setMeetingInfoPopUp","isMessenger","setMessenger","peers","setPeers","socketRef","userVideo","peersRef","current","connect","navigator","mediaDevices","getUserMedia","video","audio","then","stream","srcObject","emit","on","users","console","log","length","peersForVideo","forEach","userID","peer","createPeer","push","peerID","payload","addPeer","signal","callerID","prevUsers","item","find","p","userToSignal","initiator","trickle","incomingSignal","StyledVideo","Video","props","ref"],"mappings":"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","sourcesContent":["import react, { useState, useEffect, useReducer, useRef } from \"react\";\n\nimport { useParams, useHistory } from \"react-router-dom\";\nimport MeetingHeader from \"./meetingHeader\";\nimport MeetingFooter from \"./meetingFooter\";\nimport MeetingInfo from \"./meetingInfo\";\nimport styled from \"styled-components\";\n\nimport Messenger from \"./messenger\";\nimport Alert from \"./alert\";\nimport Peer from \"simple-peer\";\nimport io from \"socket.io-client\";\nfunction VideoPage() {\n\tconst isAdmin = window.location.hash === \"#init\" ? true : false;\n\n\t//#init\n\t// console.log(window.location.hash);\n\n\tconst { id } = useParams();\n\n\t// let peer = null;\n\tconst url = `${window.location.origin}${window.location.pathname}`;\n\n\tconst [meetingInfoPopUp, setMeetingInfoPopUp] = useState(false);\n\tconst [isMessenger, setMessenger] = useState(false);\n\n\t// NEW START\n\n\tconst [peers, setPeers] = useState([]);\n\tconst socketRef = useRef();\n\tconst userVideo = useRef();\n\tconst peersRef = useRef([]);\n\n\tuseEffect(() => {\n\t\t//Call every time when page renders\n\t\tif (isAdmin) {\n\t\t\tsetMeetingInfoPopUp(true);\n\t\t}\n\t\t// initWebRTC();\n\t\t// ESTABLISHING CONNECT WITH BACKEND\n\t\tsocketRef.current = io.connect(\"http://localhost:9000\");\n\t\t// LOGIC FOR SOMEBODY JOINING THE ROOM\n\t\tnavigator.mediaDevices\n\t\t\t.getUserMedia({ video: true, audio: true })\n\t\t\t.then((stream) => {\n\t\t\t\tuserVideo.current.srcObject = stream;\n\n\t\t\t\t// var video = document.querySelector(\"video\");\n\t\t\t\t// if (\"srcObject\" in video) {\n\t\t\t\t//   video.srcObject = stream;\n\t\t\t\t// } else {\n\t\t\t\t//   video.src = window.URL.createObjectURL(stream); // for older browsers\n\t\t\t\t// }\n\t\t\t\t// video.play();\n\n\t\t\t\t// LOGIC THAT USER HAS JOINED THE ROOM\n\n\t\t\t\t//THIS EVENT Is NOT CACHED AT BACKEND\n\t\t\t\t//.emit means sending  to backend\n\t\t\t\tsocketRef.current.emit(\"JOINED ROOM\");\n\t\t\t\tsocketRef.current.emit(\"join room\", id);\n\t\t\t\t// Recieve users from backened\n\t\t\t\t// if (!isAdmin) {\n\t\t\t\tsocketRef.current.on(\"all users\", (users) => {\n\t\t\t\t\t//peers is for how many videos are rendering\n\t\t\t\t\tconsole.log(users.length);\n\t\t\t\t\tconst peersForVideo = [];\n\t\t\t\t\tusers.forEach((userID) => {\n\t\t\t\t\t\tconsole.log(userID + \" USER ID OF USER IN THE ROOM \");\n\t\t\t\t\t\tconsole.log(socketRef.current);\n\t\t\t\t\t\t//socketRef.current.id is the of user currently joined\n\t\t\t\t\t\t//UserID  id's of all those inside the meeting\n\n\t\t\t\t\t\tconst peer = createPeer(userID, socketRef.current.id, stream);\n\t\t\t\t\t\t//peersRef is for which is having connection with which\n\t\t\t\t\t\tpeersRef.current.push({\n\t\t\t\t\t\t\tpeerID: userID,\n\t\t\t\t\t\t\tpeer,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tpeersForVideo.push(peer);\n\t\t\t\t\t});\n\t\t\t\t\tsetPeers(peersForVideo);\n\t\t\t\t});\n\t\t\t\t//PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\n\t\t\t\t//.on means recieving from backend\n\t\t\t\tsocketRef.current.on(\"user joined\", (payload) => {\n\t\t\t\t\tconst peer = addPeer(\n\t\t\t\t\t\tpayload.signal,\n\t\t\t\t\t\tpayload.callerID,\n\t\t\t\t\t\tpayload.stream\n\t\t\t\t\t);\n\t\t\t\t\tpeersRef.current.push({\n\t\t\t\t\t\tpeerID: payload.callerID,\n\t\t\t\t\t\tpeer,\n\t\t\t\t\t});\n\t\t\t\t\tsetPeers((prevUsers) => [...prevUsers, peer]);\n\t\t\t\t});\n\t\t\t\tsocketRef.current.on(\"receiving returned signal\", (payload) => {\n\t\t\t\t\t// signal has been send to multiple now multiple users are sending back the signal to caller\n\t\t\t\t\tconst item = peersRef.current.find((p) => p.peerID === payload.id);\n\t\t\t\t\tconsole.log(item);\n\t\t\t\t\titem.peer.signal(payload.signal);\n\t\t\t\t});\n\t\t\t\t// }\n\t\t\t});\n\t}, []);\n\n\tfunction createPeer(userToSignal, callerID, stream) {\n\t\tconst peer = new Peer({\n\t\t\tinitiator: true,\n\t\t\t//trickle wait for all the data to send makes it slow\n\t\t\ttrickle: false,\n\t\t\tstream,\n\t\t});\n\t\t//generates signal\n\t\t//sending to backend\n\t\tpeer.on(\"signal\", (signal) => {\n\t\t\tsocketRef.current.emit(\"sending signal\", {\n\t\t\t\tuserToSignal,\n\t\t\t\tcallerID,\n\t\t\t\tsignal,\n\t\t\t});\n\t\t});\n\t\treturn peer;\n\t}\n\n\tfunction addPeer(incomingSignal, callerID, stream) {\n\t\tconst peer = new Peer({\n\t\t\tinitiator: false,\n\t\t\ttrickle: false,\n\t\t\tstream,\n\t\t});\n\t\t// 1 accepting the incoming signal that tthis will return the signal\n\t\tpeer.signal(incomingSignal);\n\n\t\tpeer.on(\"signal\", (signal) => {\n\t\t\tsocketRef.current.emit(\"returning signal\", { signal, callerID });\n\t\t});\n\t\treturn peer;\n\t}\n\n\tconst StyledVideo = styled.video`\n\t\theight: 50%;\n\t\twidth: 50%;\n\t`;\n\tconst Video = (props) => {\n\t\tconst ref = useRef();\n\n\t\tuseEffect(() => {\n\t\t\tconsole.log(props.peer);\n\t\t\tprops.peer.on(\"stream\", (stream) => {\n\t\t\t\tconsole.log(stream);\n\t\t\t\tref.current.srcObject = stream;\n\t\t\t});\n\t\t}, []);\n\n\t\treturn <StyledVideo playsInline autoPlay ref={ref} />;\n\t};\n\n\treturn (\n\t\t<div class=\"videoScreen\">\n\t\t\t<MeetingHeader\n\t\t\t\tsetMessenger={setMessenger}\n\t\t\t\tpeers={peers}\n\t\t\t\tuserVideo={userVideo}\n\t\t\t\tVideo={Video}\n\t\t\t/>\n\t\t\t<MeetingFooter />\n\t\t\t{isAdmin && meetingInfoPopUp && (\n\t\t\t\t<MeetingInfo url={url} setMeetingInfoPopUp={setMeetingInfoPopUp} />\n\t\t\t)}\n\t\t\t{isMessenger ? (\n\t\t\t\t<Messenger\n\t\t\t\t\tsetMessenger={setMessenger}\n\t\t\t\t\t// messageList={messageList}\n\t\t\t\t/>\n\t\t\t) : (\n\t\t\t\t<Alert />\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default VideoPage;\n"]},"metadata":{},"sourceType":"module"}