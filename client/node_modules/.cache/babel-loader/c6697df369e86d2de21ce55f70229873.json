{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayka\\\\web development\\\\google-meet\\\\client\\\\src\\\\components\\\\vedioPage.js\",\n    _s3 = $RefreshSig$();\n\nimport react, { useState, useEffect, useReducer, useRef } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport MeetingHeader from \"./meetingHeader\";\nimport MeetingFooter from \"./meetingFooter\";\nimport MeetingInfo from \"./meetingInfo\";\nimport Messenger from \"./messenger\";\nimport Alert from \"./alert\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction VideoPage() {\n  _s3();\n\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$();\n\n  const isAdmin = window.location.hash === \"#init\" ? true : false; //#init\n  // console.log(window.location.hash);\n\n  const {\n    id\n  } = useParams();\n  const url = `${window.location.origin}${window.location.pathname}`;\n  const [meetingInfoPopUp, setMeetingInfoPopUp] = useState(false);\n  const [isMessenger, setMessenger] = useState(false);\n  useEffect(() => {\n    if (isAdmin) {\n      setMeetingInfoPopUp(true);\n    }\n  }, []); // import React, { useEffect, useRef, useState } from \"react\";\n\n  const vidStyle = {\n    height: \"50%\",\n    width: \"50%\"\n  };\n\n  const Video = props => {\n    _s();\n\n    const ref = useRef();\n    useEffect(() => {\n      console.log(props.peer);\n      props.peer.on(\"stream\", stream => {\n        console.log(\"ENTE0RD\" + stream);\n        ref.current.srcObject = stream;\n      });\n    }, []);\n    return /*#__PURE__*/_jsxDEV(\"video\", {\n      style: vidStyle,\n      autoPlay: true,\n      ref: ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 10\n    }, this);\n  };\n\n  _s(Video, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n  const videoConstraints = {\n    height: window.innerHeight / 2,\n    width: window.innerWidth / 2\n  };\n\n  const Room = props => {\n    _s2();\n\n    const numUsers = useRef();\n    const [peers, setPeers] = useState([]);\n    const socketRef = useRef();\n    const userVideo = useRef();\n    const peersRef = useRef([]);\n    const [streamObj, setStreamObj] = useState();\n    const [screenCastStream, setScreenCastStream] = useState();\n    const roomID = props.id;\n    useEffect(() => {\n      socketRef.current = io.connect(\"http://localhost:9000\");\n      navigator.mediaDevices.getUserMedia({\n        video: videoConstraints,\n        audio: true\n      }).then(stream => {\n        setStreamObj(stream);\n        userVideo.current.srcObject = stream;\n        console.log(\"USERVIDEO\" + stream); // LOGIC THAT USER HAS JOINED THE ROOM\n        //THIS EVENT Is NOT CACHED AT BACKEND\n        //.emit means sending  to backend\n\n        socketRef.current.emit(\"JOINED ROOM\");\n        socketRef.current.emit(\"join room\", roomID); // Recieve users from backened\n\n        if (!props.isAdmin) {\n          socketRef.current.on(\"all users\", users => {\n            //peers is for how many videos are rendering\n            console.log(users.length);\n            numUsers.current = users.length + 1;\n            const peersForVideo = [];\n            users.forEach(userID => {\n              console.log(userID + \" USER ID OF USER IN THE ROOM \");\n              console.log(socketRef.current); //socketRef.current.id is the of user currently joined\n              // UserID  id's of all those inside the meeting\n\n              const peer = createPeer(userID, socketRef.current.id, stream); //peersRef is for which is having connection with which\n\n              peersRef.current.push({\n                peerID: userID,\n                peer\n              });\n              peersForVideo.push(peer);\n            });\n            setPeers(peersForVideo);\n            console.log(peers);\n          }); //PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\n          //.on means recieving from backend\n\n          socketRef.current.on(\"user joined\", payload => {\n            const peer = addPeer(payload.signal, payload.callerID, stream);\n            peersRef.current.push({\n              peerID: payload.callerID,\n              peer\n            });\n            setPeers(users => [...users, peer]);\n          });\n          socketRef.current.on(\"receiving returned signal\", payload => {\n            // signal has been send to multiple now multiple users are sending back the signal to caller\n            const item = peersRef.current.find(p => p.peerID === payload.id);\n            console.log(item);\n            item.peer.signal(payload.signal);\n          });\n        }\n      });\n    }, []);\n\n    function createPeer(userToSignal, callerID, stream) {\n      console.log(\"CREATE PEER\");\n      const peer = new Peer({\n        initiator: true,\n        //trickle wait for all the data to send makes it slow\n        trickle: false,\n        stream\n      }); //generates signal\n      //sending to backend\n\n      peer.on(\"signal\", signal => {\n        socketRef.current.emit(\"sending signal\", {\n          userToSignal,\n          callerID,\n          signal\n        });\n      });\n      return peer;\n    }\n\n    function addPeer(incomingSignal, callerID, stream) {\n      console.log(\"Add Peer\");\n      const peer = new Peer({\n        initiator: false,\n        trickle: false,\n        stream\n      }); // 1 accepting the incoming signal that this will return the signal\n\n      peer.signal(incomingSignal);\n      peer.on(\"signal\", signal => {\n        socketRef.current.emit(\"returning signal\", {\n          signal,\n          callerID\n        });\n      });\n      return peer;\n    } // console.log(\"PEERS \" + JSON.stringify(peers));\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        style: vidStyle,\n        muted: true,\n        ref: userVideo,\n        autoPlay: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 5\n      }, this), peers.map((peer, index) => {\n        return /*#__PURE__*/_jsxDEV(Video, {\n          peer: peer\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 4\n    }, this);\n  }; // export default Room;\n\n\n  _s2(Room, \"XEsaZgDOCHOFPPbLw5GcR6hhpDI=\");\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"videoScreen\",\n    children: [/*#__PURE__*/_jsxDEV(MeetingHeader, {\n      setMessenger: setMessenger // peers={peers}\n      // userVideo={userVideo}\n      // Video={Video}\n      ,\n      Room: Room,\n      isAdmin: isAdmin,\n      id: id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MeetingFooter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 4\n    }, this), isAdmin && meetingInfoPopUp && /*#__PURE__*/_jsxDEV(MeetingInfo, {\n      url: url,\n      setMeetingInfoPopUp: setMeetingInfoPopUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 5\n    }, this), isMessenger ? /*#__PURE__*/_jsxDEV(Messenger, {\n      setMessenger: setMessenger // messageList={messageList}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(Alert, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 3\n  }, this);\n}\n\n_s3(VideoPage, \"Xae22M79kcI6o3IfuV3ThdO4rXM=\", false, function () {\n  return [useParams];\n});\n\n_c = VideoPage;\nexport default VideoPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoPage\");","map":{"version":3,"sources":["C:/Users/jayka/web development/google-meet/client/src/components/vedioPage.js"],"names":["react","useState","useEffect","useReducer","useRef","useParams","useHistory","MeetingHeader","MeetingFooter","MeetingInfo","Messenger","Alert","io","Peer","VideoPage","isAdmin","window","location","hash","id","url","origin","pathname","meetingInfoPopUp","setMeetingInfoPopUp","isMessenger","setMessenger","vidStyle","height","width","Video","props","ref","console","log","peer","on","stream","current","srcObject","videoConstraints","innerHeight","innerWidth","Room","numUsers","peers","setPeers","socketRef","userVideo","peersRef","streamObj","setStreamObj","screenCastStream","setScreenCastStream","roomID","connect","navigator","mediaDevices","getUserMedia","video","audio","then","emit","users","length","peersForVideo","forEach","userID","createPeer","push","peerID","payload","addPeer","signal","callerID","item","find","p","userToSignal","initiator","trickle","incomingSignal","map","index"],"mappings":"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","sourcesContent":["import react, { useState, useEffect, useReducer, useRef } from \"react\";\n\nimport { useParams, useHistory } from \"react-router-dom\";\nimport MeetingHeader from \"./meetingHeader\";\nimport MeetingFooter from \"./meetingFooter\";\nimport MeetingInfo from \"./meetingInfo\";\n\nimport Messenger from \"./messenger\";\nimport Alert from \"./alert\";\n\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\n\nfunction VideoPage() {\n\tconst isAdmin = window.location.hash === \"#init\" ? true : false;\n\t//#init\n\t// console.log(window.location.hash);\n\n\tconst { id } = useParams();\n\n\tconst url = `${window.location.origin}${window.location.pathname}`;\n\n\tconst [meetingInfoPopUp, setMeetingInfoPopUp] = useState(false);\n\tconst [isMessenger, setMessenger] = useState(false);\n\n\tuseEffect(() => {\n\t\tif (isAdmin) {\n\t\t\tsetMeetingInfoPopUp(true);\n\t\t}\n\t}, []);\n\n\t// import React, { useEffect, useRef, useState } from \"react\";\n\n\tconst vidStyle = {\n\t\theight: \"50%\",\n\t\twidth: \"50%\",\n\t};\n\n\tconst Video = (props) => {\n\t\tconst ref = useRef();\n\n\t\tuseEffect(() => {\n\t\t\tconsole.log(props.peer);\n\t\t\tprops.peer.on(\"stream\", (stream) => {\n\t\t\t\tconsole.log(\"ENTE0RD\" + stream);\n\t\t\t\tref.current.srcObject = stream;\n\t\t\t});\n\t\t}, []);\n\n\t\treturn <video style={vidStyle} autoPlay ref={ref} />;\n\t};\n\n\tconst videoConstraints = {\n\t\theight: window.innerHeight / 2,\n\t\twidth: window.innerWidth / 2,\n\t};\n\n\tconst Room = (props) => {\n\t\tconst numUsers = useRef();\n\t\tconst [peers, setPeers] = useState([]);\n\t\tconst socketRef = useRef();\n\t\tconst userVideo = useRef();\n\t\tconst peersRef = useRef([]);\n\t\tconst [streamObj, setStreamObj] = useState();\n\t\tconst [screenCastStream, setScreenCastStream] = useState();\n\t\tconst roomID = props.id;\n\n\t\tuseEffect(() => {\n\t\t\tsocketRef.current = io.connect(\"http://localhost:9000\");\n\t\t\tnavigator.mediaDevices\n\t\t\t\t.getUserMedia({ video: videoConstraints, audio: true })\n\t\t\t\t.then((stream) => {\n\t\t\t\t\tsetStreamObj(stream);\n\n\t\t\t\t\tuserVideo.current.srcObject = stream;\n\t\t\t\t\tconsole.log(\"USERVIDEO\" + stream);\n\t\t\t\t\t// LOGIC THAT USER HAS JOINED THE ROOM\n\n\t\t\t\t\t//THIS EVENT Is NOT CACHED AT BACKEND\n\t\t\t\t\t//.emit means sending  to backend\n\t\t\t\t\tsocketRef.current.emit(\"JOINED ROOM\");\n\t\t\t\t\tsocketRef.current.emit(\"join room\", roomID);\n\t\t\t\t\t// Recieve users from backened\n\t\t\t\t\tif (!props.isAdmin) {\n\t\t\t\t\t\tsocketRef.current.on(\"all users\", (users) => {\n\t\t\t\t\t\t\t//peers is for how many videos are rendering\n\t\t\t\t\t\t\tconsole.log(users.length);\n\t\t\t\t\t\t\tnumUsers.current = users.length + 1;\n\t\t\t\t\t\t\tconst peersForVideo = [];\n\t\t\t\t\t\t\tusers.forEach((userID) => {\n\t\t\t\t\t\t\t\tconsole.log(userID + \" USER ID OF USER IN THE ROOM \");\n\t\t\t\t\t\t\t\tconsole.log(socketRef.current);\n\t\t\t\t\t\t\t\t//socketRef.current.id is the of user currently joined\n\t\t\t\t\t\t\t\t// UserID  id's of all those inside the meeting\n\n\t\t\t\t\t\t\t\tconst peer = createPeer(userID, socketRef.current.id, stream);\n\t\t\t\t\t\t\t\t//peersRef is for which is having connection with which\n\t\t\t\t\t\t\t\tpeersRef.current.push({\n\t\t\t\t\t\t\t\t\tpeerID: userID,\n\t\t\t\t\t\t\t\t\tpeer,\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tpeersForVideo.push(peer);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tsetPeers(peersForVideo);\n\t\t\t\t\t\t\tconsole.log(peers);\n\t\t\t\t\t\t});\n\t\t\t\t\t\t//PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\n\t\t\t\t\t\t//.on means recieving from backend\n\t\t\t\t\t\tsocketRef.current.on(\"user joined\", (payload) => {\n\t\t\t\t\t\t\tconst peer = addPeer(payload.signal, payload.callerID, stream);\n\n\t\t\t\t\t\t\tpeersRef.current.push({\n\t\t\t\t\t\t\t\tpeerID: payload.callerID,\n\t\t\t\t\t\t\t\tpeer,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tsetPeers((users) => [...users, peer]);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tsocketRef.current.on(\"receiving returned signal\", (payload) => {\n\t\t\t\t\t\t\t// signal has been send to multiple now multiple users are sending back the signal to caller\n\t\t\t\t\t\t\tconst item = peersRef.current.find(\n\t\t\t\t\t\t\t\t(p) => p.peerID === payload.id\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconsole.log(item);\n\t\t\t\t\t\t\titem.peer.signal(payload.signal);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}, []);\n\n\t\tfunction createPeer(userToSignal, callerID, stream) {\n\t\t\tconsole.log(\"CREATE PEER\");\n\t\t\tconst peer = new Peer({\n\t\t\t\tinitiator: true,\n\t\t\t\t//trickle wait for all the data to send makes it slow\n\t\t\t\ttrickle: false,\n\t\t\t\tstream,\n\t\t\t});\n\t\t\t//generates signal\n\t\t\t//sending to backend\n\t\t\tpeer.on(\"signal\", (signal) => {\n\t\t\t\tsocketRef.current.emit(\"sending signal\", {\n\t\t\t\t\tuserToSignal,\n\t\t\t\t\tcallerID,\n\t\t\t\t\tsignal,\n\t\t\t\t});\n\t\t\t});\n\t\t\treturn peer;\n\t\t}\n\n\t\tfunction addPeer(incomingSignal, callerID, stream) {\n\t\t\tconsole.log(\"Add Peer\");\n\t\t\tconst peer = new Peer({\n\t\t\t\tinitiator: false,\n\t\t\t\ttrickle: false,\n\t\t\t\tstream,\n\t\t\t});\n\t\t\t// 1 accepting the incoming signal that this will return the signal\n\t\t\tpeer.signal(incomingSignal);\n\n\t\t\tpeer.on(\"signal\", (signal) => {\n\t\t\t\tsocketRef.current.emit(\"returning signal\", { signal, callerID });\n\t\t\t});\n\t\t\treturn peer;\n\t\t}\n\n\t\t// console.log(\"PEERS \" + JSON.stringify(peers));\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<video style={vidStyle} muted ref={userVideo} autoPlay />\n\t\t\t\t{peers.map((peer, index) => {\n\t\t\t\t\treturn <Video key={index} peer={peer} />;\n\t\t\t\t})}\n\t\t\t</div>\n\t\t);\n\t};\n\n\t// export default Room;\n\n\treturn (\n\t\t<div class=\"videoScreen\">\n\t\t\t<MeetingHeader\n\t\t\t\tsetMessenger={setMessenger}\n\t\t\t\t// peers={peers}\n\t\t\t\t// userVideo={userVideo}\n\t\t\t\t// Video={Video}\n                Room={Room}\n\t\t\t\tisAdmin={isAdmin}\n\t\t\t\tid={id}\n\t\t\t/>\n\t\t\t<MeetingFooter />\n\t\t\t{isAdmin && meetingInfoPopUp && (\n\t\t\t\t<MeetingInfo url={url} setMeetingInfoPopUp={setMeetingInfoPopUp} />\n\t\t\t)}\n\t\t\t{isMessenger ? (\n\t\t\t\t<Messenger\n\t\t\t\t\tsetMessenger={setMessenger}\n\t\t\t\t\t// messageList={messageList}\n\t\t\t\t/>\n\t\t\t) : (\n\t\t\t\t<Alert />\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default VideoPage;\n"]},"metadata":{},"sourceType":"module"}