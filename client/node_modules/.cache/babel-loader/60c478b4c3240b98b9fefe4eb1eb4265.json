{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayka\\\\web development\\\\google-meet\\\\client\\\\src\\\\components\\\\Room.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vidStyle = {\n  // height: \"calc(50vh -90px)\",\n  // borderRadius:\"10px\"\n  height: \"45%\",\n  width: \"45%\",\n  padding: \"10px\",\n  paddingBottom: \"5px\"\n};\n\nconst Video = props => {\n  _s();\n\n  const ref = useRef();\n  useEffect(() => {\n    console.log(props.peer);\n    props.peer.on(\"stream\", stream => {\n      console.log(\"ENTE0RD\" + stream);\n      ref.current.srcObject = stream;\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"video\", {\n    style: vidStyle,\n    autoPlay: true,\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Video, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n_c = Video;\nconst videoConstraints = {\n  height: window.innerHeight / 2,\n  width: window.innerWidth / 2\n};\n\nconst Room = props => {\n  _s2();\n\n  const numUsers = useRef();\n  const [peers, setPeers] = useState([]);\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const roomID = props.id;\n  const [streamObj, setStreamObj] = useState();\n  const [screenCastStream, setScreenCastStream] = useState();\n  useEffect(() => {\n    socketRef.current = io.connect(\"http://localhost:9000\");\n    navigator.mediaDevices.getUserMedia({\n      video: videoConstraints,\n      audio: true\n    }).then(stream => {\n      userVideo.current.srcObject = stream;\n      console.log(\"USERVIDEO\" + stream); // LOGIC THAT USER HAS JOINED THE ROOM\n      //THIS EVENT Is NOT CACHED AT BACKEND\n      //.emit means sending  to backend\n\n      socketRef.current.emit(\"JOINED ROOM\");\n      socketRef.current.emit(\"join room\", roomID); // Recieve users from backened\n      // if (!props.isAdmin) {\n\n      socketRef.current.on(\"all users\", users => {\n        //peers is for how many videos are rendering\n        console.log(users.length);\n        numUsers.current = users.length + 1;\n        const peersForVideo = [];\n        users.forEach(userID => {\n          console.log(userID + \" USER ID OF USER IN THE ROOM \");\n          console.log(socketRef.current); //socketRef.current.id is the of user currently joined\n          // UserID  id's of all those inside the meeting\n\n          const peer = createPeer(userID, socketRef.current.id, stream); //peersRef is for which is having connection with which\n\n          peersRef.current.push({\n            peerID: userID,\n            peer\n          });\n          peersForVideo.push(peer);\n        });\n        setPeers(peersForVideo);\n        console.log(peers);\n      }); //PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\n      //.on means recieving from backend\n\n      socketRef.current.on(\"user joined\", payload => {\n        const peer = addPeer(payload.signal, payload.callerID, stream);\n        peersRef.current.push({\n          peerID: payload.callerID,\n          peer\n        });\n        setPeers(users => [...users, peer]);\n      });\n      socketRef.current.on(\"receiving returned signal\", payload => {\n        // signal has been send to multiple now multiple users are sending back the signal to caller\n        const item = peersRef.current.find(p => p.peerID === payload.id);\n        console.log(item);\n        item.peer.signal(payload.signal);\n      }); // }\n    });\n  }, []);\n\n  function createPeer(userToSignal, callerID, stream) {\n    console.log(\"CREATE PEER\");\n    const peer = new Peer({\n      initiator: true,\n      //trickle wait for all the data to send makes it slow\n      trickle: false,\n      stream\n    }); //generates signal\n    //sending to backend\n\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"sending signal\", {\n        userToSignal,\n        callerID,\n        signal\n      });\n    });\n    return peer;\n  }\n\n  function addPeer(incomingSignal, callerID, stream) {\n    console.log(\"Add Peer\");\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    }); // 1 accepting the incoming signal that this will return the signal\n\n    peer.signal(incomingSignal);\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"returning signal\", {\n        signal,\n        callerID\n      });\n    });\n    return peer;\n  } // console.log(\"PEERS \" + JSON.stringify(peers));\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      style: vidStyle,\n      muted: true,\n      ref: userVideo,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 4\n    }, this), peers.map((peer, index) => {\n      return /*#__PURE__*/_jsxDEV(Video, {\n        peer: peer\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 12\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 3\n  }, this);\n};\n\n_s2(Room, \"XEsaZgDOCHOFPPbLw5GcR6hhpDI=\");\n\n_c2 = Room;\nexport default Room;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Video\");\n$RefreshReg$(_c2, \"Room\");","map":{"version":3,"sources":["C:/Users/jayka/web development/google-meet/client/src/components/Room.js"],"names":["React","useEffect","useRef","useState","io","Peer","vidStyle","height","width","padding","paddingBottom","Video","props","ref","console","log","peer","on","stream","current","srcObject","videoConstraints","window","innerHeight","innerWidth","Room","numUsers","peers","setPeers","socketRef","userVideo","peersRef","roomID","id","streamObj","setStreamObj","screenCastStream","setScreenCastStream","connect","navigator","mediaDevices","getUserMedia","video","audio","then","emit","users","length","peersForVideo","forEach","userID","createPeer","push","peerID","payload","addPeer","signal","callerID","item","find","p","userToSignal","initiator","trickle","incomingSignal","map","index"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,IAAP,MAAiB,aAAjB;;AAEA,MAAMC,QAAQ,GAAG;AAChB;AACA;AACAC,EAAAA,MAAM,EAAE,KAHQ;AAIhBC,EAAAA,KAAK,EAAE,KAJS;AAMhBC,EAAAA,OAAO,EAAE,MANO;AAOhBC,EAAAA,aAAa,EAAE;AAPC,CAAjB;;AAUA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAMC,GAAG,GAAGX,MAAM,EAAlB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACfa,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,IAAlB;AACAJ,IAAAA,KAAK,CAACI,IAAN,CAAWC,EAAX,CAAc,QAAd,EAAyBC,MAAD,IAAY;AACnCJ,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAYG,MAAxB;AACAL,MAAAA,GAAG,CAACM,OAAJ,CAAYC,SAAZ,GAAwBF,MAAxB;AACA,KAHD;AAIA,GANQ,EAMN,EANM,CAAT;AAQA,sBAAO;AAAO,IAAA,KAAK,EAAEZ,QAAd;AAAwB,IAAA,QAAQ,MAAhC;AAAiC,IAAA,GAAG,EAAEO;AAAtC;AAAA;AAAA;AAAA;AAAA,UAAP;AACA,CAZD;;GAAMF,K;;KAAAA,K;AAcN,MAAMU,gBAAgB,GAAG;AACxBd,EAAAA,MAAM,EAAEe,MAAM,CAACC,WAAP,GAAqB,CADL;AAExBf,EAAAA,KAAK,EAAEc,MAAM,CAACE,UAAP,GAAoB;AAFH,CAAzB;;AAKA,MAAMC,IAAI,GAAIb,KAAD,IAAW;AAAA;;AACvB,QAAMc,QAAQ,GAAGxB,MAAM,EAAvB;AACA,QAAM,CAACyB,KAAD,EAAQC,QAAR,IAAoBzB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM0B,SAAS,GAAG3B,MAAM,EAAxB;AACA,QAAM4B,SAAS,GAAG5B,MAAM,EAAxB;AACA,QAAM6B,QAAQ,GAAG7B,MAAM,CAAC,EAAD,CAAvB;AACA,QAAM8B,MAAM,GAAGpB,KAAK,CAACqB,EAArB;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BhC,QAAQ,EAA1C;AACA,QAAM,CAACiC,gBAAD,EAAmBC,mBAAnB,IAA0ClC,QAAQ,EAAxD;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACf4B,IAAAA,SAAS,CAACV,OAAV,GAAoBf,EAAE,CAACkC,OAAH,CAAW,uBAAX,CAApB;AACAC,IAAAA,SAAS,CAACC,YAAV,CACEC,YADF,CACe;AAAEC,MAAAA,KAAK,EAAErB,gBAAT;AAA2BsB,MAAAA,KAAK,EAAE;AAAlC,KADf,EAEEC,IAFF,CAEQ1B,MAAD,IAAY;AACjBY,MAAAA,SAAS,CAACX,OAAV,CAAkBC,SAAlB,GAA8BF,MAA9B;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAcG,MAA1B,EAFiB,CAGjB;AAEA;AACA;;AACAW,MAAAA,SAAS,CAACV,OAAV,CAAkB0B,IAAlB,CAAuB,aAAvB;AACAhB,MAAAA,SAAS,CAACV,OAAV,CAAkB0B,IAAlB,CAAuB,WAAvB,EAAoCb,MAApC,EARiB,CASjB;AACA;;AAEAH,MAAAA,SAAS,CAACV,OAAV,CAAkBF,EAAlB,CAAqB,WAArB,EAAmC6B,KAAD,IAAW;AAC5C;AACAhC,QAAAA,OAAO,CAACC,GAAR,CAAY+B,KAAK,CAACC,MAAlB;AACArB,QAAAA,QAAQ,CAACP,OAAT,GAAmB2B,KAAK,CAACC,MAAN,GAAe,CAAlC;AACA,cAAMC,aAAa,GAAG,EAAtB;AACAF,QAAAA,KAAK,CAACG,OAAN,CAAeC,MAAD,IAAY;AACzBpC,UAAAA,OAAO,CAACC,GAAR,CAAYmC,MAAM,GAAG,+BAArB;AACApC,UAAAA,OAAO,CAACC,GAAR,CAAYc,SAAS,CAACV,OAAtB,EAFyB,CAGzB;AACA;;AAEA,gBAAMH,IAAI,GAAGmC,UAAU,CAACD,MAAD,EAASrB,SAAS,CAACV,OAAV,CAAkBc,EAA3B,EAA+Bf,MAA/B,CAAvB,CANyB,CAOzB;;AACAa,UAAAA,QAAQ,CAACZ,OAAT,CAAiBiC,IAAjB,CAAsB;AACrBC,YAAAA,MAAM,EAAEH,MADa;AAErBlC,YAAAA;AAFqB,WAAtB;AAKAgC,UAAAA,aAAa,CAACI,IAAd,CAAmBpC,IAAnB;AACA,SAdD;AAeAY,QAAAA,QAAQ,CAACoB,aAAD,CAAR;AACAlC,QAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACA,OAtBD,EAZiB,CAmCjB;AACA;;AACAE,MAAAA,SAAS,CAACV,OAAV,CAAkBF,EAAlB,CAAqB,aAArB,EAAqCqC,OAAD,IAAa;AAChD,cAAMtC,IAAI,GAAGuC,OAAO,CAACD,OAAO,CAACE,MAAT,EAAiBF,OAAO,CAACG,QAAzB,EAAmCvC,MAAnC,CAApB;AAEAa,QAAAA,QAAQ,CAACZ,OAAT,CAAiBiC,IAAjB,CAAsB;AACrBC,UAAAA,MAAM,EAAEC,OAAO,CAACG,QADK;AAErBzC,UAAAA;AAFqB,SAAtB;AAIAY,QAAAA,QAAQ,CAAEkB,KAAD,IAAW,CAAC,GAAGA,KAAJ,EAAW9B,IAAX,CAAZ,CAAR;AACA,OARD;AASAa,MAAAA,SAAS,CAACV,OAAV,CAAkBF,EAAlB,CAAqB,2BAArB,EAAmDqC,OAAD,IAAa;AAC9D;AACA,cAAMI,IAAI,GAAG3B,QAAQ,CAACZ,OAAT,CAAiBwC,IAAjB,CAAuBC,CAAD,IAAOA,CAAC,CAACP,MAAF,KAAaC,OAAO,CAACrB,EAAlD,CAAb;AACAnB,QAAAA,OAAO,CAACC,GAAR,CAAY2C,IAAZ;AACAA,QAAAA,IAAI,CAAC1C,IAAL,CAAUwC,MAAV,CAAiBF,OAAO,CAACE,MAAzB;AACA,OALD,EA9CiB,CAoDjB;AACA,KAvDF;AAwDA,GA1DQ,EA0DN,EA1DM,CAAT;;AA4DA,WAASL,UAAT,CAAoBU,YAApB,EAAkCJ,QAAlC,EAA4CvC,MAA5C,EAAoD;AACnDJ,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,UAAMC,IAAI,GAAG,IAAIX,IAAJ,CAAS;AACrByD,MAAAA,SAAS,EAAE,IADU;AAErB;AACAC,MAAAA,OAAO,EAAE,KAHY;AAIrB7C,MAAAA;AAJqB,KAAT,CAAb,CAFmD,CAQnD;AACA;;AACAF,IAAAA,IAAI,CAACC,EAAL,CAAQ,QAAR,EAAmBuC,MAAD,IAAY;AAC7B3B,MAAAA,SAAS,CAACV,OAAV,CAAkB0B,IAAlB,CAAuB,gBAAvB,EAAyC;AACxCgB,QAAAA,YADwC;AAExCJ,QAAAA,QAFwC;AAGxCD,QAAAA;AAHwC,OAAzC;AAKA,KAND;AAOA,WAAOxC,IAAP;AACA;;AAED,WAASuC,OAAT,CAAiBS,cAAjB,EAAiCP,QAAjC,EAA2CvC,MAA3C,EAAmD;AAClDJ,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,UAAMC,IAAI,GAAG,IAAIX,IAAJ,CAAS;AACrByD,MAAAA,SAAS,EAAE,KADU;AAErBC,MAAAA,OAAO,EAAE,KAFY;AAGrB7C,MAAAA;AAHqB,KAAT,CAAb,CAFkD,CAOlD;;AACAF,IAAAA,IAAI,CAACwC,MAAL,CAAYQ,cAAZ;AAEAhD,IAAAA,IAAI,CAACC,EAAL,CAAQ,QAAR,EAAmBuC,MAAD,IAAY;AAC7B3B,MAAAA,SAAS,CAACV,OAAV,CAAkB0B,IAAlB,CAAuB,kBAAvB,EAA2C;AAAEW,QAAAA,MAAF;AAAUC,QAAAA;AAAV,OAA3C;AACA,KAFD;AAGA,WAAOzC,IAAP;AACA,GAxGsB,CA0GvB;;;AACA,sBACC;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACC;AAAO,MAAA,KAAK,EAAEV,QAAd;AAAwB,MAAA,KAAK,MAA7B;AAA8B,MAAA,GAAG,EAAEwB,SAAnC;AAA8C,MAAA,QAAQ;AAAtD;AAAA;AAAA;AAAA;AAAA,YADD,EAEEH,KAAK,CAACsC,GAAN,CAAU,CAACjD,IAAD,EAAOkD,KAAP,KAAiB;AAC3B,0BAAO,QAAC,KAAD;AAAmB,QAAA,IAAI,EAAElD;AAAzB,SAAYkD,KAAZ;AAAA;AAAA;AAAA;AAAA,cAAP;AACA,KAFA,CAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAQA,CAnHD;;IAAMzC,I;;MAAAA,I;AAqHN,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\n\r\nconst vidStyle = {\r\n\t// height: \"calc(50vh -90px)\",\r\n\t// borderRadius:\"10px\"\r\n\theight: \"45%\",\r\n\twidth: \"45%\",\r\n\r\n\tpadding: \"10px\",\r\n\tpaddingBottom: \"5px\",\r\n};\r\n\r\nconst Video = (props) => {\r\n\tconst ref = useRef();\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log(props.peer);\r\n\t\tprops.peer.on(\"stream\", (stream) => {\r\n\t\t\tconsole.log(\"ENTE0RD\" + stream);\r\n\t\t\tref.current.srcObject = stream;\r\n\t\t});\r\n\t}, []);\r\n\r\n\treturn <video style={vidStyle} autoPlay ref={ref} />;\r\n};\r\n\r\nconst videoConstraints = {\r\n\theight: window.innerHeight / 2,\r\n\twidth: window.innerWidth / 2,\r\n};\r\n\r\nconst Room = (props) => {\r\n\tconst numUsers = useRef();\r\n\tconst [peers, setPeers] = useState([]);\r\n\tconst socketRef = useRef();\r\n\tconst userVideo = useRef();\r\n\tconst peersRef = useRef([]);\r\n\tconst roomID = props.id;\r\n\tconst [streamObj, setStreamObj] = useState();\r\n\tconst [screenCastStream, setScreenCastStream] = useState();\r\n\r\n\tuseEffect(() => {\r\n\t\tsocketRef.current = io.connect(\"http://localhost:9000\");\r\n\t\tnavigator.mediaDevices\r\n\t\t\t.getUserMedia({ video: videoConstraints, audio: true })\r\n\t\t\t.then((stream) => {\r\n\t\t\t\tuserVideo.current.srcObject = stream;\r\n\t\t\t\tconsole.log(\"USERVIDEO\" + stream);\r\n\t\t\t\t// LOGIC THAT USER HAS JOINED THE ROOM\r\n\r\n\t\t\t\t//THIS EVENT Is NOT CACHED AT BACKEND\r\n\t\t\t\t//.emit means sending  to backend\r\n\t\t\t\tsocketRef.current.emit(\"JOINED ROOM\");\r\n\t\t\t\tsocketRef.current.emit(\"join room\", roomID);\r\n\t\t\t\t// Recieve users from backened\r\n\t\t\t\t// if (!props.isAdmin) {\r\n\r\n\t\t\t\tsocketRef.current.on(\"all users\", (users) => {\r\n\t\t\t\t\t//peers is for how many videos are rendering\r\n\t\t\t\t\tconsole.log(users.length);\r\n\t\t\t\t\tnumUsers.current = users.length + 1;\r\n\t\t\t\t\tconst peersForVideo = [];\r\n\t\t\t\t\tusers.forEach((userID) => {\r\n\t\t\t\t\t\tconsole.log(userID + \" USER ID OF USER IN THE ROOM \");\r\n\t\t\t\t\t\tconsole.log(socketRef.current);\r\n\t\t\t\t\t\t//socketRef.current.id is the of user currently joined\r\n\t\t\t\t\t\t// UserID  id's of all those inside the meeting\r\n\r\n\t\t\t\t\t\tconst peer = createPeer(userID, socketRef.current.id, stream);\r\n\t\t\t\t\t\t//peersRef is for which is having connection with which\r\n\t\t\t\t\t\tpeersRef.current.push({\r\n\t\t\t\t\t\t\tpeerID: userID,\r\n\t\t\t\t\t\t\tpeer,\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tpeersForVideo.push(peer);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsetPeers(peersForVideo);\r\n\t\t\t\t\tconsole.log(peers);\r\n\t\t\t\t});\r\n\t\t\t\t//PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\r\n\t\t\t\t//.on means recieving from backend\r\n\t\t\t\tsocketRef.current.on(\"user joined\", (payload) => {\r\n\t\t\t\t\tconst peer = addPeer(payload.signal, payload.callerID, stream);\r\n\r\n\t\t\t\t\tpeersRef.current.push({\r\n\t\t\t\t\t\tpeerID: payload.callerID,\r\n\t\t\t\t\t\tpeer,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsetPeers((users) => [...users, peer]);\r\n\t\t\t\t});\r\n\t\t\t\tsocketRef.current.on(\"receiving returned signal\", (payload) => {\r\n\t\t\t\t\t// signal has been send to multiple now multiple users are sending back the signal to caller\r\n\t\t\t\t\tconst item = peersRef.current.find((p) => p.peerID === payload.id);\r\n\t\t\t\t\tconsole.log(item);\r\n\t\t\t\t\titem.peer.signal(payload.signal);\r\n\t\t\t\t});\r\n\t\t\t\t// }\r\n\t\t\t});\r\n\t}, []);\r\n\r\n\tfunction createPeer(userToSignal, callerID, stream) {\r\n\t\tconsole.log(\"CREATE PEER\");\r\n\t\tconst peer = new Peer({\r\n\t\t\tinitiator: true,\r\n\t\t\t//trickle wait for all the data to send makes it slow\r\n\t\t\ttrickle: false,\r\n\t\t\tstream,\r\n\t\t});\r\n\t\t//generates signal\r\n\t\t//sending to backend\r\n\t\tpeer.on(\"signal\", (signal) => {\r\n\t\t\tsocketRef.current.emit(\"sending signal\", {\r\n\t\t\t\tuserToSignal,\r\n\t\t\t\tcallerID,\r\n\t\t\t\tsignal,\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn peer;\r\n\t}\r\n\r\n\tfunction addPeer(incomingSignal, callerID, stream) {\r\n\t\tconsole.log(\"Add Peer\");\r\n\t\tconst peer = new Peer({\r\n\t\t\tinitiator: false,\r\n\t\t\ttrickle: false,\r\n\t\t\tstream,\r\n\t\t});\r\n\t\t// 1 accepting the incoming signal that this will return the signal\r\n\t\tpeer.signal(incomingSignal);\r\n\r\n\t\tpeer.on(\"signal\", (signal) => {\r\n\t\t\tsocketRef.current.emit(\"returning signal\", { signal, callerID });\r\n\t\t});\r\n\t\treturn peer;\r\n\t}\r\n\r\n\t// console.log(\"PEERS \" + JSON.stringify(peers));\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t<video style={vidStyle} muted ref={userVideo} autoPlay />\r\n\t\t\t{peers.map((peer, index) => {\r\n\t\t\t\treturn <Video key={index} peer={peer} />;\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Room;\r\n"]},"metadata":{},"sourceType":"module"}