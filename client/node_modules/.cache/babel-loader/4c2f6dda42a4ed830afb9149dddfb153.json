{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayka\\\\web development\\\\google-meet\\\\client\\\\src\\\\components\\\\MeetingPage\\\\Room.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState, useReducer } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport MeetingHeader from \"./meetingHeader\";\nimport MeetingFooter from \"./meetingFooter\";\nimport MeetingInfo from \"./meetingInfo\";\nimport Alert from \"./alert\";\nimport Messenger from \"./messenger\";\nimport { Player, ControlBar, PlayToggle } from \"video-react\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vidStyle = {\n  height: `264.15px`,\n  width: \"639.9px\",\n  padding: \"10px\",\n  paddingBottom: \"5px\",\n  objectFit: \"fill\"\n};\n\nconst Video = props => {\n  _s();\n\n  const ref = useRef(); // console.log(\"VIDEO CALLED\" + JSON.stringify(props.peer));\n\n  useEffect(() => {\n    props.peer.on(\"stream\", stream => {\n      console.log(\"ENTE0RD\" + stream);\n      ref.current.srcObject = stream;\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"video\", {\n    style: vidStyle,\n    muted: !props.isAudio,\n    ref: ref,\n    autoPlay: true,\n    controls: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Video, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n_c = Video;\n\nconst MessageListReducer = (state, action) => {\n  // let draftState = [...state];\n  switch (action.type) {\n    case \"addMessage\":\n      return [...state, action.payload];\n\n    default:\n      return state;\n  }\n};\n\n_c2 = MessageListReducer;\n\nconst Room = ({\n  id,\n  isAdmin,\n  setMeetingInfoPopUp,\n  url,\n  meetingInfoPopUp\n}) => {\n  _s2();\n\n  const [isMessenger, setMessenger] = useState(false);\n  const numUsers = useRef();\n  let history = useHistory();\n  const [peers, setPeers] = useState([]);\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const currentPeer = useRef();\n  const adminPeer = useRef();\n  const screenStream = useRef();\n  const roomID = id;\n  const [isAudio, setIsAudio] = useState(false);\n  const [streamObj, setStreamObj] = useState();\n  const [screenCastStream, setScreenCastStream] = useState();\n  const [isPresenting, setIsPresenting] = useState();\n  const [isVideo, setIsVideo] = useState(true);\n  const initialState = [];\n  const [messageListState, messgListReducer] = useReducer(MessageListReducer, initialState); // const [messageList, setMessageList] = useState({ type: \"\", payload: {} });\n\n  const [messageAlert, setMessageAlert] = useState({});\n  let alertTimeout = null;\n\n  const formatDate = () => {\n    return moment().format(\"LT\");\n  };\n\n  useEffect(() => {\n    socketRef.current = io.connect(\"/\");\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      setStreamObj(stream);\n      userVideo.current.srcObject = stream;\n      console.log(userVideo.current); // LOGIC THAT USER HAS JOINED THE ROOM\n      //THIS EVENT Is NOT CACHED AT BACKEND\n      //.emit means sending  to backend\n\n      socketRef.current.emit(\"JOINED ROOM\");\n      socketRef.current.emit(\"join room\", roomID); // Recieve users from backened\n      // if (!props.isAdmin) {\n\n      socketRef.current.on(\"all users\", users => {\n        //peers is for how many videos are rendering\n        console.log(users);\n        const peersForVideo = [];\n        users.forEach(userID => {\n          console.log(userID + \" USER ID OF USER IN THE ROOM \");\n          console.log(socketRef.current); //socketRef.current.id is the of user currently joined\n          // UserID  id's of all those inside the meeting\n\n          const peer = createPeer(userID, socketRef.current.id, stream); //peersRef is for which is having connection with which\n\n          peersRef.current.push({\n            peerID: userID,\n            peer\n          });\n          peersForVideo.push(peer);\n        });\n\n        if (peers.length <= 4) {\n          setPeers(peersForVideo);\n        }\n      }); //PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\n      //.on means recieving from backend\n\n      socketRef.current.on(\"user joined\", payload => {\n        const peer = addPeer(payload.signal, payload.callerID, stream);\n        peersRef.current.push({\n          peerID: payload.callerID,\n          peer\n        });\n        setPeers(users => [...users, peer]);\n      });\n      socketRef.current.on(\"receiving returned signal\", payload => {\n        // signal has been send to multiple now multiple users are sending back the signal to caller\n        const item = peersRef.current.find(p => p.peerID === payload.id);\n        console.log(item);\n        item.peer.signal(payload.signal); // currentPeer.current = item.peer;\n        // returningSignal()\n      }); // }\n    });\n  }, []);\n\n  function createPeer(userToSignal, callerID, stream) {\n    console.log(\"CREATE PEER\");\n    const peer = new Peer({\n      initiator: true,\n      //trickle wait for all the data to send makes it slow\n      trickle: false,\n      stream\n    });\n    currentPeer.current = peer; //generates signal\n    //sending to backend\n\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"sending signal\", {\n        userToSignal,\n        callerID,\n        signal\n      });\n    });\n    peer.on(\"data\", data => {\n      console.log(data + \"DATA\");\n      clearTimeout(alertTimeout);\n      messgListReducer({\n        type: \"addMessage\",\n        payload: {\n          user: userToSignal,\n          msg: data.toString(),\n          time: formatDate()\n        }\n      });\n      setMessageAlert({\n        alert: true,\n        isPopup: true,\n        payload: {\n          user: userToSignal,\n          msg: data.toString()\n        }\n      });\n      alertTimeout = setTimeout(() => {\n        setMessageAlert({ ...messageAlert,\n          isPopup: false,\n          payload: {}\n        });\n      }, 100000);\n    });\n    console.log(formatDate());\n    return peer;\n  }\n\n  function addPeer(incomingSignal, callerID, stream) {\n    console.log(\"Add Peer\");\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    adminPeer.current = peer; // 1 accepting the incoming signal that this will return the signal\n\n    peer.signal(incomingSignal);\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"returning signal\", {\n        signal,\n        callerID\n      });\n    }); // peersRef.current.map((peer, index) => {\n    // \tconsole.log(peer.peerID);\n    // \tif (peer.peerID !== socketRef.current.id) {\n    // \t\tpeer.peer.on(\"data\", (data) => {\n    // \t\t\tconsole.log(data + \"ADD DATA\");\n    // \t\t\tclearTimeout(alertTimeout);\n    // \t\t\tmessgListReducer({\n    // \t\t\t\ttype: \"addMessage\",\n    // \t\t\t\tpayload: {\n    // \t\t\t\t\tuser: socketRef.current.id,\n    // \t\t\t\t\tmsg: data.toString(),\n    // \t\t\t\t\ttime: formatDate(),\n    // \t\t\t\t},\n    // \t\t\t});\n    // \t\t\tsetMessageAlert({\n    // \t\t\t\talert: true,\n    // \t\t\t\tisPopup: true,\n    // \t\t\t\tpayload: {\n    // \t\t\t\t\tuser: socketRef.current.id,\n    // \t\t\t\t\tmsg: data.toString(),\n    // \t\t\t\t},\n    // \t\t\t});\n    // \t\t\talertTimeout = setTimeout(() => {\n    // \t\t\t\tsetMessageAlert({\n    // \t\t\t\t\t...messageAlert,\n    // \t\t\t\t\tisPopup: false,\n    // \t\t\t\t\tpayload: {},\n    // \t\t\t\t});\n    // \t\t\t}, 100000);\n    // \t\t});\n    // \t}\n    // });\n\n    peer.on(\"data\", data => {\n      console.log(data + \"ADD DATA\");\n      clearTimeout(alertTimeout);\n      messgListReducer({\n        type: \"addMessage\",\n        payload: {\n          user: callerID,\n          msg: data.toString(),\n          time: formatDate()\n        }\n      });\n      setMessageAlert({\n        alert: true,\n        isPopup: true,\n        payload: {\n          user: callerID,\n          msg: data.toString()\n        }\n      });\n      alertTimeout = setTimeout(() => {\n        setMessageAlert({ ...messageAlert,\n          isPopup: false,\n          payload: {}\n        });\n      }, 100000);\n    });\n    return peer;\n  }\n\n  const screenShare = () => {\n    navigator.mediaDevices //Cursor True is means sending cursor also of the person sharing screen to the person recieving the screen\n    .getDisplayMedia({\n      cursor: true\n    }).then(screenStream => {\n      console.log(\"SCREEN STREAM\", screenStream);\n      console.log(userVideo.current);\n      peers.map((peer, index) => {\n        console.log(peer);\n        peer.replaceTrack( //0th track is the screen track\n        streamObj.getVideoTracks()[0], screenStream.getVideoTracks()[0], streamObj);\n      });\n      setIsPresenting(true); //WHEN SHARING STOPS RETURN TO NORMAl STATE\n      //RESPONSIBLE FOR WORKING OF STOP BUTTON\n\n      setScreenCastStream(screenStream);\n\n      screenStream.getTracks()[0].onended = () => {\n        peers.map((peer, index) => {\n          console.log(\"CALLED\");\n          peer.replaceTrack(screenStream.getVideoTracks()[0], streamObj.getVideoTracks()[0], streamObj);\n        });\n        setIsPresenting(false);\n      };\n    });\n  };\n\n  const stopScreenShare = () => {\n    screenCastStream.getVideoTracks().forEach(function (track) {\n      track.stop();\n    }); // Replace with video tracks\n\n    peers.map((peer, index) => {\n      peer.replaceTrack(screenCastStream.getVideoTracks()[0], streamObj.getVideoTracks()[0], streamObj);\n      setIsPresenting(false);\n    });\n  };\n\n  const toggleVideo = value => {\n    if (value) {\n      userVideo.current.play();\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(stream => {\n        userVideo.current.srcObject = stream;\n      });\n    } else {\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(stream => {\n        userVideo.current.srcObject = stream.stop;\n      });\n    }\n\n    setIsVideo(value);\n  };\n\n  const disconnect = () => {\n    console.log(\"Clicked\");\n    socketRef.current.disconnect();\n    history.push(\"/\");\n  }; // console.log(messgListReducer);\n\n\n  const sendMsg = msg => {\n    //Send From one peer to another\n    if (currentPeer.current) {\n      currentPeer.current.send(msg);\n    }\n\n    if (adminPeer.current) {\n      adminPeer.current.send(msg);\n    }\n\n    messgListReducer({\n      type: \"addMessage\",\n      payload: {\n        msg: msg,\n        user: socketRef.current.id,\n        time: formatDate()\n      }\n    });\n  };\n\n  useEffect(() => {\n    console.log(messageListState);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"videoScreen\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        style: vidStyle,\n        muted: !isAudio,\n        ref: userVideo,\n        autoPlay: true,\n        controls: isPresenting\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 5\n      }, this), peers.map((peer, index) => {\n        return /*#__PURE__*/_jsxDEV(Video, {\n          peer: peer,\n          numUsers: numUsers.current,\n          isAudio: isAudio\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 7\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MeetingHeader, {\n      setMessenger: setMessenger,\n      id: id,\n      setMessageAlert: setMessageAlert,\n      messageAlert: messageAlert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MeetingFooter, {\n      isPresenting: isPresenting,\n      screenShare: screenShare,\n      stopScreenShare: stopScreenShare,\n      disconnect: disconnect,\n      setIsAudio: setIsAudio,\n      isVideo: isVideo,\n      isAudio: isAudio,\n      toggleVideo: toggleVideo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 4\n    }, this), isAdmin && meetingInfoPopUp && /*#__PURE__*/_jsxDEV(MeetingInfo, {\n      url: url,\n      setMeetingInfoPopUp: setMeetingInfoPopUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 5\n    }, this), isMessenger ? /*#__PURE__*/_jsxDEV(Messenger, {\n      setMessenger: setMessenger,\n      sendMsg: sendMsg,\n      messageListState: messageListState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 5\n    }, this) : messageAlert.isPopup && /*#__PURE__*/_jsxDEV(Alert, {\n      messageAlert: messageAlert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 388,\n    columnNumber: 3\n  }, this);\n};\n\n_s2(Room, \"TxYZaxdSXvqCPinHFivwwboqyi0=\", false, function () {\n  return [useHistory];\n});\n\n_c3 = Room;\nexport default Room;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Video\");\n$RefreshReg$(_c2, \"MessageListReducer\");\n$RefreshReg$(_c3, \"Room\");","map":{"version":3,"sources":["C:/Users/jayka/web development/google-meet/client/src/components/MeetingPage/Room.js"],"names":["React","useEffect","useRef","useState","useReducer","useHistory","io","Peer","MeetingHeader","MeetingFooter","MeetingInfo","Alert","Messenger","Player","ControlBar","PlayToggle","moment","vidStyle","height","width","padding","paddingBottom","objectFit","Video","props","ref","peer","on","stream","console","log","current","srcObject","isAudio","MessageListReducer","state","action","type","payload","Room","id","isAdmin","setMeetingInfoPopUp","url","meetingInfoPopUp","isMessenger","setMessenger","numUsers","history","peers","setPeers","socketRef","userVideo","peersRef","currentPeer","adminPeer","screenStream","roomID","setIsAudio","streamObj","setStreamObj","screenCastStream","setScreenCastStream","isPresenting","setIsPresenting","isVideo","setIsVideo","initialState","messageListState","messgListReducer","messageAlert","setMessageAlert","alertTimeout","formatDate","format","connect","navigator","mediaDevices","getUserMedia","video","audio","then","emit","users","peersForVideo","forEach","userID","createPeer","push","peerID","length","addPeer","signal","callerID","item","find","p","userToSignal","initiator","trickle","data","clearTimeout","user","msg","toString","time","alert","isPopup","setTimeout","incomingSignal","screenShare","getDisplayMedia","cursor","map","index","replaceTrack","getVideoTracks","getTracks","onended","stopScreenShare","track","stop","toggleVideo","value","play","disconnect","sendMsg","send"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState, useReducer } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\nimport MeetingHeader from \"./meetingHeader\";\r\nimport MeetingFooter from \"./meetingFooter\";\r\nimport MeetingInfo from \"./meetingInfo\";\r\nimport Alert from \"./alert\";\r\nimport Messenger from \"./messenger\";\r\nimport { Player, ControlBar, PlayToggle } from \"video-react\";\r\nimport moment from \"moment\";\r\n\r\nconst vidStyle = {\r\n\theight: `264.15px`,\r\n\twidth: \"639.9px\",\r\n\tpadding: \"10px\",\r\n\tpaddingBottom: \"5px\",\r\n\tobjectFit: \"fill\",\r\n};\r\n\r\nconst Video = (props) => {\r\n\tconst ref = useRef();\r\n\t// console.log(\"VIDEO CALLED\" + JSON.stringify(props.peer));\r\n\tuseEffect(() => {\r\n\t\tprops.peer.on(\"stream\", (stream) => {\r\n\t\t\tconsole.log(\"ENTE0RD\" + stream);\r\n\t\t\tref.current.srcObject = stream;\r\n\t\t});\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<video\r\n\t\t\tstyle={vidStyle}\r\n\t\t\tmuted={!props.isAudio}\r\n\t\t\tref={ref}\r\n\t\t\tautoPlay\r\n\t\t\tcontrols\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nconst MessageListReducer = (state, action) => {\r\n\t// let draftState = [...state];\r\n\tswitch (action.type) {\r\n\t\tcase \"addMessage\":\r\n\t\t\treturn [...state, action.payload];\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst Room = ({ id, isAdmin, setMeetingInfoPopUp, url, meetingInfoPopUp }) => {\r\n\tconst [isMessenger, setMessenger] = useState(false);\r\n\r\n\tconst numUsers = useRef();\r\n\tlet history = useHistory();\r\n\tconst [peers, setPeers] = useState([]);\r\n\tconst socketRef = useRef();\r\n\tconst userVideo = useRef();\r\n\tconst peersRef = useRef([]);\r\n\tconst currentPeer = useRef();\r\n\tconst adminPeer = useRef();\r\n\tconst screenStream = useRef();\r\n\tconst roomID = id;\r\n\tconst [isAudio, setIsAudio] = useState(false);\r\n\tconst [streamObj, setStreamObj] = useState();\r\n\tconst [screenCastStream, setScreenCastStream] = useState();\r\n\tconst [isPresenting, setIsPresenting] = useState();\r\n\tconst [isVideo, setIsVideo] = useState(true);\r\n\tconst initialState = [];\r\n\tconst [messageListState, messgListReducer] = useReducer(\r\n\t\tMessageListReducer,\r\n\t\tinitialState\r\n\t);\r\n\t// const [messageList, setMessageList] = useState({ type: \"\", payload: {} });\r\n\tconst [messageAlert, setMessageAlert] = useState({});\r\n\r\n\tlet alertTimeout = null;\r\n\r\n\tconst formatDate = () => {\r\n\t\treturn moment().format(\"LT\");\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tsocketRef.current = io.connect(\"/\");\r\n\t\tnavigator.mediaDevices\r\n\t\t\t.getUserMedia({ video: true, audio: true })\r\n\t\t\t.then((stream) => {\r\n\t\t\t\tsetStreamObj(stream);\r\n\t\t\t\tuserVideo.current.srcObject = stream;\r\n\r\n\t\t\t\tconsole.log(userVideo.current);\r\n\r\n\t\t\t\t// LOGIC THAT USER HAS JOINED THE ROOM\r\n\r\n\t\t\t\t//THIS EVENT Is NOT CACHED AT BACKEND\r\n\t\t\t\t//.emit means sending  to backend\r\n\t\t\t\tsocketRef.current.emit(\"JOINED ROOM\");\r\n\t\t\t\tsocketRef.current.emit(\"join room\", roomID);\r\n\t\t\t\t// Recieve users from backened\r\n\t\t\t\t// if (!props.isAdmin) {\r\n\r\n\t\t\t\tsocketRef.current.on(\"all users\", (users) => {\r\n\t\t\t\t\t//peers is for how many videos are rendering\r\nconsole.log(users);\r\n\t\t\t\t\tconst peersForVideo = [];\r\n\t\t\t\t\tusers.forEach((userID) => {\r\n\t\t\t\t\t\tconsole.log(userID + \" USER ID OF USER IN THE ROOM \");\r\n\t\t\t\t\t\tconsole.log(socketRef.current);\r\n\t\t\t\t\t\t//socketRef.current.id is the of user currently joined\r\n\t\t\t\t\t\t// UserID  id's of all those inside the meeting\r\n\r\n\t\t\t\t\t\tconst peer = createPeer(userID, socketRef.current.id, stream);\r\n\t\t\t\t\t\t//peersRef is for which is having connection with which\r\n\t\t\t\t\t\tpeersRef.current.push({\r\n\t\t\t\t\t\t\tpeerID: userID,\r\n\t\t\t\t\t\t\tpeer,\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tpeersForVideo.push(peer);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (peers.length <= 4) {\r\n\t\t\t\t\t\tsetPeers(peersForVideo);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t//PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\r\n\t\t\t\t//.on means recieving from backend\r\n\t\t\t\tsocketRef.current.on(\"user joined\", (payload) => {\r\n\t\t\t\t\tconst peer = addPeer(payload.signal, payload.callerID, stream);\r\n\r\n\t\t\t\t\tpeersRef.current.push({\r\n\t\t\t\t\t\tpeerID: payload.callerID,\r\n\t\t\t\t\t\tpeer,\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tsetPeers((users) => [...users, peer]);\r\n\t\t\t\t});\r\n\t\t\t\tsocketRef.current.on(\"receiving returned signal\", (payload) => {\r\n\t\t\t\t\t// signal has been send to multiple now multiple users are sending back the signal to caller\r\n\t\t\t\t\tconst item = peersRef.current.find((p) => p.peerID === payload.id);\r\n\t\t\t\t\tconsole.log(item);\r\n\r\n\t\t\t\t\titem.peer.signal(payload.signal);\r\n\t\t\t\t\t// currentPeer.current = item.peer;\r\n\t\t\t\t\t// returningSignal()\r\n\t\t\t\t});\r\n\t\t\t\t// }\r\n\t\t\t});\r\n\t}, []);\r\n\r\n\tfunction createPeer(userToSignal, callerID, stream) {\r\n\t\tconsole.log(\"CREATE PEER\");\r\n\t\tconst peer = new Peer({\r\n\t\t\tinitiator: true,\r\n\t\t\t//trickle wait for all the data to send makes it slow\r\n\t\t\ttrickle: false,\r\n\t\t\tstream,\r\n\t\t});\r\n\t\tcurrentPeer.current = peer;\r\n\r\n\t\t//generates signal\r\n\t\t//sending to backend\r\n\t\tpeer.on(\"signal\", (signal) => {\r\n\t\t\tsocketRef.current.emit(\"sending signal\", {\r\n\t\t\t\tuserToSignal,\r\n\t\t\t\tcallerID,\r\n\t\t\t\tsignal,\r\n\t\t\t});\r\n\t\t});\r\n\t\tpeer.on(\"data\", (data) => {\r\n\t\t\tconsole.log(data + \"DATA\");\r\n\t\t\tclearTimeout(alertTimeout);\r\n\t\t\tmessgListReducer({\r\n\t\t\t\ttype: \"addMessage\",\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\tuser: userToSignal,\r\n\t\t\t\t\tmsg: data.toString(),\r\n\t\t\t\t\ttime: formatDate(),\r\n\t\t\t\t},\r\n\t\t\t});\r\n\r\n\t\t\tsetMessageAlert({\r\n\t\t\t\talert: true,\r\n\t\t\t\tisPopup: true,\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\tuser: userToSignal,\r\n\t\t\t\t\tmsg: data.toString(),\r\n\t\t\t\t},\r\n\t\t\t});\r\n\r\n\t\t\talertTimeout = setTimeout(() => {\r\n\t\t\t\tsetMessageAlert({\r\n\t\t\t\t\t...messageAlert,\r\n\t\t\t\t\tisPopup: false,\r\n\t\t\t\t\tpayload: {},\r\n\t\t\t\t});\r\n\t\t\t}, 100000);\r\n\t\t});\r\n\t\tconsole.log(formatDate());\r\n\r\n\t\treturn peer;\r\n\t}\r\n\r\n\tfunction addPeer(incomingSignal, callerID, stream) {\r\n\t\tconsole.log(\"Add Peer\");\r\n\t\tconst peer = new Peer({\r\n\t\t\tinitiator: false,\r\n\t\t\ttrickle: false,\r\n\t\t\tstream,\r\n\t\t});\r\n\t\tadminPeer.current = peer;\r\n\t\t// 1 accepting the incoming signal that this will return the signal\r\n\t\tpeer.signal(incomingSignal);\r\n\r\n\t\tpeer.on(\"signal\", (signal) => {\r\n\t\t\tsocketRef.current.emit(\"returning signal\", { signal, callerID });\r\n\t\t});\r\n\r\n\t\t// peersRef.current.map((peer, index) => {\r\n\t\t// \tconsole.log(peer.peerID);\r\n\t\t// \tif (peer.peerID !== socketRef.current.id) {\r\n\t\t// \t\tpeer.peer.on(\"data\", (data) => {\r\n\t\t// \t\t\tconsole.log(data + \"ADD DATA\");\r\n\t\t// \t\t\tclearTimeout(alertTimeout);\r\n\t\t// \t\t\tmessgListReducer({\r\n\t\t// \t\t\t\ttype: \"addMessage\",\r\n\t\t// \t\t\t\tpayload: {\r\n\t\t// \t\t\t\t\tuser: socketRef.current.id,\r\n\t\t// \t\t\t\t\tmsg: data.toString(),\r\n\t\t// \t\t\t\t\ttime: formatDate(),\r\n\t\t// \t\t\t\t},\r\n\t\t// \t\t\t});\r\n\r\n\t\t// \t\t\tsetMessageAlert({\r\n\t\t// \t\t\t\talert: true,\r\n\t\t// \t\t\t\tisPopup: true,\r\n\t\t// \t\t\t\tpayload: {\r\n\t\t// \t\t\t\t\tuser: socketRef.current.id,\r\n\t\t// \t\t\t\t\tmsg: data.toString(),\r\n\t\t// \t\t\t\t},\r\n\t\t// \t\t\t});\r\n\r\n\t\t// \t\t\talertTimeout = setTimeout(() => {\r\n\t\t// \t\t\t\tsetMessageAlert({\r\n\t\t// \t\t\t\t\t...messageAlert,\r\n\t\t// \t\t\t\t\tisPopup: false,\r\n\t\t// \t\t\t\t\tpayload: {},\r\n\t\t// \t\t\t\t});\r\n\t\t// \t\t\t}, 100000);\r\n\t\t// \t\t});\r\n\t\t// \t}\r\n\t\t// });\r\n\t\tpeer.on(\"data\", (data) => {\r\n\t\t\tconsole.log(data + \"ADD DATA\");\r\n\t\t\tclearTimeout(alertTimeout);\r\n\t\t\tmessgListReducer({\r\n\t\t\t\ttype: \"addMessage\",\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\tuser: callerID,\r\n\t\t\t\t\tmsg: data.toString(),\r\n\t\t\t\t\ttime: formatDate(),\r\n\t\t\t\t},\r\n\t\t\t});\r\n\r\n\t\t\tsetMessageAlert({\r\n\t\t\t\talert: true,\r\n\t\t\t\tisPopup: true,\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\tuser: callerID,\r\n\t\t\t\t\tmsg: data.toString(),\r\n\t\t\t\t},\r\n\t\t\t});\r\n\r\n\t\t\talertTimeout = setTimeout(() => {\r\n\t\t\t\tsetMessageAlert({\r\n\t\t\t\t\t...messageAlert,\r\n\t\t\t\t\tisPopup: false,\r\n\t\t\t\t\tpayload: {},\r\n\t\t\t\t});\r\n\t\t\t}, 100000);\r\n\t\t});\r\n\t\treturn peer;\r\n\t}\r\n\r\n\tconst screenShare = () => {\r\n\t\tnavigator.mediaDevices\r\n\t\t\t//Cursor True is means sending cursor also of the person sharing screen to the person recieving the screen\r\n\t\t\t.getDisplayMedia({ cursor: true })\r\n\t\t\t.then((screenStream) => {\r\n\t\t\t\tconsole.log(\"SCREEN STREAM\", screenStream);\r\n\t\t\t\tconsole.log(userVideo.current);\r\n\r\n\t\t\t\tpeers.map((peer, index) => {\r\n\t\t\t\t\tconsole.log(peer);\r\n\t\t\t\t\tpeer.replaceTrack(\r\n\t\t\t\t\t\t//0th track is the screen track\r\n\t\t\t\t\t\tstreamObj.getVideoTracks()[0],\r\n\t\t\t\t\t\tscreenStream.getVideoTracks()[0],\r\n\t\t\t\t\t\tstreamObj\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t\tsetIsPresenting(true);\r\n\r\n\t\t\t\t//WHEN SHARING STOPS RETURN TO NORMAl STATE\r\n\t\t\t\t//RESPONSIBLE FOR WORKING OF STOP BUTTON\r\n\t\t\t\tsetScreenCastStream(screenStream);\r\n\r\n\t\t\t\tscreenStream.getTracks()[0].onended = () => {\r\n\t\t\t\t\tpeers.map((peer, index) => {\r\n\t\t\t\t\t\tconsole.log(\"CALLED\");\r\n\t\t\t\t\t\tpeer.replaceTrack(\r\n\t\t\t\t\t\t\tscreenStream.getVideoTracks()[0],\r\n\t\t\t\t\t\t\tstreamObj.getVideoTracks()[0],\r\n\t\t\t\t\t\t\tstreamObj\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsetIsPresenting(false);\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t};\r\n\tconst stopScreenShare = () => {\r\n\t\tscreenCastStream.getVideoTracks().forEach(function (track) {\r\n\t\t\ttrack.stop();\r\n\t\t});\r\n\t\t// Replace with video tracks\r\n\t\tpeers.map((peer, index) => {\r\n\t\t\tpeer.replaceTrack(\r\n\t\t\t\tscreenCastStream.getVideoTracks()[0],\r\n\t\t\t\tstreamObj.getVideoTracks()[0],\r\n\t\t\t\tstreamObj\r\n\t\t\t);\r\n\t\t\tsetIsPresenting(false);\r\n\t\t});\r\n\t};\r\n\r\n\tconst toggleVideo = (value) => {\r\n\t\tif (value) {\r\n\t\t\tuserVideo.current.play();\r\n\t\t\tnavigator.mediaDevices\r\n\t\t\t\t.getUserMedia({ video: true, audio: true })\r\n\t\t\t\t.then((stream) => {\r\n\t\t\t\t\tuserVideo.current.srcObject = stream;\r\n\t\t\t\t});\r\n\t\t} else {\r\n\t\t\tnavigator.mediaDevices\r\n\t\t\t\t.getUserMedia({ video: true, audio: true })\r\n\t\t\t\t.then((stream) => {\r\n\t\t\t\t\tuserVideo.current.srcObject = stream.stop;\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tsetIsVideo(value);\r\n\t};\r\n\r\n\tconst disconnect = () => {\r\n\t\tconsole.log(\"Clicked\");\r\n\t\tsocketRef.current.disconnect();\r\n\t\thistory.push(\"/\");\r\n\t};\r\n\r\n\t// console.log(messgListReducer);\r\n\r\n\tconst sendMsg = (msg) => {\r\n\t\t//Send From one peer to another\r\n\r\n\t\tif (currentPeer.current) {\r\n\t\t\tcurrentPeer.current.send(msg);\r\n\t\t}\r\n\t\tif (adminPeer.current) {\r\n\t\t\tadminPeer.current.send(msg);\r\n\t\t}\r\n\r\n\t\tmessgListReducer({\r\n\t\t\ttype: \"addMessage\",\r\n\t\t\tpayload: {\r\n\t\t\t\tmsg: msg,\r\n\t\t\t\tuser: socketRef.current.id,\r\n\t\t\t\ttime: formatDate(),\r\n\t\t\t},\r\n\t\t});\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log(messageListState);\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div class=\"videoScreen\">\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<video\r\n\t\t\t\t\tstyle={vidStyle}\r\n\t\t\t\t\tmuted={!isAudio}\r\n\t\t\t\t\tref={userVideo}\r\n\t\t\t\t\tautoPlay\r\n\t\t\t\t\tcontrols={isPresenting}\r\n\t\t\t\t/>\r\n\t\t\t\t{peers.map((peer, index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Video\r\n\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\tpeer={peer}\r\n\t\t\t\t\t\t\tnumUsers={numUsers.current}\r\n\t\t\t\t\t\t\tisAudio={isAudio}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t\t<MeetingHeader\r\n\t\t\t\tsetMessenger={setMessenger}\r\n\t\t\t\tid={id}\r\n\t\t\t\tsetMessageAlert={setMessageAlert}\r\n\t\t\t\tmessageAlert={messageAlert}\r\n\t\t\t/>\r\n\r\n\t\t\t<MeetingFooter\r\n\t\t\t\tisPresenting={isPresenting}\r\n\t\t\t\tscreenShare={screenShare}\r\n\t\t\t\tstopScreenShare={stopScreenShare}\r\n\t\t\t\tdisconnect={disconnect}\r\n\t\t\t\tsetIsAudio={setIsAudio}\r\n\t\t\t\tisVideo={isVideo}\r\n\t\t\t\tisAudio={isAudio}\r\n\t\t\t\ttoggleVideo={toggleVideo}\r\n\t\t\t/>\r\n\t\t\t{isAdmin && meetingInfoPopUp && (\r\n\t\t\t\t<MeetingInfo url={url} setMeetingInfoPopUp={setMeetingInfoPopUp} />\r\n\t\t\t)}\r\n\t\t\t{isMessenger ? (\r\n\t\t\t\t<Messenger\r\n\t\t\t\t\tsetMessenger={setMessenger}\r\n\t\t\t\t\tsendMsg={sendMsg}\r\n\t\t\t\t\tmessageListState={messageListState}\r\n\t\t\t\t/>\r\n\t\t\t) : (\r\n\t\t\t\tmessageAlert.isPopup && <Alert messageAlert={messageAlert} />\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Room;\r\n"]},"metadata":{},"sourceType":"module"}