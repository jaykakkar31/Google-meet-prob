{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayka\\\\web development\\\\google-meet\\\\client\\\\src\\\\components\\\\MeetingPage\\\\Room.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState, useReducer } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport MeetingHeader from \"./meetingHeader\";\nimport MeetingFooter from \"./meetingFooter\";\nimport MeetingInfo from \"./meetingInfo\";\nimport Alert from \"./alert\";\nimport Messenger from \"./messenger\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vidStyle = {\n  height: `264.15px`,\n  width: \"639.9px\",\n  padding: \"10px\",\n  paddingBottom: \"5px\",\n  objectFit: \"fill\"\n};\n\nconst Video = props => {\n  _s();\n\n  const ref = useRef(); // console.log(\"VIDEO CALLED\" + JSON.stringify(props.peer));\n\n  useEffect(() => {\n    props.peer.on(\"stream\", stream => {\n      console.log(\"ENTE0RD\" + stream);\n      ref.current.srcObject = stream;\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"video\", {\n    style: vidStyle,\n    muted: !props.isAudio,\n    ref: ref,\n    autoPlay: true,\n    controls: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Video, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n_c = Video;\n\nconst Room = ({\n  id,\n  isAdmin,\n  setMeetingInfoPopUp,\n  url,\n  meetingInfoPopUp\n}) => {\n  _s2();\n\n  const [isMessenger, setMessenger] = useState(false);\n  const numUsers = useRef();\n  let history = useHistory();\n  const [peers, setPeers] = useState([]);\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const currentPeer = useRef();\n  const adminPeer = useRef();\n  const screenStream = useRef();\n  const roomID = id;\n  const [isAudio, setIsAudio] = useState(false);\n  const [streamObj, setStreamObj] = useState();\n  const [screenCastStream, setScreenCastStream] = useState();\n  const [isPresenting, setIsPresenting] = useState();\n  const [isVideo, setIsVideo] = useState(true); // const messageList=useRef()\n\n  const [messageList, setMessageList] = useState([]);\n  const [messageAlert, setMessageAlert] = useState({});\n  const [prevMessage, setPrevMessage] = useState();\n  let alertTimeout = null;\n\n  const formatDate = () => {\n    return moment().format(\"LT\");\n  };\n\n  useEffect(() => {\n    socketRef.current = io.connect(\"/\");\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      setStreamObj(stream);\n      userVideo.current.srcObject = stream;\n      console.log(userVideo.current); // LOGIC THAT USER HAS JOINED THE ROOM\n      //THIS EVENT Is NOT CACHED AT BACKEND\n      //.emit means sending  to backend\n\n      socketRef.current.emit(\"JOINED ROOM\");\n      socketRef.current.emit(\"join room\", roomID); // Recieve users from backened\n      // if (!props.isAdmin) {\n\n      socketRef.current.on(\"all users\", users => {\n        //peers is for how many videos are rendering\n        console.log(users);\n        const peersForVideo = [];\n        users.forEach(userID => {\n          console.log(userID + \" USER ID OF USER IN THE ROOM \");\n          console.log(socketRef.current); //socketRef.current.id is the of user currently joined\n          // UserID  id's of all those inside the meeting\n\n          const peer = createPeer(userID, socketRef.current.id, stream); //peersRef is for which is having connection with which\n\n          peersRef.current.push({\n            peerID: userID,\n            peer\n          });\n          peersForVideo.push(peer);\n        });\n\n        if (peers.length <= 4) {\n          setPeers(peersForVideo);\n        }\n      }); //PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\n      //.on means recieving from backend\n\n      socketRef.current.on(\"user joined\", payload => {\n        const peer = addPeer(payload.signal, payload.callerID, stream);\n        peersRef.current.push({\n          peerID: payload.callerID,\n          peer\n        });\n        setPeers(users => [...users, peer]);\n      });\n      socketRef.current.on(\"receiving returned signal\", payload => {\n        // signal has been send to multiple now multiple users are sending back the signal to caller\n        const item = peersRef.current.find(p => p.peerID === payload.id);\n        console.log(item);\n        item.peer.signal(payload.signal); // currentPeer.current = item.peer;\n        // returningSignal()\n      }); // }\n    });\n  }, []);\n\n  function createPeer(userToSignal, callerID, stream) {\n    console.log(\"CREATE PEER\");\n    const peer = new Peer({\n      initiator: true,\n      //trickle wait for all the data to send makes it slow\n      trickle: false,\n      stream\n    });\n    currentPeer.current = peer; //generates signal\n    //sending to backend\n\n    console.log(userToSignal + \"  \" + callerID);\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"sending signal\", {\n        userToSignal,\n        callerID,\n        signal\n      });\n    });\n    return peer;\n  }\n\n  function addPeer(incomingSignal, callerID, stream) {\n    console.log(\"Add Peer\");\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    adminPeer.current = peer; // 1 accepting the incoming signal that this will return the signal\n\n    peer.signal(incomingSignal);\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"returning signal\", {\n        signal,\n        callerID\n      });\n    });\n    return peer;\n  }\n\n  const screenShare = () => {\n    navigator.mediaDevices //Cursor True is means sending cursor also of the person sharing screen to the person recieving the screen\n    .getDisplayMedia({\n      cursor: true\n    }).then(screenStream => {\n      console.log(\"SCREEN STREAM\", screenStream);\n      console.log(userVideo.current);\n      peers.map((peer, index) => {\n        console.log(peer);\n        peer.replaceTrack( //0th track is the screen track\n        streamObj.getVideoTracks()[0], screenStream.getVideoTracks()[0], streamObj);\n      });\n      setIsPresenting(true); //WHEN SHARING STOPS RETURN TO NORMAl STATE\n      //RESPONSIBLE FOR WORKING OF STOP BUTTON\n\n      setScreenCastStream(screenStream);\n\n      screenStream.getTracks()[0].onended = () => {\n        peers.map((peer, index) => {\n          console.log(\"CALLED\");\n          peer.replaceTrack(screenStream.getVideoTracks()[0], streamObj.getVideoTracks()[0], streamObj);\n        });\n        setIsPresenting(false);\n      };\n    });\n  };\n\n  const stopScreenShare = () => {\n    screenCastStream.getVideoTracks().forEach(function (track) {\n      track.stop();\n    }); // Replace with video tracks\n\n    peers.map((peer, index) => {\n      peer.replaceTrack(screenCastStream.getVideoTracks()[0], streamObj.getVideoTracks()[0], streamObj);\n      setIsPresenting(false);\n    });\n  };\n\n  const toggleVideo = value => {\n    if (value) {\n      userVideo.current.play();\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(stream => {\n        userVideo.current.srcObject = stream;\n      });\n    } else {\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(stream => {\n        userVideo.current.srcObject = stream.stop;\n      });\n    }\n\n    setIsVideo(value);\n  };\n\n  const disconnect = () => {\n    console.log(\"Clicked\");\n    socketRef.current.disconnect();\n    history.push(\"/\");\n  };\n\n  const sendMsg = msg => {\n    //Send From one peer to another\n    if (currentPeer.current) {\n      currentPeer.current.send(msg);\n    }\n\n    if (adminPeer.current) {\n      adminPeer.current.send(msg);\n    }\n\n    socketRef.current.emit(\"prevMessage\", prevMessage);\n    socketRef.current.emit(\"chatMessages\", {\n      msg: msg,\n      user: socketRef.current.id,\n      time: formatDate()\n    });\n  };\n\n  useEffect(() => {\n    socketRef.current.on(\"allMessages\", payload => {\n      console.log(payload.chatMessages);\n      setPrevMessage(payload.chatMessages);\n      setMessageList(payload.chatMessages);\n      setMessageAlert({\n        alert: true,\n        isPopup: true,\n        payload: {\n          user: payload.payload.user,\n          msg: payload.payload.msg\n        }\n      }); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n      alertTimeout = setTimeout(() => {\n        setMessageAlert({ ...messageAlert,\n          isPopup: false,\n          payload: {}\n        });\n      }, 100000);\n    });\n    socketRef.current.on(\"currentUserMessages\", payload => {\n      setMessageList(payload.chatMessages);\n      setPrevMessage(payload.chatMessages);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"videoScreen\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        style: vidStyle,\n        muted: !isAudio,\n        ref: userVideo,\n        autoPlay: true,\n        controls: isPresenting\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 5\n      }, this), peers.map((peer, index) => {\n        return /*#__PURE__*/_jsxDEV(Video, {\n          peer: peer,\n          numUsers: numUsers.current,\n          isAudio: isAudio\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 7\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MeetingHeader, {\n      setMessenger: setMessenger,\n      id: id,\n      setMessageAlert: setMessageAlert,\n      messageAlert: messageAlert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MeetingFooter, {\n      isPresenting: isPresenting,\n      screenShare: screenShare,\n      stopScreenShare: stopScreenShare,\n      disconnect: disconnect,\n      setIsAudio: setIsAudio,\n      isVideo: isVideo,\n      isAudio: isAudio,\n      toggleVideo: toggleVideo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 4\n    }, this), isAdmin && meetingInfoPopUp && /*#__PURE__*/_jsxDEV(MeetingInfo, {\n      url: url,\n      setMeetingInfoPopUp: setMeetingInfoPopUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 5\n    }, this), isMessenger ? /*#__PURE__*/_jsxDEV(Messenger, {\n      setMessenger: setMessenger,\n      sendMsg: sendMsg // messageListState={messageListState}\n      ,\n      messageList: messageList // userMessage={userMessage}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 5\n    }, this) : messageAlert.isPopup && /*#__PURE__*/_jsxDEV(Alert, {\n      messageAlert: messageAlert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 314,\n    columnNumber: 3\n  }, this);\n};\n\n_s2(Room, \"EUkXVdjBFyoUxpk0ZQBaDyCgkms=\", false, function () {\n  return [useHistory];\n});\n\n_c2 = Room;\nexport default Room;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Video\");\n$RefreshReg$(_c2, \"Room\");","map":{"version":3,"sources":["C:/Users/jayka/web development/google-meet/client/src/components/MeetingPage/Room.js"],"names":["React","useEffect","useRef","useState","useReducer","useHistory","io","Peer","MeetingHeader","MeetingFooter","MeetingInfo","Alert","Messenger","moment","vidStyle","height","width","padding","paddingBottom","objectFit","Video","props","ref","peer","on","stream","console","log","current","srcObject","isAudio","Room","id","isAdmin","setMeetingInfoPopUp","url","meetingInfoPopUp","isMessenger","setMessenger","numUsers","history","peers","setPeers","socketRef","userVideo","peersRef","currentPeer","adminPeer","screenStream","roomID","setIsAudio","streamObj","setStreamObj","screenCastStream","setScreenCastStream","isPresenting","setIsPresenting","isVideo","setIsVideo","messageList","setMessageList","messageAlert","setMessageAlert","prevMessage","setPrevMessage","alertTimeout","formatDate","format","connect","navigator","mediaDevices","getUserMedia","video","audio","then","emit","users","peersForVideo","forEach","userID","createPeer","push","peerID","length","payload","addPeer","signal","callerID","item","find","p","userToSignal","initiator","trickle","incomingSignal","screenShare","getDisplayMedia","cursor","map","index","replaceTrack","getVideoTracks","getTracks","onended","stopScreenShare","track","stop","toggleVideo","value","play","disconnect","sendMsg","msg","send","user","time","chatMessages","alert","isPopup","setTimeout"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,EAA6CC,UAA7C,QAA+D,OAA/D;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,QAAQ,GAAG;AAChBC,EAAAA,MAAM,EAAG,UADO;AAEhBC,EAAAA,KAAK,EAAE,SAFS;AAGhBC,EAAAA,OAAO,EAAE,MAHO;AAIhBC,EAAAA,aAAa,EAAE,KAJC;AAKhBC,EAAAA,SAAS,EAAE;AALK,CAAjB;;AAQA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAMC,GAAG,GAAGpB,MAAM,EAAlB,CADwB,CAExB;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACfoB,IAAAA,KAAK,CAACE,IAAN,CAAWC,EAAX,CAAc,QAAd,EAAyBC,MAAD,IAAY;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAYF,MAAxB;AACAH,MAAAA,GAAG,CAACM,OAAJ,CAAYC,SAAZ,GAAwBJ,MAAxB;AACA,KAHD;AAIA,GALQ,EAKN,EALM,CAAT;AAOA,sBACC;AACC,IAAA,KAAK,EAAEX,QADR;AAEC,IAAA,KAAK,EAAE,CAACO,KAAK,CAACS,OAFf;AAGC,IAAA,GAAG,EAAER,GAHN;AAIC,IAAA,QAAQ,MAJT;AAKC,IAAA,QAAQ;AALT;AAAA;AAAA;AAAA;AAAA,UADD;AASA,CAnBD;;GAAMF,K;;KAAAA,K;;AAuBN,MAAMW,IAAI,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,OAAN;AAAeC,EAAAA,mBAAf;AAAoCC,EAAAA,GAApC;AAAyCC,EAAAA;AAAzC,CAAD,KAAiE;AAAA;;AAC7E,QAAM,CAACC,WAAD,EAAcC,YAAd,IAA8BnC,QAAQ,CAAC,KAAD,CAA5C;AAEA,QAAMoC,QAAQ,GAAGrC,MAAM,EAAvB;AACA,MAAIsC,OAAO,GAAGnC,UAAU,EAAxB;AACA,QAAM,CAACoC,KAAD,EAAQC,QAAR,IAAoBvC,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMwC,SAAS,GAAGzC,MAAM,EAAxB;AACA,QAAM0C,SAAS,GAAG1C,MAAM,EAAxB;AACA,QAAM2C,QAAQ,GAAG3C,MAAM,CAAC,EAAD,CAAvB;AACA,QAAM4C,WAAW,GAAG5C,MAAM,EAA1B;AACA,QAAM6C,SAAS,GAAG7C,MAAM,EAAxB;AACA,QAAM8C,YAAY,GAAG9C,MAAM,EAA3B;AACA,QAAM+C,MAAM,GAAGjB,EAAf;AACA,QAAM,CAACF,OAAD,EAAUoB,UAAV,IAAwB/C,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACgD,SAAD,EAAYC,YAAZ,IAA4BjD,QAAQ,EAA1C;AACA,QAAM,CAACkD,gBAAD,EAAmBC,mBAAnB,IAA0CnD,QAAQ,EAAxD;AACA,QAAM,CAACoD,YAAD,EAAeC,eAAf,IAAkCrD,QAAQ,EAAhD;AACA,QAAM,CAACsD,OAAD,EAAUC,UAAV,IAAwBvD,QAAQ,CAAC,IAAD,CAAtC,CAjB6E,CAmB7E;;AACA,QAAM,CAACwD,WAAD,EAAcC,cAAd,IAAgCzD,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAAC0D,YAAD,EAAeC,eAAf,IAAkC3D,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAAC4D,WAAD,EAAcC,cAAd,IAAgC7D,QAAQ,EAA9C;AACA,MAAI8D,YAAY,GAAG,IAAnB;;AAEA,QAAMC,UAAU,GAAG,MAAM;AACxB,WAAOrD,MAAM,GAAGsD,MAAT,CAAgB,IAAhB,CAAP;AACA,GAFD;;AAIAlE,EAAAA,SAAS,CAAC,MAAM;AACf0C,IAAAA,SAAS,CAACf,OAAV,GAAoBtB,EAAE,CAAC8D,OAAH,CAAW,GAAX,CAApB;AACAC,IAAAA,SAAS,CAACC,YAAV,CACEC,YADF,CACe;AAAEC,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KADf,EAEEC,IAFF,CAEQjD,MAAD,IAAY;AACjB2B,MAAAA,YAAY,CAAC3B,MAAD,CAAZ;AACAmB,MAAAA,SAAS,CAAChB,OAAV,CAAkBC,SAAlB,GAA8BJ,MAA9B;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYiB,SAAS,CAAChB,OAAtB,EAJiB,CAMjB;AAEA;AACA;;AACAe,MAAAA,SAAS,CAACf,OAAV,CAAkB+C,IAAlB,CAAuB,aAAvB;AACAhC,MAAAA,SAAS,CAACf,OAAV,CAAkB+C,IAAlB,CAAuB,WAAvB,EAAoC1B,MAApC,EAXiB,CAYjB;AACA;;AAEAN,MAAAA,SAAS,CAACf,OAAV,CAAkBJ,EAAlB,CAAqB,WAArB,EAAmCoD,KAAD,IAAW;AAC5C;AACAlD,QAAAA,OAAO,CAACC,GAAR,CAAYiD,KAAZ;AACA,cAAMC,aAAa,GAAG,EAAtB;AACAD,QAAAA,KAAK,CAACE,OAAN,CAAeC,MAAD,IAAY;AACzBrD,UAAAA,OAAO,CAACC,GAAR,CAAYoD,MAAM,GAAG,+BAArB;AACArD,UAAAA,OAAO,CAACC,GAAR,CAAYgB,SAAS,CAACf,OAAtB,EAFyB,CAGzB;AACA;;AAEA,gBAAML,IAAI,GAAGyD,UAAU,CAACD,MAAD,EAASpC,SAAS,CAACf,OAAV,CAAkBI,EAA3B,EAA+BP,MAA/B,CAAvB,CANyB,CAOzB;;AACAoB,UAAAA,QAAQ,CAACjB,OAAT,CAAiBqD,IAAjB,CAAsB;AACrBC,YAAAA,MAAM,EAAEH,MADa;AAErBxD,YAAAA;AAFqB,WAAtB;AAKAsD,UAAAA,aAAa,CAACI,IAAd,CAAmB1D,IAAnB;AACA,SAdD;;AAeA,YAAIkB,KAAK,CAAC0C,MAAN,IAAgB,CAApB,EAAuB;AACtBzC,UAAAA,QAAQ,CAACmC,aAAD,CAAR;AACA;AACD,OAtBD,EAfiB,CAsCjB;AACA;;AACAlC,MAAAA,SAAS,CAACf,OAAV,CAAkBJ,EAAlB,CAAqB,aAArB,EAAqC4D,OAAD,IAAa;AAChD,cAAM7D,IAAI,GAAG8D,OAAO,CAACD,OAAO,CAACE,MAAT,EAAiBF,OAAO,CAACG,QAAzB,EAAmC9D,MAAnC,CAApB;AAEAoB,QAAAA,QAAQ,CAACjB,OAAT,CAAiBqD,IAAjB,CAAsB;AACrBC,UAAAA,MAAM,EAAEE,OAAO,CAACG,QADK;AAErBhE,UAAAA;AAFqB,SAAtB;AAKAmB,QAAAA,QAAQ,CAAEkC,KAAD,IAAW,CAAC,GAAGA,KAAJ,EAAWrD,IAAX,CAAZ,CAAR;AACA,OATD;AAUAoB,MAAAA,SAAS,CAACf,OAAV,CAAkBJ,EAAlB,CAAqB,2BAArB,EAAmD4D,OAAD,IAAa;AAC9D;AACA,cAAMI,IAAI,GAAG3C,QAAQ,CAACjB,OAAT,CAAiB6D,IAAjB,CAAuBC,CAAD,IAAOA,CAAC,CAACR,MAAF,KAAaE,OAAO,CAACpD,EAAlD,CAAb;AACAN,QAAAA,OAAO,CAACC,GAAR,CAAY6D,IAAZ;AAEAA,QAAAA,IAAI,CAACjE,IAAL,CAAU+D,MAAV,CAAiBF,OAAO,CAACE,MAAzB,EAL8D,CAM9D;AACA;AACA,OARD,EAlDiB,CA2DjB;AACA,KA9DF;AA+DA,GAjEQ,EAiEN,EAjEM,CAAT;;AAmEA,WAASN,UAAT,CAAoBW,YAApB,EAAkCJ,QAAlC,EAA4C9D,MAA5C,EAAoD;AACnDC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,UAAMJ,IAAI,GAAG,IAAIhB,IAAJ,CAAS;AACrBqF,MAAAA,SAAS,EAAE,IADU;AAErB;AACAC,MAAAA,OAAO,EAAE,KAHY;AAIrBpE,MAAAA;AAJqB,KAAT,CAAb;AAMAqB,IAAAA,WAAW,CAAClB,OAAZ,GAAsBL,IAAtB,CARmD,CAUnD;AACA;;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYgE,YAAY,GAAG,IAAf,GAAsBJ,QAAlC;AACAhE,IAAAA,IAAI,CAACC,EAAL,CAAQ,QAAR,EAAmB8D,MAAD,IAAY;AAC7B3C,MAAAA,SAAS,CAACf,OAAV,CAAkB+C,IAAlB,CAAuB,gBAAvB,EAAyC;AACxCgB,QAAAA,YADwC;AAExCJ,QAAAA,QAFwC;AAGxCD,QAAAA;AAHwC,OAAzC;AAKA,KAND;AASA,WAAO/D,IAAP;AACA;;AAED,WAAS8D,OAAT,CAAiBS,cAAjB,EAAiCP,QAAjC,EAA2C9D,MAA3C,EAAmD;AAClDC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,UAAMJ,IAAI,GAAG,IAAIhB,IAAJ,CAAS;AACrBqF,MAAAA,SAAS,EAAE,KADU;AAErBC,MAAAA,OAAO,EAAE,KAFY;AAGrBpE,MAAAA;AAHqB,KAAT,CAAb;AAKAsB,IAAAA,SAAS,CAACnB,OAAV,GAAoBL,IAApB,CAPkD,CAQlD;;AACAA,IAAAA,IAAI,CAAC+D,MAAL,CAAYQ,cAAZ;AAEAvE,IAAAA,IAAI,CAACC,EAAL,CAAQ,QAAR,EAAmB8D,MAAD,IAAY;AAC7B3C,MAAAA,SAAS,CAACf,OAAV,CAAkB+C,IAAlB,CAAuB,kBAAvB,EAA2C;AAAEW,QAAAA,MAAF;AAAUC,QAAAA;AAAV,OAA3C;AACA,KAFD;AAKA,WAAOhE,IAAP;AACA;;AAED,QAAMwE,WAAW,GAAG,MAAM;AACzB1B,IAAAA,SAAS,CAACC,YAAV,CACC;AADD,KAEE0B,eAFF,CAEkB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAFlB,EAGEvB,IAHF,CAGQ1B,YAAD,IAAkB;AACvBtB,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BqB,YAA7B;AACAtB,MAAAA,OAAO,CAACC,GAAR,CAAYiB,SAAS,CAAChB,OAAtB;AAEAa,MAAAA,KAAK,CAACyD,GAAN,CAAU,CAAC3E,IAAD,EAAO4E,KAAP,KAAiB;AAC1BzE,QAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAA,QAAAA,IAAI,CAAC6E,YAAL,EACC;AACAjD,QAAAA,SAAS,CAACkD,cAAV,GAA2B,CAA3B,CAFD,EAGCrD,YAAY,CAACqD,cAAb,GAA8B,CAA9B,CAHD,EAIClD,SAJD;AAMA,OARD;AASAK,MAAAA,eAAe,CAAC,IAAD,CAAf,CAbuB,CAevB;AACA;;AACAF,MAAAA,mBAAmB,CAACN,YAAD,CAAnB;;AAEAA,MAAAA,YAAY,CAACsD,SAAb,GAAyB,CAAzB,EAA4BC,OAA5B,GAAsC,MAAM;AAC3C9D,QAAAA,KAAK,CAACyD,GAAN,CAAU,CAAC3E,IAAD,EAAO4E,KAAP,KAAiB;AAC1BzE,UAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAJ,UAAAA,IAAI,CAAC6E,YAAL,CACCpD,YAAY,CAACqD,cAAb,GAA8B,CAA9B,CADD,EAEClD,SAAS,CAACkD,cAAV,GAA2B,CAA3B,CAFD,EAGClD,SAHD;AAKA,SAPD;AAQAK,QAAAA,eAAe,CAAC,KAAD,CAAf;AACA,OAVD;AAWA,KAjCF;AAkCA,GAnCD;;AAoCA,QAAMgD,eAAe,GAAG,MAAM;AAC7BnD,IAAAA,gBAAgB,CAACgD,cAAjB,GAAkCvB,OAAlC,CAA0C,UAAU2B,KAAV,EAAiB;AAC1DA,MAAAA,KAAK,CAACC,IAAN;AACA,KAFD,EAD6B,CAI7B;;AACAjE,IAAAA,KAAK,CAACyD,GAAN,CAAU,CAAC3E,IAAD,EAAO4E,KAAP,KAAiB;AAC1B5E,MAAAA,IAAI,CAAC6E,YAAL,CACC/C,gBAAgB,CAACgD,cAAjB,GAAkC,CAAlC,CADD,EAEClD,SAAS,CAACkD,cAAV,GAA2B,CAA3B,CAFD,EAGClD,SAHD;AAKAK,MAAAA,eAAe,CAAC,KAAD,CAAf;AACA,KAPD;AAQA,GAbD;;AAeA,QAAMmD,WAAW,GAAIC,KAAD,IAAW;AAC9B,QAAIA,KAAJ,EAAW;AACVhE,MAAAA,SAAS,CAAChB,OAAV,CAAkBiF,IAAlB;AACAxC,MAAAA,SAAS,CAACC,YAAV,CACEC,YADF,CACe;AAAEC,QAAAA,KAAK,EAAE,IAAT;AAAeC,QAAAA,KAAK,EAAE;AAAtB,OADf,EAEEC,IAFF,CAEQjD,MAAD,IAAY;AACjBmB,QAAAA,SAAS,CAAChB,OAAV,CAAkBC,SAAlB,GAA8BJ,MAA9B;AACA,OAJF;AAKA,KAPD,MAOO;AACN4C,MAAAA,SAAS,CAACC,YAAV,CACEC,YADF,CACe;AAAEC,QAAAA,KAAK,EAAE,IAAT;AAAeC,QAAAA,KAAK,EAAE;AAAtB,OADf,EAEEC,IAFF,CAEQjD,MAAD,IAAY;AACjBmB,QAAAA,SAAS,CAAChB,OAAV,CAAkBC,SAAlB,GAA8BJ,MAAM,CAACiF,IAArC;AACA,OAJF;AAKA;;AAEDhD,IAAAA,UAAU,CAACkD,KAAD,CAAV;AACA,GAjBD;;AAmBA,QAAME,UAAU,GAAG,MAAM;AACxBpF,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAgB,IAAAA,SAAS,CAACf,OAAV,CAAkBkF,UAAlB;AACAtE,IAAAA,OAAO,CAACyC,IAAR,CAAa,GAAb;AACA,GAJD;;AAOA,QAAM8B,OAAO,GAAIC,GAAD,IAAS;AACxB;AAEA,QAAIlE,WAAW,CAAClB,OAAhB,EAAyB;AACxBkB,MAAAA,WAAW,CAAClB,OAAZ,CAAoBqF,IAApB,CAAyBD,GAAzB;AACA;;AACD,QAAIjE,SAAS,CAACnB,OAAd,EAAuB;AACtBmB,MAAAA,SAAS,CAACnB,OAAV,CAAkBqF,IAAlB,CAAuBD,GAAvB;AACA;;AACKrE,IAAAA,SAAS,CAACf,OAAV,CAAkB+C,IAAlB,CAAuB,aAAvB,EAAqCZ,WAArC;AAENpB,IAAAA,SAAS,CAACf,OAAV,CAAkB+C,IAAlB,CAAuB,cAAvB,EAAuC;AAEtCqC,MAAAA,GAAG,EAAEA,GAFiC;AAGtCE,MAAAA,IAAI,EAAEvE,SAAS,CAACf,OAAV,CAAkBI,EAHc;AAItCmF,MAAAA,IAAI,EAAEjD,UAAU;AAJsB,KAAvC;AAUA,GArBD;;AAsBAjE,EAAAA,SAAS,CAAC,MAAM;AACf0C,IAAAA,SAAS,CAACf,OAAV,CAAkBJ,EAAlB,CAAqB,aAArB,EAAqC4D,OAAD,IAAa;AAChD1D,MAAAA,OAAO,CAACC,GAAR,CAAYyD,OAAO,CAACgC,YAApB;AACApD,MAAAA,cAAc,CAACoB,OAAO,CAACgC,YAAT,CAAd;AACAxD,MAAAA,cAAc,CAACwB,OAAO,CAACgC,YAAT,CAAd;AAEAtD,MAAAA,eAAe,CAAC;AACfuD,QAAAA,KAAK,EAAE,IADQ;AAEfC,QAAAA,OAAO,EAAE,IAFM;AAGflC,QAAAA,OAAO,EAAE;AACR8B,UAAAA,IAAI,EAAE9B,OAAO,CAACA,OAAR,CAAgB8B,IADd;AAERF,UAAAA,GAAG,EAAE5B,OAAO,CAACA,OAAR,CAAgB4B;AAFb;AAHM,OAAD,CAAf,CALgD,CAchD;;AACA/C,MAAAA,YAAY,GAAGsD,UAAU,CAAC,MAAM;AAC/BzD,QAAAA,eAAe,CAAC,EACf,GAAGD,YADY;AAEfyD,UAAAA,OAAO,EAAE,KAFM;AAGflC,UAAAA,OAAO,EAAE;AAHM,SAAD,CAAf;AAKA,OANwB,EAMtB,MANsB,CAAzB;AAOA,KAtBD;AAwBAzC,IAAAA,SAAS,CAACf,OAAV,CAAkBJ,EAAlB,CAAqB,qBAArB,EAA6C4D,OAAD,IAAa;AACxDxB,MAAAA,cAAc,CAACwB,OAAO,CAACgC,YAAT,CAAd;AACApD,MAAAA,cAAc,CAACoB,OAAO,CAACgC,YAAT,CAAd;AACA,KAHD;AAIA,GA7BQ,EA6BN,EA7BM,CAAT;AA8BA,sBACC;AAAK,IAAA,KAAK,EAAC,aAAX;AAAA,4BACC;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACC;AACC,QAAA,KAAK,EAAEtG,QADR;AAEC,QAAA,KAAK,EAAE,CAACgB,OAFT;AAGC,QAAA,GAAG,EAAEc,SAHN;AAIC,QAAA,QAAQ,MAJT;AAKC,QAAA,QAAQ,EAAEW;AALX;AAAA;AAAA;AAAA;AAAA,cADD,EAQEd,KAAK,CAACyD,GAAN,CAAU,CAAC3E,IAAD,EAAO4E,KAAP,KAAiB;AAC3B,4BACC,QAAC,KAAD;AAEC,UAAA,IAAI,EAAE5E,IAFP;AAGC,UAAA,QAAQ,EAAEgB,QAAQ,CAACX,OAHpB;AAIC,UAAA,OAAO,EAAEE;AAJV,WACMqE,KADN;AAAA;AAAA;AAAA;AAAA,gBADD;AAQA,OATA,CARF;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAoBC,QAAC,aAAD;AACC,MAAA,YAAY,EAAE7D,YADf;AAEC,MAAA,EAAE,EAAEN,EAFL;AAGC,MAAA,eAAe,EAAE8B,eAHlB;AAIC,MAAA,YAAY,EAAED;AAJf;AAAA;AAAA;AAAA;AAAA,YApBD,eA2BC,QAAC,aAAD;AACC,MAAA,YAAY,EAAEN,YADf;AAEC,MAAA,WAAW,EAAEwC,WAFd;AAGC,MAAA,eAAe,EAAES,eAHlB;AAIC,MAAA,UAAU,EAAEM,UAJb;AAKC,MAAA,UAAU,EAAE5D,UALb;AAMC,MAAA,OAAO,EAAEO,OANV;AAOC,MAAA,OAAO,EAAE3B,OAPV;AAQC,MAAA,WAAW,EAAE6E;AARd;AAAA;AAAA;AAAA;AAAA,YA3BD,EAqCE1E,OAAO,IAAIG,gBAAX,iBACA,QAAC,WAAD;AAAa,MAAA,GAAG,EAAED,GAAlB;AAAuB,MAAA,mBAAmB,EAAED;AAA5C;AAAA;AAAA;AAAA;AAAA,YAtCF,EAwCEG,WAAW,gBACX,QAAC,SAAD;AACC,MAAA,YAAY,EAAEC,YADf;AAEC,MAAA,OAAO,EAAEyE,OAFV,CAGC;AAHD;AAIC,MAAA,WAAW,EAAEpD,WAJd,CAKC;;AALD;AAAA;AAAA;AAAA;AAAA,YADW,GASXE,YAAY,CAACyD,OAAb,iBAAwB,QAAC,KAAD;AAAO,MAAA,YAAY,EAAEzD;AAArB;AAAA;AAAA;AAAA;AAAA,YAjD1B;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAsDA,CAnUD;;IAAM9B,I;UAIS1B,U;;;MAJT0B,I;AAqUN,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useRef, useState, useReducer } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\nimport MeetingHeader from \"./meetingHeader\";\r\nimport MeetingFooter from \"./meetingFooter\";\r\nimport MeetingInfo from \"./meetingInfo\";\r\nimport Alert from \"./alert\";\r\nimport Messenger from \"./messenger\";\r\n\r\nimport moment from \"moment\";\r\n\r\nconst vidStyle = {\r\n\theight: `264.15px`,\r\n\twidth: \"639.9px\",\r\n\tpadding: \"10px\",\r\n\tpaddingBottom: \"5px\",\r\n\tobjectFit: \"fill\",\r\n};\r\n\r\nconst Video = (props) => {\r\n\tconst ref = useRef();\r\n\t// console.log(\"VIDEO CALLED\" + JSON.stringify(props.peer));\r\n\tuseEffect(() => {\r\n\t\tprops.peer.on(\"stream\", (stream) => {\r\n\t\t\tconsole.log(\"ENTE0RD\" + stream);\r\n\t\t\tref.current.srcObject = stream;\r\n\t\t});\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<video\r\n\t\t\tstyle={vidStyle}\r\n\t\t\tmuted={!props.isAudio}\r\n\t\t\tref={ref}\r\n\t\t\tautoPlay\r\n\t\t\tcontrols\r\n\t\t/>\r\n\t);\r\n};\r\n\r\n\r\n\r\nconst Room = ({ id, isAdmin, setMeetingInfoPopUp, url, meetingInfoPopUp }) => {\r\n\tconst [isMessenger, setMessenger] = useState(false);\r\n\r\n\tconst numUsers = useRef();\r\n\tlet history = useHistory();\r\n\tconst [peers, setPeers] = useState([]);\r\n\tconst socketRef = useRef();\r\n\tconst userVideo = useRef();\r\n\tconst peersRef = useRef([]);\r\n\tconst currentPeer = useRef();\r\n\tconst adminPeer = useRef();\r\n\tconst screenStream = useRef();\r\n\tconst roomID = id;\r\n\tconst [isAudio, setIsAudio] = useState(false);\r\n\tconst [streamObj, setStreamObj] = useState();\r\n\tconst [screenCastStream, setScreenCastStream] = useState();\r\n\tconst [isPresenting, setIsPresenting] = useState();\r\n\tconst [isVideo, setIsVideo] = useState(true);\r\n\t\r\n\t// const messageList=useRef()\r\n\tconst [messageList, setMessageList] = useState([]);\r\n\tconst [messageAlert, setMessageAlert] = useState({});\r\n\tconst [prevMessage, setPrevMessage] = useState();\r\n\tlet alertTimeout = null;\r\n\r\n\tconst formatDate = () => {\r\n\t\treturn moment().format(\"LT\");\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tsocketRef.current = io.connect(\"/\");\r\n\t\tnavigator.mediaDevices\r\n\t\t\t.getUserMedia({ video: true, audio: true })\r\n\t\t\t.then((stream) => {\r\n\t\t\t\tsetStreamObj(stream);\r\n\t\t\t\tuserVideo.current.srcObject = stream;\r\n\r\n\t\t\t\tconsole.log(userVideo.current);\r\n\r\n\t\t\t\t// LOGIC THAT USER HAS JOINED THE ROOM\r\n\r\n\t\t\t\t//THIS EVENT Is NOT CACHED AT BACKEND\r\n\t\t\t\t//.emit means sending  to backend\r\n\t\t\t\tsocketRef.current.emit(\"JOINED ROOM\");\r\n\t\t\t\tsocketRef.current.emit(\"join room\", roomID);\r\n\t\t\t\t// Recieve users from backened\r\n\t\t\t\t// if (!props.isAdmin) {\r\n\r\n\t\t\t\tsocketRef.current.on(\"all users\", (users) => {\r\n\t\t\t\t\t//peers is for how many videos are rendering\r\n\t\t\t\t\tconsole.log(users);\r\n\t\t\t\t\tconst peersForVideo = [];\r\n\t\t\t\t\tusers.forEach((userID) => {\r\n\t\t\t\t\t\tconsole.log(userID + \" USER ID OF USER IN THE ROOM \");\r\n\t\t\t\t\t\tconsole.log(socketRef.current);\r\n\t\t\t\t\t\t//socketRef.current.id is the of user currently joined\r\n\t\t\t\t\t\t// UserID  id's of all those inside the meeting\r\n\r\n\t\t\t\t\t\tconst peer = createPeer(userID, socketRef.current.id, stream);\r\n\t\t\t\t\t\t//peersRef is for which is having connection with which\r\n\t\t\t\t\t\tpeersRef.current.push({\r\n\t\t\t\t\t\t\tpeerID: userID,\r\n\t\t\t\t\t\t\tpeer,\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tpeersForVideo.push(peer);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (peers.length <= 4) {\r\n\t\t\t\t\t\tsetPeers(peersForVideo);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t//PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\r\n\t\t\t\t//.on means recieving from backend\r\n\t\t\t\tsocketRef.current.on(\"user joined\", (payload) => {\r\n\t\t\t\t\tconst peer = addPeer(payload.signal, payload.callerID, stream);\r\n\r\n\t\t\t\t\tpeersRef.current.push({\r\n\t\t\t\t\t\tpeerID: payload.callerID,\r\n\t\t\t\t\t\tpeer,\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tsetPeers((users) => [...users, peer]);\r\n\t\t\t\t});\r\n\t\t\t\tsocketRef.current.on(\"receiving returned signal\", (payload) => {\r\n\t\t\t\t\t// signal has been send to multiple now multiple users are sending back the signal to caller\r\n\t\t\t\t\tconst item = peersRef.current.find((p) => p.peerID === payload.id);\r\n\t\t\t\t\tconsole.log(item);\r\n\r\n\t\t\t\t\titem.peer.signal(payload.signal);\r\n\t\t\t\t\t// currentPeer.current = item.peer;\r\n\t\t\t\t\t// returningSignal()\r\n\t\t\t\t});\r\n\t\t\t\t// }\r\n\t\t\t});\r\n\t}, []);\r\n\r\n\tfunction createPeer(userToSignal, callerID, stream) {\r\n\t\tconsole.log(\"CREATE PEER\");\r\n\t\tconst peer = new Peer({\r\n\t\t\tinitiator: true,\r\n\t\t\t//trickle wait for all the data to send makes it slow\r\n\t\t\ttrickle: false,\r\n\t\t\tstream,\r\n\t\t});\r\n\t\tcurrentPeer.current = peer;\r\n\r\n\t\t//generates signal\r\n\t\t//sending to backend\r\n\t\tconsole.log(userToSignal + \"  \" + callerID);\r\n\t\tpeer.on(\"signal\", (signal) => {\r\n\t\t\tsocketRef.current.emit(\"sending signal\", {\r\n\t\t\t\tuserToSignal,\r\n\t\t\t\tcallerID,\r\n\t\t\t\tsignal,\r\n\t\t\t});\r\n\t\t});\r\n\t\t\r\n\r\n\t\treturn peer;\r\n\t}\r\n\r\n\tfunction addPeer(incomingSignal, callerID, stream) {\r\n\t\tconsole.log(\"Add Peer\");\r\n\t\tconst peer = new Peer({\r\n\t\t\tinitiator: false,\r\n\t\t\ttrickle: false,\r\n\t\t\tstream,\r\n\t\t});\r\n\t\tadminPeer.current = peer;\r\n\t\t// 1 accepting the incoming signal that this will return the signal\r\n\t\tpeer.signal(incomingSignal);\r\n\r\n\t\tpeer.on(\"signal\", (signal) => {\r\n\t\t\tsocketRef.current.emit(\"returning signal\", { signal, callerID });\r\n\t\t});\r\n\r\n\t\t\r\n\t\treturn peer;\r\n\t}\r\n\r\n\tconst screenShare = () => {\r\n\t\tnavigator.mediaDevices\r\n\t\t\t//Cursor True is means sending cursor also of the person sharing screen to the person recieving the screen\r\n\t\t\t.getDisplayMedia({ cursor: true })\r\n\t\t\t.then((screenStream) => {\r\n\t\t\t\tconsole.log(\"SCREEN STREAM\", screenStream);\r\n\t\t\t\tconsole.log(userVideo.current);\r\n\r\n\t\t\t\tpeers.map((peer, index) => {\r\n\t\t\t\t\tconsole.log(peer);\r\n\t\t\t\t\tpeer.replaceTrack(\r\n\t\t\t\t\t\t//0th track is the screen track\r\n\t\t\t\t\t\tstreamObj.getVideoTracks()[0],\r\n\t\t\t\t\t\tscreenStream.getVideoTracks()[0],\r\n\t\t\t\t\t\tstreamObj\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t\tsetIsPresenting(true);\r\n\r\n\t\t\t\t//WHEN SHARING STOPS RETURN TO NORMAl STATE\r\n\t\t\t\t//RESPONSIBLE FOR WORKING OF STOP BUTTON\r\n\t\t\t\tsetScreenCastStream(screenStream);\r\n\r\n\t\t\t\tscreenStream.getTracks()[0].onended = () => {\r\n\t\t\t\t\tpeers.map((peer, index) => {\r\n\t\t\t\t\t\tconsole.log(\"CALLED\");\r\n\t\t\t\t\t\tpeer.replaceTrack(\r\n\t\t\t\t\t\t\tscreenStream.getVideoTracks()[0],\r\n\t\t\t\t\t\t\tstreamObj.getVideoTracks()[0],\r\n\t\t\t\t\t\t\tstreamObj\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsetIsPresenting(false);\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t};\r\n\tconst stopScreenShare = () => {\r\n\t\tscreenCastStream.getVideoTracks().forEach(function (track) {\r\n\t\t\ttrack.stop();\r\n\t\t});\r\n\t\t// Replace with video tracks\r\n\t\tpeers.map((peer, index) => {\r\n\t\t\tpeer.replaceTrack(\r\n\t\t\t\tscreenCastStream.getVideoTracks()[0],\r\n\t\t\t\tstreamObj.getVideoTracks()[0],\r\n\t\t\t\tstreamObj\r\n\t\t\t);\r\n\t\t\tsetIsPresenting(false);\r\n\t\t});\r\n\t};\r\n\r\n\tconst toggleVideo = (value) => {\r\n\t\tif (value) {\r\n\t\t\tuserVideo.current.play();\r\n\t\t\tnavigator.mediaDevices\r\n\t\t\t\t.getUserMedia({ video: true, audio: true })\r\n\t\t\t\t.then((stream) => {\r\n\t\t\t\t\tuserVideo.current.srcObject = stream;\r\n\t\t\t\t});\r\n\t\t} else {\r\n\t\t\tnavigator.mediaDevices\r\n\t\t\t\t.getUserMedia({ video: true, audio: true })\r\n\t\t\t\t.then((stream) => {\r\n\t\t\t\t\tuserVideo.current.srcObject = stream.stop;\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tsetIsVideo(value);\r\n\t};\r\n\r\n\tconst disconnect = () => {\r\n\t\tconsole.log(\"Clicked\");\r\n\t\tsocketRef.current.disconnect();\r\n\t\thistory.push(\"/\");\r\n\t};\r\n\r\n\r\n\tconst sendMsg = (msg) => {\r\n\t\t//Send From one peer to another\r\n\r\n\t\tif (currentPeer.current) {\r\n\t\t\tcurrentPeer.current.send(msg);\r\n\t\t}\r\n\t\tif (adminPeer.current) {\r\n\t\t\tadminPeer.current.send(msg);\r\n\t\t}\r\n        socketRef.current.emit(\"prevMessage\",prevMessage)\r\n\r\n\t\tsocketRef.current.emit(\"chatMessages\", {\r\n\t\t\t\r\n\t\t\tmsg: msg,\r\n\t\t\tuser: socketRef.current.id,\r\n\t\t\ttime: formatDate(),\r\n\t\t\t\r\n\t\t});\r\n\r\n\t\t\r\n\t\t\r\n\t};\r\n\tuseEffect(() => {\r\n\t\tsocketRef.current.on(\"allMessages\", (payload) => {\r\n\t\t\tconsole.log(payload.chatMessages);\r\n\t\t\tsetPrevMessage(payload.chatMessages);\r\n\t\t\tsetMessageList(payload.chatMessages);\r\n\r\n\t\t\tsetMessageAlert({\r\n\t\t\t\talert: true,\r\n\t\t\t\tisPopup: true,\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\tuser: payload.payload.user,\r\n\t\t\t\t\tmsg: payload.payload.msg,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\r\n\t\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t\t\talertTimeout = setTimeout(() => {\r\n\t\t\t\tsetMessageAlert({\r\n\t\t\t\t\t...messageAlert,\r\n\t\t\t\t\tisPopup: false,\r\n\t\t\t\t\tpayload: {},\r\n\t\t\t\t});\r\n\t\t\t}, 100000);\r\n\t\t});\r\n\r\n\t\tsocketRef.current.on(\"currentUserMessages\", (payload) => {\r\n\t\t\tsetMessageList(payload.chatMessages);\r\n\t\t\tsetPrevMessage(payload.chatMessages);\r\n\t\t});\r\n\t}, []);\r\n\treturn (\r\n\t\t<div class=\"videoScreen\">\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<video\r\n\t\t\t\t\tstyle={vidStyle}\r\n\t\t\t\t\tmuted={!isAudio}\r\n\t\t\t\t\tref={userVideo}\r\n\t\t\t\t\tautoPlay\r\n\t\t\t\t\tcontrols={isPresenting}\r\n\t\t\t\t/>\r\n\t\t\t\t{peers.map((peer, index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Video\r\n\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\tpeer={peer}\r\n\t\t\t\t\t\t\tnumUsers={numUsers.current}\r\n\t\t\t\t\t\t\tisAudio={isAudio}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t\t<MeetingHeader\r\n\t\t\t\tsetMessenger={setMessenger}\r\n\t\t\t\tid={id}\r\n\t\t\t\tsetMessageAlert={setMessageAlert}\r\n\t\t\t\tmessageAlert={messageAlert}\r\n\t\t\t/>\r\n\r\n\t\t\t<MeetingFooter\r\n\t\t\t\tisPresenting={isPresenting}\r\n\t\t\t\tscreenShare={screenShare}\r\n\t\t\t\tstopScreenShare={stopScreenShare}\r\n\t\t\t\tdisconnect={disconnect}\r\n\t\t\t\tsetIsAudio={setIsAudio}\r\n\t\t\t\tisVideo={isVideo}\r\n\t\t\t\tisAudio={isAudio}\r\n\t\t\t\ttoggleVideo={toggleVideo}\r\n\t\t\t/>\r\n\t\t\t{isAdmin && meetingInfoPopUp && (\r\n\t\t\t\t<MeetingInfo url={url} setMeetingInfoPopUp={setMeetingInfoPopUp} />\r\n\t\t\t)}\r\n\t\t\t{isMessenger ? (\r\n\t\t\t\t<Messenger\r\n\t\t\t\t\tsetMessenger={setMessenger}\r\n\t\t\t\t\tsendMsg={sendMsg}\r\n\t\t\t\t\t// messageListState={messageListState}\r\n\t\t\t\t\tmessageList={messageList}\r\n\t\t\t\t\t// userMessage={userMessage}\r\n\t\t\t\t/>\r\n\t\t\t) : (\r\n\t\t\t\tmessageAlert.isPopup && <Alert messageAlert={messageAlert} />\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Room;\r\n"]},"metadata":{},"sourceType":"module"}