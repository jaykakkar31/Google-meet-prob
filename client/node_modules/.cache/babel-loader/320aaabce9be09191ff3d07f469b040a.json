{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayka\\\\web development\\\\google-meet\\\\src\\\\components\\\\Room.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\theight: calc(100vh - 90px);\n\twidth: 100vw;\n\tflex-wrap: wrap;\n\tjustify-content: center;\n`;\n_c = Container;\nconst StyledVideo = styled.video`\n\theight: 50%;\n\twidth: 50%;\n`;\n_c2 = StyledVideo;\n\nconst Video = props => {\n  _s();\n\n  const ref = useRef();\n  useEffect(() => {\n    console.log(props.peer);\n    props.peer.on(\"stream\", stream => {\n      console.log(\"ENTE0RD\" + stream);\n      ref.current.srcObject = stream;\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(StyledVideo, {\n    autoPlay: true,\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Video, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n_c3 = Video;\nconst videoConstraints = {\n  height: window.innerHeight / 2,\n  width: window.innerWidth / 2\n};\n\nconst Room = props => {\n  _s2();\n\n  const [peers, setPeers] = useState([]);\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const roomID = props.id;\n  useEffect(() => {\n    socketRef.current = io.connect(\"/\");\n    navigator.mediaDevices.getUserMedia({\n      video: videoConstraints,\n      audio: true\n    }).then(stream => {\n      userVideo.current.srcObject = stream;\n      console.log(\"USERVIDEO\" + stream); // LOGIC THAT USER HAS JOINED THE ROOM\n      //THIS EVENT Is NOT CACHED AT BACKEND\n      //.emit means sending  to backend\n\n      socketRef.current.emit(\"JOINED ROOM\");\n      socketRef.current.emit(\"join room\", roomID); // Recieve users from backened\n\n      if (!props.isAdmin) {\n        socketRef.current.on(\"all users\", users => {\n          //peers is for how many videos are rendering\n          console.log(users.length);\n          const peersForVideo = [];\n          users.forEach(userID => {\n            console.log(userID + \" USER ID OF USER IN THE ROOM \");\n            console.log(socketRef.current); //socketRef.current.id is the of user currently joined\n            // UserID  id's of all those inside the meeting\n\n            const peer = createPeer(userID, socketRef.current.id, stream); //peersRef is for which is having connection with which\n\n            peersRef.current.push({\n              peerID: userID,\n              peer\n            });\n            peersForVideo.push(peer);\n          });\n          setPeers(peersForVideo);\n          console.log(peers);\n        }); //PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\n        //.on means recieving from backend\n\n        socketRef.current.on(\"user joined\", payload => {\n          const peer = addPeer(payload.signal, payload.callerID, stream);\n          peersRef.current.push({\n            peerID: payload.callerID,\n            peer\n          });\n          setPeers(users => [...users, peer]);\n        });\n        socketRef.current.on(\"receiving returned signal\", payload => {\n          // signal has been send to multiple now multiple users are sending back the signal to caller\n          const item = peersRef.current.find(p => p.peerID === payload.id);\n          console.log(item);\n          item.peer.signal(payload.signal);\n        });\n      }\n    });\n  }, []);\n\n  function createPeer(userToSignal, callerID, stream) {\n    console.log(\"CREATE PEER\");\n    const peer = new Peer({\n      initiator: true,\n      //trickle wait for all the data to send makes it slow\n      trickle: false,\n      stream\n    }); //generates signal\n    //sending to backend\n\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"sending signal\", {\n        userToSignal,\n        callerID,\n        signal\n      });\n    });\n    return peer;\n  }\n\n  function addPeer(incomingSignal, callerID, stream) {\n    console.log(\"Add Peer\");\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    }); // 1 accepting the incoming signal that this will return the signal\n\n    peer.signal(incomingSignal);\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"returning signal\", {\n        signal,\n        callerID\n      });\n    });\n    return peer;\n  } // console.log(\"PEERS \" + JSON.stringify(peers));\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(StyledVideo, {\n      muted: true,\n      ref: userVideo,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 4\n    }, this), peers.map((peer, index) => {\n      return /*#__PURE__*/_jsxDEV(Video, {\n        peer: peer\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 12\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 3\n  }, this);\n};\n\n_s2(Room, \"CnCiOWEqFkEX/I5xE9Iw8SwijJY=\");\n\n_c4 = Room;\nexport default Room;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"StyledVideo\");\n$RefreshReg$(_c3, \"Video\");\n$RefreshReg$(_c4, \"Room\");","map":{"version":3,"sources":["C:/Users/jayka/web development/google-meet/src/components/Room.jsx"],"names":["React","useEffect","useRef","useState","io","Peer","styled","Container","div","StyledVideo","video","Video","props","ref","console","log","peer","on","stream","current","srcObject","videoConstraints","height","window","innerHeight","width","innerWidth","Room","peers","setPeers","socketRef","userVideo","peersRef","roomID","id","connect","navigator","mediaDevices","getUserMedia","audio","then","emit","isAdmin","users","length","peersForVideo","forEach","userID","createPeer","push","peerID","payload","addPeer","signal","callerID","item","find","p","userToSignal","initiator","trickle","incomingSignal","map","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\theight: calc(100vh - 90px);\r\n\twidth: 100vw;\r\n\tflex-wrap: wrap;\r\n\tjustify-content: center;\r\n`;\r\n\r\nconst StyledVideo = styled.video`\r\n\theight: 50%;\r\n\twidth: 50%;\r\n`;\r\n\r\nconst Video = (props) => {\r\n\tconst ref = useRef();\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log(props.peer);\r\n\t\tprops.peer.on(\"stream\", (stream) => {\r\n\t\t\tconsole.log(\"ENTE0RD\" + stream);\r\n\t\t\tref.current.srcObject = stream;\r\n\t\t});\r\n\t}, []);\r\n\r\n\treturn <StyledVideo autoPlay ref={ref} />;\r\n};\r\n\r\nconst videoConstraints = {\r\n\theight: window.innerHeight / 2,\r\n\twidth: window.innerWidth / 2,\r\n};\r\n\r\nconst Room = (props) => {\r\n\tconst [peers, setPeers] = useState([]);\r\n\tconst socketRef = useRef();\r\n\tconst userVideo = useRef();\r\n\tconst peersRef = useRef([]);\r\n\tconst roomID = props.id;\r\n\r\n\tuseEffect(() => {\r\n\t\tsocketRef.current = io.connect(\"/\");\r\n\t\tnavigator.mediaDevices\r\n\t\t\t.getUserMedia({ video: videoConstraints, audio: true })\r\n\t\t\t.then((stream) => {\r\n\t\t\t\tuserVideo.current.srcObject = stream;\r\n\t\t\t\tconsole.log(\"USERVIDEO\" + stream);\r\n\t\t\t\t// LOGIC THAT USER HAS JOINED THE ROOM\r\n\r\n\t\t\t\t//THIS EVENT Is NOT CACHED AT BACKEND\r\n\t\t\t\t//.emit means sending  to backend\r\n\t\t\t\tsocketRef.current.emit(\"JOINED ROOM\");\r\n\t\t\t\tsocketRef.current.emit(\"join room\", roomID);\r\n\t\t\t\t// Recieve users from backened\r\n\t\t\t\tif (!props.isAdmin) {\r\n\t\t\t\t\tsocketRef.current.on(\"all users\", (users) => {\r\n\t\t\t\t\t\t//peers is for how many videos are rendering\r\n\t\t\t\t\t\tconsole.log(users.length);\r\n\t\t\t\t\t\tconst peersForVideo = [];\r\n\t\t\t\t\t\tusers.forEach((userID) => {\r\n\t\t\t\t\t\t\tconsole.log(userID + \" USER ID OF USER IN THE ROOM \");\r\n\t\t\t\t\t\t\tconsole.log(socketRef.current);\r\n\t\t\t\t\t\t\t//socketRef.current.id is the of user currently joined\r\n\t\t\t\t\t\t\t// UserID  id's of all those inside the meeting\r\n\r\n\t\t\t\t\t\t\tconst peer = createPeer(userID, socketRef.current.id, stream);\r\n\t\t\t\t\t\t\t//peersRef is for which is having connection with which\r\n\t\t\t\t\t\t\tpeersRef.current.push({\r\n\t\t\t\t\t\t\t\tpeerID: userID,\r\n\t\t\t\t\t\t\t\tpeer,\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tpeersForVideo.push(peer);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tsetPeers(peersForVideo);\r\n\t\t\t\t\t\tconsole.log(peers);\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//PERSON IN THE ROOM GETS NOTIFIED THAT SOMEBODY HAS JOINED\r\n\t\t\t\t\t//.on means recieving from backend\r\n\t\t\t\t\tsocketRef.current.on(\"user joined\", (payload) => {\r\n\t\t\t\t\t\tconst peer = addPeer(payload.signal, payload.callerID, stream);\r\n\r\n\t\t\t\t\t\tpeersRef.current.push({\r\n\t\t\t\t\t\t\tpeerID: payload.callerID,\r\n\t\t\t\t\t\t\tpeer,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tsetPeers((users) => [...users, peer]);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsocketRef.current.on(\"receiving returned signal\", (payload) => {\r\n\t\t\t\t\t\t// signal has been send to multiple now multiple users are sending back the signal to caller\r\n\t\t\t\t\t\tconst item = peersRef.current.find((p) => p.peerID === payload.id);\r\n\t\t\t\t\t\tconsole.log(item);\r\n\t\t\t\t\t\titem.peer.signal(payload.signal);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}, []);\r\n\r\n\tfunction createPeer(userToSignal, callerID, stream) {\r\n\t\tconsole.log(\"CREATE PEER\");\r\n\t\tconst peer = new Peer({\r\n\t\t\tinitiator: true,\r\n\t\t\t//trickle wait for all the data to send makes it slow\r\n\t\t\ttrickle: false,\r\n\t\t\tstream,\r\n\t\t});\r\n\t\t//generates signal\r\n\t\t//sending to backend\r\n\t\tpeer.on(\"signal\", (signal) => {\r\n\t\t\tsocketRef.current.emit(\"sending signal\", {\r\n\t\t\t\tuserToSignal,\r\n\t\t\t\tcallerID,\r\n\t\t\t\tsignal,\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn peer;\r\n\t}\r\n\r\n\tfunction addPeer(incomingSignal, callerID, stream) {\r\n\t\tconsole.log(\"Add Peer\");\r\n\t\tconst peer = new Peer({\r\n\t\t\tinitiator: false,\r\n\t\t\ttrickle: false,\r\n\t\t\tstream,\r\n\t\t});\r\n\t\t// 1 accepting the incoming signal that this will return the signal\r\n\t\tpeer.signal(incomingSignal);\r\n\r\n\t\tpeer.on(\"signal\", (signal) => {\r\n\t\t\tsocketRef.current.emit(\"returning signal\", { signal, callerID });\r\n\t\t});\r\n\t\treturn peer;\r\n\t}\r\n\r\n\t// console.log(\"PEERS \" + JSON.stringify(peers));\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<StyledVideo muted ref={userVideo} autoPlay />\r\n\t\t\t{peers.map((peer, index) => {\r\n\t\t\t\treturn <Video key={index} peer={peer} />;\r\n\t\t\t})}\r\n\t\t</Container>\r\n\t);\r\n};\r\n\r\nexport default Room;\r\n"]},"metadata":{},"sourceType":"module"}